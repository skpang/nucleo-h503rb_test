
nucleo-h503rb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007774  08000258  08000258  00010258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cc4  08007cc4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ccc  08007ccc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ccc  08007ccc  00017ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cd0  08007cd0  00017cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  20000070  08007d44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08007d44  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d72  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de0  00000000  00000000  00038e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  0003bbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  0003ce58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bfa  00000000  00000000  0003df90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001840c  00000000  00000000  00060b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1dda  00000000  00000000  00078f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ad70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005640  00000000  00000000  0014adc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	; (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	e000      	b.n	800026a <__do_global_dtors_aux+0x12>
 8000268:	bf00      	nop
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000070 	.word	0x20000070
 8000274:	00000000 	.word	0x00000000
 8000278:	080079b4 	.word	0x080079b4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	; (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <frame_dummy+0x18>)
 8000286:	e000      	b.n	800028a <frame_dummy+0xe>
 8000288:	bf00      	nop
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000074 	.word	0x20000074
 8000294:	080079b4 	.word	0x080079b4

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ac:	f000 b982 	b.w	80005b4 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ce:	4604      	mov	r4, r0
 80002d0:	460f      	mov	r7, r1
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d148      	bne.n	8000368 <__udivmoddi4+0xa0>
 80002d6:	428a      	cmp	r2, r1
 80002d8:	4694      	mov	ip, r2
 80002da:	d961      	bls.n	80003a0 <__udivmoddi4+0xd8>
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	b143      	cbz	r3, 80002f4 <__udivmoddi4+0x2c>
 80002e2:	f1c3 0120 	rsb	r1, r3, #32
 80002e6:	409f      	lsls	r7, r3
 80002e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002ec:	409c      	lsls	r4, r3
 80002ee:	fa20 f101 	lsr.w	r1, r0, r1
 80002f2:	430f      	orrs	r7, r1
 80002f4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002f8:	fa1f fe8c 	uxth.w	lr, ip
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	fbb7 f6f1 	udiv	r6, r7, r1
 8000302:	fb01 7716 	mls	r7, r1, r6, r7
 8000306:	fb06 f00e 	mul.w	r0, r6, lr
 800030a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x5c>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x5a>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 8137 	bhi.w	8000590 <__udivmoddi4+0x2c8>
 8000322:	463e      	mov	r6, r7
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f1 	udiv	r0, r2, r1
 800032c:	fb01 2210 	mls	r2, r1, r0, r2
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x86>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x84>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 811c 	bhi.w	8000584 <__udivmoddi4+0x2bc>
 800034c:	4610      	mov	r0, r2
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	2600      	movs	r6, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0x9a>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c5 4300 	strd	r4, r3, [r5]
 8000362:	4631      	mov	r1, r6
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0xb8>
 800036c:	2d00      	cmp	r5, #0
 800036e:	f000 80fd 	beq.w	800056c <__udivmoddi4+0x2a4>
 8000372:	2600      	movs	r6, #0
 8000374:	e9c5 0100 	strd	r0, r1, [r5]
 8000378:	4630      	mov	r0, r6
 800037a:	4631      	mov	r1, r6
 800037c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000380:	fab3 f683 	clz	r6, r3
 8000384:	2e00      	cmp	r6, #0
 8000386:	d14b      	bne.n	8000420 <__udivmoddi4+0x158>
 8000388:	428b      	cmp	r3, r1
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4282      	cmp	r2, r0
 8000390:	f240 80ef 	bls.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4630      	mov	r0, r6
 8000396:	2d00      	cmp	r5, #0
 8000398:	d0e3      	beq.n	8000362 <__udivmoddi4+0x9a>
 800039a:	e9c5 4700 	strd	r4, r7, [r5]
 800039e:	e7e0      	b.n	8000362 <__udivmoddi4+0x9a>
 80003a0:	b902      	cbnz	r2, 80003a4 <__udivmoddi4+0xdc>
 80003a2:	deff      	udf	#255	; 0xff
 80003a4:	fab2 f382 	clz	r3, r2
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 809d 	bne.w	80004e8 <__udivmoddi4+0x220>
 80003ae:	1a89      	subs	r1, r1, r2
 80003b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003b4:	b297      	uxth	r7, r2
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f2fe 	udiv	r2, r1, lr
 80003be:	fb0e 1112 	mls	r1, lr, r2, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb07 f002 	mul.w	r0, r7, r2
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4288      	cmp	r0, r1
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80cf 	beq.w	800058a <__udivmoddi4+0x2c2>
 80003ec:	4642      	mov	r2, r8
 80003ee:	1a09      	subs	r1, r1, r0
 80003f0:	b2a4      	uxth	r4, r4
 80003f2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003fa:	fb00 f707 	mul.w	r7, r0, r7
 80003fe:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000402:	42a7      	cmp	r7, r4
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x150>
 8000406:	eb1c 0404 	adds.w	r4, ip, r4
 800040a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x14e>
 8000410:	42a7      	cmp	r7, r4
 8000412:	f200 80b4 	bhi.w	800057e <__udivmoddi4+0x2b6>
 8000416:	4608      	mov	r0, r1
 8000418:	1be4      	subs	r4, r4, r7
 800041a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800041e:	e79b      	b.n	8000358 <__udivmoddi4+0x90>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa01 f406 	lsl.w	r4, r1, r6
 800042a:	fa22 fc07 	lsr.w	ip, r2, r7
 800042e:	40f9      	lsrs	r1, r7
 8000430:	40b2      	lsls	r2, r6
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa20 f307 	lsr.w	r3, r0, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	431c      	orrs	r4, r3
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fa00 f306 	lsl.w	r3, r0, r6
 8000448:	0c20      	lsrs	r0, r4, #16
 800044a:	fbb1 f8f9 	udiv	r8, r1, r9
 800044e:	fb09 1118 	mls	r1, r9, r8, r1
 8000452:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000456:	fb08 f00e 	mul.w	r0, r8, lr
 800045a:	4288      	cmp	r0, r1
 800045c:	d90f      	bls.n	800047e <__udivmoddi4+0x1b6>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000466:	bf2c      	ite	cs
 8000468:	f04f 0b01 	movcs.w	fp, #1
 800046c:	f04f 0b00 	movcc.w	fp, #0
 8000470:	4288      	cmp	r0, r1
 8000472:	d903      	bls.n	800047c <__udivmoddi4+0x1b4>
 8000474:	f1bb 0f00 	cmp.w	fp, #0
 8000478:	f000 808d 	beq.w	8000596 <__udivmoddi4+0x2ce>
 800047c:	46d0      	mov	r8, sl
 800047e:	1a09      	subs	r1, r1, r0
 8000480:	b2a4      	uxth	r4, r4
 8000482:	fbb1 f0f9 	udiv	r0, r1, r9
 8000486:	fb09 1110 	mls	r1, r9, r0, r1
 800048a:	fb00 fe0e 	mul.w	lr, r0, lr
 800048e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000492:	458e      	cmp	lr, r1
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1de>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800049e:	d201      	bcs.n	80004a4 <__udivmoddi4+0x1dc>
 80004a0:	458e      	cmp	lr, r1
 80004a2:	d87f      	bhi.n	80005a4 <__udivmoddi4+0x2dc>
 80004a4:	4620      	mov	r0, r4
 80004a6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	fba0 9802 	umull	r9, r8, r0, r2
 80004b2:	4541      	cmp	r1, r8
 80004b4:	464c      	mov	r4, r9
 80004b6:	46c6      	mov	lr, r8
 80004b8:	d302      	bcc.n	80004c0 <__udivmoddi4+0x1f8>
 80004ba:	d106      	bne.n	80004ca <__udivmoddi4+0x202>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d204      	bcs.n	80004ca <__udivmoddi4+0x202>
 80004c0:	3801      	subs	r0, #1
 80004c2:	ebb9 0402 	subs.w	r4, r9, r2
 80004c6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	d070      	beq.n	80005b0 <__udivmoddi4+0x2e8>
 80004ce:	1b1a      	subs	r2, r3, r4
 80004d0:	eb61 010e 	sbc.w	r1, r1, lr
 80004d4:	fa22 f306 	lsr.w	r3, r2, r6
 80004d8:	fa01 f707 	lsl.w	r7, r1, r7
 80004dc:	40f1      	lsrs	r1, r6
 80004de:	2600      	movs	r6, #0
 80004e0:	431f      	orrs	r7, r3
 80004e2:	e9c5 7100 	strd	r7, r1, [r5]
 80004e6:	e73c      	b.n	8000362 <__udivmoddi4+0x9a>
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	f1c3 0020 	rsb	r0, r3, #32
 80004f0:	fa01 f203 	lsl.w	r2, r1, r3
 80004f4:	fa21 f600 	lsr.w	r6, r1, r0
 80004f8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004fc:	fa24 f100 	lsr.w	r1, r4, r0
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	409c      	lsls	r4, r3
 8000506:	4311      	orrs	r1, r2
 8000508:	fbb6 f0fe 	udiv	r0, r6, lr
 800050c:	0c0a      	lsrs	r2, r1, #16
 800050e:	fb0e 6610 	mls	r6, lr, r0, r6
 8000512:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000516:	fb00 f607 	mul.w	r6, r0, r7
 800051a:	4296      	cmp	r6, r2
 800051c:	d90e      	bls.n	800053c <__udivmoddi4+0x274>
 800051e:	eb1c 0202 	adds.w	r2, ip, r2
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	bf2c      	ite	cs
 8000528:	f04f 0901 	movcs.w	r9, #1
 800052c:	f04f 0900 	movcc.w	r9, #0
 8000530:	4296      	cmp	r6, r2
 8000532:	d902      	bls.n	800053a <__udivmoddi4+0x272>
 8000534:	f1b9 0f00 	cmp.w	r9, #0
 8000538:	d031      	beq.n	800059e <__udivmoddi4+0x2d6>
 800053a:	4640      	mov	r0, r8
 800053c:	1b92      	subs	r2, r2, r6
 800053e:	b289      	uxth	r1, r1
 8000540:	fbb2 f6fe 	udiv	r6, r2, lr
 8000544:	fb0e 2216 	mls	r2, lr, r6, r2
 8000548:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800054c:	fb06 f207 	mul.w	r2, r6, r7
 8000550:	428a      	cmp	r2, r1
 8000552:	d907      	bls.n	8000564 <__udivmoddi4+0x29c>
 8000554:	eb1c 0101 	adds.w	r1, ip, r1
 8000558:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800055c:	d201      	bcs.n	8000562 <__udivmoddi4+0x29a>
 800055e:	428a      	cmp	r2, r1
 8000560:	d823      	bhi.n	80005aa <__udivmoddi4+0x2e2>
 8000562:	4646      	mov	r6, r8
 8000564:	1a89      	subs	r1, r1, r2
 8000566:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800056a:	e725      	b.n	80003b8 <__udivmoddi4+0xf0>
 800056c:	462e      	mov	r6, r5
 800056e:	4628      	mov	r0, r5
 8000570:	e6f7      	b.n	8000362 <__udivmoddi4+0x9a>
 8000572:	1a84      	subs	r4, r0, r2
 8000574:	eb61 0303 	sbc.w	r3, r1, r3
 8000578:	2001      	movs	r0, #1
 800057a:	461f      	mov	r7, r3
 800057c:	e70b      	b.n	8000396 <__udivmoddi4+0xce>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e749      	b.n	8000418 <__udivmoddi4+0x150>
 8000584:	4464      	add	r4, ip
 8000586:	3802      	subs	r0, #2
 8000588:	e6e1      	b.n	800034e <__udivmoddi4+0x86>
 800058a:	3a02      	subs	r2, #2
 800058c:	4461      	add	r1, ip
 800058e:	e72e      	b.n	80003ee <__udivmoddi4+0x126>
 8000590:	3e02      	subs	r6, #2
 8000592:	4462      	add	r2, ip
 8000594:	e6c6      	b.n	8000324 <__udivmoddi4+0x5c>
 8000596:	f1a8 0802 	sub.w	r8, r8, #2
 800059a:	4461      	add	r1, ip
 800059c:	e76f      	b.n	800047e <__udivmoddi4+0x1b6>
 800059e:	3802      	subs	r0, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	e7cb      	b.n	800053c <__udivmoddi4+0x274>
 80005a4:	3802      	subs	r0, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	e77d      	b.n	80004a6 <__udivmoddi4+0x1de>
 80005aa:	3e02      	subs	r6, #2
 80005ac:	4461      	add	r1, ip
 80005ae:	e7d9      	b.n	8000564 <__udivmoddi4+0x29c>
 80005b0:	462e      	mov	r6, r5
 80005b2:	e6d6      	b.n	8000362 <__udivmoddi4+0x9a>

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  uint32_t tick = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
	  uint16_t i=0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 ff4b 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f87d 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f9f7 	bl	80009c0 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005d2:	f000 f969 	bl	80008a8 <MX_ICACHE_Init>
  MX_USB_PCD_Init();
 80005d6:	f000 f9bf 	bl	8000958 <MX_USB_PCD_Init>
  MX_FDCAN1_Init();
 80005da:	f000 f8df 	bl	800079c <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80005de:	f000 f96f 	bl	80008c0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80005e2:	f000 f921 	bl	8000828 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\n#########################################\n");
 80005e6:	4831      	ldr	r0, [pc, #196]	; (80006ac <main+0xf4>)
 80005e8:	f006 fa58 	bl	8006a9c <puts>
  printf("STM32H503 CAN FD Test skpang.co.uk 04/23\n\n");
 80005ec:	4830      	ldr	r0, [pc, #192]	; (80006b0 <main+0xf8>)
 80005ee:	f006 fa55 	bl	8006a9c <puts>

  skp_can_init();
 80005f2:	f000 fb09 	bl	8000c08 <skp_can_init>
  FDCAN_Config();
 80005f6:	f000 fb53 	bl	8000ca0 <FDCAN_Config>

  TxHeader.Identifier = 0x124;
 80005fa:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <main+0xfc>)
 80005fc:	f44f 7292 	mov.w	r2, #292	; 0x124
 8000600:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000602:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <main+0xfc>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000608:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <main+0xfc>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <main+0xfc>)
 8000610:	220f      	movs	r2, #15
 8000612:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <main+0xfc>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800061a:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <main+0xfc>)
 800061c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000620:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <main+0xfc>)
 8000624:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000628:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <main+0xfc>)
 800062c:	2200      	movs	r2, #0
 800062e:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000630:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <main+0xfc>)
 8000632:	2200      	movs	r2, #0
 8000634:	621a      	str	r2, [r3, #32]
  TxData[0] = i;
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <main+0x100>)
 800063c:	701a      	strb	r2, [r3, #0]
  TxData[1] = i>>8;
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	b29b      	uxth	r3, r3
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <main+0x100>)
 8000648:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x12;
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <main+0x100>)
 800064c:	2212      	movs	r2, #18
 800064e:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x35;
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <main+0x100>)
 8000652:	2235      	movs	r2, #53	; 0x35
 8000654:	70da      	strb	r2, [r3, #3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2120      	movs	r1, #32
 800065a:	4818      	ldr	r0, [pc, #96]	; (80006bc <main+0x104>)
 800065c:	f002 f8f2 	bl	8002844 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000660:	2064      	movs	r0, #100	; 0x64
 8000662:	f000 ff79 	bl	8001558 <HAL_Delay>
	 // printf("hello\n");
	  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2120      	movs	r1, #32
 800066a:	4814      	ldr	r0, [pc, #80]	; (80006bc <main+0x104>)
 800066c:	f002 f8ea 	bl	8002844 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000670:	2064      	movs	r0, #100	; 0x64
 8000672:	f000 ff71 	bl	8001558 <HAL_Delay>
      if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 8000676:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <main+0x100>)
 8000678:	490e      	ldr	r1, [pc, #56]	; (80006b4 <main+0xfc>)
 800067a:	4811      	ldr	r0, [pc, #68]	; (80006c0 <main+0x108>)
 800067c:	f001 faf0 	bl	8001c60 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d004      	beq.n	8000690 <main+0xd8>
	         {
	        	  printf("Tx error\n");
 8000686:	480f      	ldr	r0, [pc, #60]	; (80006c4 <main+0x10c>)
 8000688:	f006 fa08 	bl	8006a9c <puts>
		           Error_Handler();
 800068c:	f000 fa70 	bl	8000b70 <Error_Handler>
		         }
 	   TxData[1] = i>>8;
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b29b      	uxth	r3, r3
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <main+0x100>)
 800069a:	705a      	strb	r2, [r3, #1]
	   TxData[0] = i++;
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	80fa      	strh	r2, [r7, #6]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <main+0x100>)
 80006a6:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80006a8:	e7d5      	b.n	8000656 <main+0x9e>
 80006aa:	bf00      	nop
 80006ac:	080079cc 	.word	0x080079cc
 80006b0:	080079f8 	.word	0x080079f8
 80006b4:	20000548 	.word	0x20000548
 80006b8:	2000056c 	.word	0x2000056c
 80006bc:	42020000 	.word	0x42020000
 80006c0:	2000008c 	.word	0x2000008c
 80006c4:	08007a24 	.word	0x08007a24

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b09c      	sub	sp, #112	; 0x70
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2250      	movs	r2, #80	; 0x50
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 f952 	bl	8006980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
 80006ec:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <SystemClock_Config+0xd0>)
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	4a29      	ldr	r2, [pc, #164]	; (8000798 <SystemClock_Config+0xd0>)
 80006f4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80006f8:	6113      	str	r3, [r2, #16]
 80006fa:	4b27      	ldr	r3, [pc, #156]	; (8000798 <SystemClock_Config+0xd0>)
 80006fc:	691b      	ldr	r3, [r3, #16]
 80006fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000706:	bf00      	nop
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemClock_Config+0xd0>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	f003 0308 	and.w	r3, r3, #8
 8000710:	2b08      	cmp	r3, #8
 8000712:	d1f9      	bne.n	8000708 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000714:	2321      	movs	r3, #33	; 0x21
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000728:	2303      	movs	r3, #3
 800072a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800072c:	230c      	movs	r3, #12
 800072e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000730:	23fa      	movs	r3, #250	; 0xfa
 8000732:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000740:	2304      	movs	r3, #4
 8000742:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000744:	2300      	movs	r3, #0
 8000746:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fac3 	bl	8002cdc <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800075c:	f000 fa08 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	231f      	movs	r3, #31
 8000762:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2303      	movs	r3, #3
 8000766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2105      	movs	r1, #5
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fee4 	bl	800354c <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800078a:	f000 f9f1 	bl	8000b70 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3770      	adds	r7, #112	; 0x70
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	44020800 	.word	0x44020800

0800079c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007a2:	4a20      	ldr	r2, [pc, #128]	; (8000824 <MX_FDCAN1_Init+0x88>)
 80007a4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80007a6:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007cc:	2210      	movs	r2, #16
 80007ce:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007d8:	2202      	movs	r2, #2
 80007da:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007de:	2202      	movs	r2, #2
 80007e0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_FDCAN1_Init+0x84>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_FDCAN1_Init+0x84>)
 8000802:	2200      	movs	r2, #0
 8000804:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_FDCAN1_Init+0x84>)
 8000808:	2200      	movs	r2, #0
 800080a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_FDCAN1_Init+0x84>)
 800080e:	f000 ffd7 	bl	80017c0 <HAL_FDCAN_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000818:	f000 f9aa 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000008c 	.word	0x2000008c
 8000824:	4000a400 	.word	0x4000a400

08000828 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_I2C1_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_I2C1_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_I2C1_Init+0x74>)
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <MX_I2C1_Init+0x7c>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_I2C1_Init+0x74>)
 8000840:	2201      	movs	r2, #1
 8000842:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_I2C1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_I2C1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <MX_I2C1_Init+0x74>)
 8000864:	f002 f806 	bl	8002874 <HAL_I2C_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800086e:	f000 f97f 	bl	8000b70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000872:	2100      	movs	r1, #0
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <MX_I2C1_Init+0x74>)
 8000876:	f002 f88c 	bl	8002992 <HAL_I2CEx_ConfigAnalogFilter>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000880:	f000 f976 	bl	8000b70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_I2C1_Init+0x74>)
 8000888:	f002 f8ce 	bl	8002a28 <HAL_I2CEx_ConfigDigitalFilter>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 f96d 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000f0 	.word	0x200000f0
 80008a0:	40005400 	.word	0x40005400
 80008a4:	60808cd3 	.word	0x60808cd3

080008a8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80008ac:	f002 f908 	bl	8002ac0 <HAL_ICACHE_Enable>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80008b6:	f000 f95b 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008c6:	4a23      	ldr	r2, [pc, #140]	; (8000954 <MX_USART3_UART_Init+0x94>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800090a:	f005 fa2b 	bl	8005d64 <HAL_UART_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000914:	f000 f92c 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800091c:	f005 fee0 	bl	80066e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000926:	f000 f923 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092a:	2100      	movs	r1, #0
 800092c:	4808      	ldr	r0, [pc, #32]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800092e:	f005 ff15 	bl	800675c <HAL_UARTEx_SetRxFifoThreshold>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000938:	f000 f91a 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800093e:	f005 fe96 	bl	800666e <HAL_UARTEx_DisableFifoMode>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000948:	f000 f912 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000144 	.word	0x20000144
 8000954:	40004800 	.word	0x40004800

08000958 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_USB_PCD_Init+0x60>)
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <MX_USB_PCD_Init+0x64>)
 8000960:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_USB_PCD_Init+0x60>)
 8000964:	2208      	movs	r2, #8
 8000966:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_USB_PCD_Init+0x60>)
 800096a:	2208      	movs	r2, #8
 800096c:	609a      	str	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_USB_PCD_Init+0x60>)
 8000970:	2202      	movs	r2, #2
 8000972:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_USB_PCD_Init+0x60>)
 8000976:	2202      	movs	r2, #2
 8000978:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_USB_PCD_Init+0x60>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_USB_PCD_Init+0x60>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USB_PCD_Init+0x60>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_USB_PCD_Init+0x60>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USB_PCD_Init+0x60>)
 8000994:	2200      	movs	r2, #0
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MX_USB_PCD_Init+0x60>)
 800099a:	2200      	movs	r2, #0
 800099c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USB_PCD_Init+0x60>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_USB_PCD_Init+0x60>)
 80009a6:	f002 f89b 	bl	8002ae0 <HAL_PCD_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USB_PCD_Init+0x5c>
  {
    Error_Handler();
 80009b0:	f000 f8de 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200001d8 	.word	0x200001d8
 80009bc:	40016000 	.word	0x40016000

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b58      	ldr	r3, [pc, #352]	; (8000b38 <MX_GPIO_Init+0x178>)
 80009d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009dc:	4a56      	ldr	r2, [pc, #344]	; (8000b38 <MX_GPIO_Init+0x178>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009e6:	4b54      	ldr	r3, [pc, #336]	; (8000b38 <MX_GPIO_Init+0x178>)
 80009e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f4:	4b50      	ldr	r3, [pc, #320]	; (8000b38 <MX_GPIO_Init+0x178>)
 80009f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009fa:	4a4f      	ldr	r2, [pc, #316]	; (8000b38 <MX_GPIO_Init+0x178>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a04:	4b4c      	ldr	r3, [pc, #304]	; (8000b38 <MX_GPIO_Init+0x178>)
 8000a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b49      	ldr	r3, [pc, #292]	; (8000b38 <MX_GPIO_Init+0x178>)
 8000a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a18:	4a47      	ldr	r2, [pc, #284]	; (8000b38 <MX_GPIO_Init+0x178>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a22:	4b45      	ldr	r3, [pc, #276]	; (8000b38 <MX_GPIO_Init+0x178>)
 8000a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	4b41      	ldr	r3, [pc, #260]	; (8000b38 <MX_GPIO_Init+0x178>)
 8000a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a36:	4a40      	ldr	r2, [pc, #256]	; (8000b38 <MX_GPIO_Init+0x178>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a40:	4b3d      	ldr	r3, [pc, #244]	; (8000b38 <MX_GPIO_Init+0x178>)
 8000a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2120      	movs	r1, #32
 8000a52:	483a      	ldr	r0, [pc, #232]	; (8000b3c <MX_GPIO_Init+0x17c>)
 8000a54:	f001 fef6 	bl	8002844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5e:	4838      	ldr	r0, [pc, #224]	; (8000b40 <MX_GPIO_Init+0x180>)
 8000a60:	f001 fef0 	bl	8002844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 8000a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6a:	4b36      	ldr	r3, [pc, #216]	; (8000b44 <MX_GPIO_Init+0x184>)
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4831      	ldr	r0, [pc, #196]	; (8000b40 <MX_GPIO_Init+0x180>)
 8000a7a:	f001 fd91 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000a7e:	2320      	movs	r3, #32
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4829      	ldr	r0, [pc, #164]	; (8000b3c <MX_GPIO_Init+0x17c>)
 8000a96:	f001 fd83 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <MX_GPIO_Init+0x184>)
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4826      	ldr	r0, [pc, #152]	; (8000b48 <MX_GPIO_Init+0x188>)
 8000aae:	f001 fd77 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 8000ab2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab8:	2312      	movs	r3, #18
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	481e      	ldr	r0, [pc, #120]	; (8000b48 <MX_GPIO_Init+0x188>)
 8000ad0:	f001 fd66 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D1_TX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin;
 8000ad4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D1_TX_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4815      	ldr	r0, [pc, #84]	; (8000b48 <MX_GPIO_Init+0x188>)
 8000af2:	f001 fd55 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_GPIO_Init+0x17c>)
 8000b0c:	f001 fd48 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_GPIO_Init+0x180>)
 8000b2a:	f001 fd39 	bl	80025a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	44020c00 	.word	0x44020c00
 8000b3c:	42020000 	.word	0x42020000
 8000b40:	42020800 	.word	0x42020800
 8000b44:	10110000 	.word	0x10110000
 8000b48:	42020400 	.word	0x42020400

08000b4c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000b54:	1d39      	adds	r1, r7, #4
 8000b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <__io_putchar+0x20>)
 8000b5e:	f005 f951 	bl	8005e04 <HAL_UART_Transmit>

  return ch;
 8000b62:	687b      	ldr	r3, [r7, #4]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000144 	.word	0x20000144

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_FDCAN_RxFifo0Callback>:
  */

static const uint8_t DLCtoBytes[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]

	uint8_t i, dlc;

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d02b      	beq.n	8000be8 <HAL_FDCAN_RxFifo0Callback+0x6c>
	{
		/* Retrieve Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f001 f8a6 	bl	8001ce8 <HAL_FDCAN_GetRxMessage>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
		  Error_Handler();
 8000ba2:	f7ff ffe5 	bl	8000b70 <Error_Handler>

			printf(" \n");

		}
	}
}
 8000ba6:	e01f      	b.n	8000be8 <HAL_FDCAN_RxFifo0Callback+0x6c>
			dlc = DLCtoBytes[RxHeader.DataLength ];
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8000bae:	5cd3      	ldrb	r3, [r2, r3]
 8000bb0:	73bb      	strb	r3, [r7, #14]
			printf("Len:%d ID:%x Data:",dlc,RxHeader.Identifier);
 8000bb2:	7bbb      	ldrb	r3, [r7, #14]
 8000bb4:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000bb6:	6812      	ldr	r2, [r2, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4810      	ldr	r0, [pc, #64]	; (8000bfc <HAL_FDCAN_RxFifo0Callback+0x80>)
 8000bbc:	f005 fee8 	bl	8006990 <iprintf>
			for(i=0;i< dlc;i++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	e009      	b.n	8000bda <HAL_FDCAN_RxFifo0Callback+0x5e>
				printf("%x ",RxData[i]);
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480c      	ldr	r0, [pc, #48]	; (8000c00 <HAL_FDCAN_RxFifo0Callback+0x84>)
 8000bd0:	f005 fede 	bl	8006990 <iprintf>
			for(i=0;i< dlc;i++)
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	7bfa      	ldrb	r2, [r7, #15]
 8000bdc:	7bbb      	ldrb	r3, [r7, #14]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d3f1      	bcc.n	8000bc6 <HAL_FDCAN_RxFifo0Callback+0x4a>
			printf(" \n");
 8000be2:	4808      	ldr	r0, [pc, #32]	; (8000c04 <HAL_FDCAN_RxFifo0Callback+0x88>)
 8000be4:	f005 ff5a 	bl	8006a9c <puts>
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000508 	.word	0x20000508
 8000bf4:	200004e0 	.word	0x200004e0
 8000bf8:	08007bcc 	.word	0x08007bcc
 8000bfc:	08007a30 	.word	0x08007a30
 8000c00:	08007a44 	.word	0x08007a44
 8000c04:	08007a48 	.word	0x08007a48

08000c08 <skp_can_init>:


void skp_can_init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

	  hfdcan1.Instance = FDCAN1;
 8000c0c:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <skp_can_init+0x8c>)
 8000c0e:	4a22      	ldr	r2, [pc, #136]	; (8000c98 <skp_can_init+0x90>)
 8000c10:	601a      	str	r2, [r3, #0]
	  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <skp_can_init+0x8c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
	  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000c18:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <skp_can_init+0x8c>)
 8000c1a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c1e:	609a      	str	r2, [r3, #8]
	  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <skp_can_init+0x8c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
	  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <skp_can_init+0x8c>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	741a      	strb	r2, [r3, #16]
	  hfdcan1.Init.TransmitPause = ENABLE;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <skp_can_init+0x8c>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	745a      	strb	r2, [r3, #17]
	  hfdcan1.Init.ProtocolException = DISABLE;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <skp_can_init+0x8c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	749a      	strb	r2, [r3, #18]
	  hfdcan1.Init.NominalSyncJumpWidth = 1;
	  hfdcan1.Init.NominalTimeSeg1 = 63;
	  hfdcan1.Init.NominalTimeSeg2 = 16;
       */

	  hfdcan1.Init.NominalPrescaler = 1;			//500kbps
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <skp_can_init+0x8c>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	615a      	str	r2, [r3, #20]
	  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <skp_can_init+0x8c>)
 8000c40:	2210      	movs	r2, #16
 8000c42:	619a      	str	r2, [r3, #24]
	  hfdcan1.Init.NominalTimeSeg1 = 119;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <skp_can_init+0x8c>)
 8000c46:	2277      	movs	r2, #119	; 0x77
 8000c48:	61da      	str	r2, [r3, #28]
	  hfdcan1.Init.NominalTimeSeg2 = 40;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <skp_can_init+0x8c>)
 8000c4c:	2228      	movs	r2, #40	; 0x28
 8000c4e:	621a      	str	r2, [r3, #32]
	  hfdcan1.Init.DataSyncJumpWidth = 1;
	  hfdcan1.Init.DataTimeSeg1 = 7;				//4000kbps
	  hfdcan1.Init.DataTimeSeg2 = 2;
*/

	  hfdcan1.Init.DataPrescaler = 1;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <skp_can_init+0x8c>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
	  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <skp_can_init+0x8c>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
	  hfdcan1.Init.DataTimeSeg1 = 30;				//2000kbps
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <skp_can_init+0x8c>)
 8000c5e:	221e      	movs	r2, #30
 8000c60:	62da      	str	r2, [r3, #44]	; 0x2c
	  hfdcan1.Init.DataTimeSeg2 = 9;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <skp_can_init+0x8c>)
 8000c64:	2209      	movs	r2, #9
 8000c66:	631a      	str	r2, [r3, #48]	; 0x30

	  hfdcan1.Init.StdFiltersNbr = 1;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <skp_can_init+0x8c>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34
	  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <skp_can_init+0x8c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	639a      	str	r2, [r3, #56]	; 0x38

	  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <skp_can_init+0x8c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	63da      	str	r2, [r3, #60]	; 0x3c

	  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <skp_can_init+0x8c>)
 8000c7c:	f000 fda0 	bl	80017c0 <HAL_FDCAN_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d004      	beq.n	8000c90 <skp_can_init+0x88>
	  {

		printf("##########  HAL_FDCAN_Init ERROR 1 ##########\n");
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <skp_can_init+0x94>)
 8000c88:	f005 ff08 	bl	8006a9c <puts>
	    Error_Handler();
 8000c8c:	f7ff ff70 	bl	8000b70 <Error_Handler>
	  }
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	2000008c 	.word	0x2000008c
 8000c98:	4000a400 	.word	0x4000a400
 8000c9c:	08007a4c 	.word	0x08007a4c

08000ca0 <FDCAN_Config>:

void FDCAN_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af02      	add	r7, sp, #8
  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterType = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x321;
 8000cba:	f240 3321 	movw	r3, #801	; 0x321
 8000cbe:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8000cc0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000cc4:	617b      	str	r3, [r7, #20]

  //sFilterConfig.FilterID1 = 0;
  //sFilterConfig.FilterID2 = 0;


  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4836      	ldr	r0, [pc, #216]	; (8000da4 <FDCAN_Config+0x104>)
 8000ccc:	f000 fed2 	bl	8001a74 <HAL_FDCAN_ConfigFilter>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <FDCAN_Config+0x40>

  {
    printf("##########  HAL_FDCAN_ConfigFilter ERROR 2 ##########\n");
 8000cd6:	4834      	ldr	r0, [pc, #208]	; (8000da8 <FDCAN_Config+0x108>)
 8000cd8:	f005 fee0 	bl	8006a9c <puts>
    Error_Handler();
 8000cdc:	f7ff ff48 	bl	8000b70 <Error_Handler>

  /* Configure global filter:
     Filter all remote frames with STD and EXT ID
     Reject non matching frames with STD ID and EXT ID */
  //if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	482e      	ldr	r0, [pc, #184]	; (8000da4 <FDCAN_Config+0x104>)
 8000cec:	f000 ff1c 	bl	8001b28 <HAL_FDCAN_ConfigGlobalFilter>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d004      	beq.n	8000d00 <FDCAN_Config+0x60>
  {
	  printf("##########  HAL_FDCAN_ConfigFilter ERROR 3 ##########\n");
 8000cf6:	482d      	ldr	r0, [pc, #180]	; (8000dac <FDCAN_Config+0x10c>)
 8000cf8:	f005 fed0 	bl	8006a9c <puts>
    Error_Handler();
 8000cfc:	f7ff ff38 	bl	8000b70 <Error_Handler>
  }

// 6,2 working for a bit
  if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, 6, 2) != HAL_OK)
 8000d00:	2202      	movs	r2, #2
 8000d02:	2106      	movs	r1, #6
 8000d04:	4827      	ldr	r0, [pc, #156]	; (8000da4 <FDCAN_Config+0x104>)
 8000d06:	f000 ff40 	bl	8001b8a <HAL_FDCAN_ConfigTxDelayCompensation>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d004      	beq.n	8000d1a <FDCAN_Config+0x7a>
  {
	  printf("##########  HAL_FDCAN_ConfigFilter ERROR 6 ##########\n");
 8000d10:	4827      	ldr	r0, [pc, #156]	; (8000db0 <FDCAN_Config+0x110>)
 8000d12:	f005 fec3 	bl	8006a9c <puts>
    Error_Handler();
 8000d16:	f7ff ff2b 	bl	8000b70 <Error_Handler>
  }

  if (HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1) != HAL_OK)
 8000d1a:	4822      	ldr	r0, [pc, #136]	; (8000da4 <FDCAN_Config+0x104>)
 8000d1c:	f000 ff57 	bl	8001bce <HAL_FDCAN_EnableTxDelayCompensation>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d004      	beq.n	8000d30 <FDCAN_Config+0x90>
  {
	  printf("##########  HAL_FDCAN_ConfigFilter ERROR 7 ##########\n");
 8000d26:	4823      	ldr	r0, [pc, #140]	; (8000db4 <FDCAN_Config+0x114>)
 8000d28:	f005 feb8 	bl	8006a9c <puts>
    Error_Handler();
 8000d2c:	f7ff ff20 	bl	8000b70 <Error_Handler>
  }


  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000d30:	481c      	ldr	r0, [pc, #112]	; (8000da4 <FDCAN_Config+0x104>)
 8000d32:	f000 ff6d 	bl	8001c10 <HAL_FDCAN_Start>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d004      	beq.n	8000d46 <FDCAN_Config+0xa6>
  {
	  printf("##########  HAL_FDCAN_ConfigFilter ERROR 4 ##########\n");
 8000d3c:	481e      	ldr	r0, [pc, #120]	; (8000db8 <FDCAN_Config+0x118>)
 8000d3e:	f005 fead 	bl	8006a9c <puts>
    Error_Handler();
 8000d42:	f7ff ff15 	bl	8000b70 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000d46:	2200      	movs	r2, #0
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4816      	ldr	r0, [pc, #88]	; (8000da4 <FDCAN_Config+0x104>)
 8000d4c:	f001 f8d4 	bl	8001ef8 <HAL_FDCAN_ActivateNotification>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d004      	beq.n	8000d60 <FDCAN_Config+0xc0>
  {
	  printf("##########  HAL_FDCAN_ConfigFilter ERROR 5 ##########\n");
 8000d56:	4819      	ldr	r0, [pc, #100]	; (8000dbc <FDCAN_Config+0x11c>)
 8000d58:	f005 fea0 	bl	8006a9c <puts>
    Error_Handler();
 8000d5c:	f7ff ff08 	bl	8000b70 <Error_Handler>
  }

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x111;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <FDCAN_Config+0x120>)
 8000d62:	f240 1211 	movw	r2, #273	; 0x111
 8000d66:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <FDCAN_Config+0x120>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <FDCAN_Config+0x120>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <FDCAN_Config+0x120>)
 8000d76:	220f      	movs	r2, #15
 8000d78:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <FDCAN_Config+0x120>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <FDCAN_Config+0x120>)
 8000d82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d86:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <FDCAN_Config+0x120>)
 8000d8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d8e:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <FDCAN_Config+0x120>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <FDCAN_Config+0x120>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  //if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, 5, 0) != HAL_OK)

}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	2000008c 	.word	0x2000008c
 8000da8:	08007a7c 	.word	0x08007a7c
 8000dac:	08007ab4 	.word	0x08007ab4
 8000db0:	08007aec 	.word	0x08007aec
 8000db4:	08007b24 	.word	0x08007b24
 8000db8:	08007b5c 	.word	0x08007b5c
 8000dbc:	08007b94 	.word	0x08007b94
 8000dc0:	20000548 	.word	0x20000548

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b0ac      	sub	sp, #176	; 0xb0
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	2288      	movs	r2, #136	; 0x88
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f005 fdc3 	bl	8006980 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a39      	ldr	r2, [pc, #228]	; (8000ee4 <HAL_FDCAN_MspInit+0x110>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d16b      	bne.n	8000edc <HAL_FDCAN_MspInit+0x108>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	f04f 0304 	mov.w	r3, #4
 8000e0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_HSE;
 8000e10:	2303      	movs	r3, #3
 8000e12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 3;
 8000e14:	2303      	movs	r3, #3
 8000e16:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 60;
 8000e18:	233c      	movs	r3, #60	; 0x3c
 8000e1a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 6;
 8000e20:	2306      	movs	r3, #6
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_3;
 8000e28:	230c      	movs	r3, #12
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVQ;
 8000e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2Q;
 8000e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 fec3 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_FDCAN_MspInit+0x80>
    {
      Error_Handler();
 8000e50:	f7ff fe8e 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <HAL_FDCAN_MspInit+0x114>)
 8000e56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e5a:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <HAL_FDCAN_MspInit+0x114>)
 8000e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e60:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8000e64:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <HAL_FDCAN_MspInit+0x114>)
 8000e66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <HAL_FDCAN_MspInit+0x114>)
 8000e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <HAL_FDCAN_MspInit+0x114>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_FDCAN_MspInit+0x114>)
 8000e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB15     ------> FDCAN1_TX
    PB5     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5;
 8000e90:	f248 0320 	movw	r3, #32800	; 0x8020
 8000e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000eaa:	2309      	movs	r3, #9
 8000eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480d      	ldr	r0, [pc, #52]	; (8000eec <HAL_FDCAN_MspInit+0x118>)
 8000eb8:	f001 fb72 	bl	80025a0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2027      	movs	r0, #39	; 0x27
 8000ec2:	f000 fc48 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000ec6:	2027      	movs	r0, #39	; 0x27
 8000ec8:	f000 fc5f 	bl	800178a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2028      	movs	r0, #40	; 0x28
 8000ed2:	f000 fc40 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000ed6:	2028      	movs	r0, #40	; 0x28
 8000ed8:	f000 fc57 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	37b0      	adds	r7, #176	; 0xb0
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	4000a400 	.word	0x4000a400
 8000ee8:	44020c00 	.word	0x44020c00
 8000eec:	42020400 	.word	0x42020400

08000ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ac      	sub	sp, #176	; 0xb0
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	2288      	movs	r2, #136	; 0x88
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f005 fd35 	bl	8006980 <memset>
  if(hi2c->Instance==I2C1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <HAL_I2C_MspInit+0xc4>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d144      	bne.n	8000faa <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 fe4b 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000f40:	f7ff fe16 	bl	8000b70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f4a:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f62:	23c0      	movs	r3, #192	; 0xc0
 8000f64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f68:	2312      	movs	r3, #18
 8000f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f84:	4619      	mov	r1, r3
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <HAL_I2C_MspInit+0xcc>)
 8000f88:	f001 fb0a 	bl	80025a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f98:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	37b0      	adds	r7, #176	; 0xb0
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	44020c00 	.word	0x44020c00
 8000fbc:	42020400 	.word	0x42020400

08000fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0ac      	sub	sp, #176	; 0xb0
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	2288      	movs	r2, #136	; 0x88
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f005 fccd 	bl	8006980 <memset>
  if(huart->Instance==USART3)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a26      	ldr	r2, [pc, #152]	; (8001084 <HAL_UART_MspInit+0xc4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d144      	bne.n	800107a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ff0:	f04f 0204 	mov.w	r2, #4
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	4618      	mov	r0, r3
 8001006:	f002 fde3 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001010:	f7ff fdae 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001014:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <HAL_UART_MspInit+0xc8>)
 8001016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800101a:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <HAL_UART_MspInit+0xc8>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001020:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_UART_MspInit+0xc8>)
 8001026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800102a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_UART_MspInit+0xc8>)
 8001034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001038:	4a13      	ldr	r2, [pc, #76]	; (8001088 <HAL_UART_MspInit+0xc8>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_UART_MspInit+0xc8>)
 8001044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA3     ------> USART3_RX
    PA4     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|GPIO_PIN_4;
 8001050:	2318      	movs	r3, #24
 8001052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8001068:	230d      	movs	r3, #13
 800106a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_UART_MspInit+0xcc>)
 8001076:	f001 fa93 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800107a:	bf00      	nop
 800107c:	37b0      	adds	r7, #176	; 0xb0
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40004800 	.word	0x40004800
 8001088:	44020c00 	.word	0x44020c00
 800108c:	42020000 	.word	0x42020000

08001090 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0ac      	sub	sp, #176	; 0xb0
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2288      	movs	r2, #136	; 0x88
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f005 fc65 	bl	8006980 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a27      	ldr	r2, [pc, #156]	; (8001158 <HAL_PCD_MspInit+0xc8>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d146      	bne.n	800114e <HAL_PCD_MspInit+0xbe>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	f04f 0310 	mov.w	r3, #16
 80010c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80010cc:	2330      	movs	r3, #48	; 0x30
 80010ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 fd7a 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 80010e2:	f7ff fd45 	bl	8000b70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_PCD_MspInit+0xcc>)
 80010e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <HAL_PCD_MspInit+0xcc>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_PCD_MspInit+0xcc>)
 80010f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_DN_Pin|USB_FS_DP_Pin;
 8001104:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800111e:	230a      	movs	r3, #10
 8001120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001128:	4619      	mov	r1, r3
 800112a:	480d      	ldr	r0, [pc, #52]	; (8001160 <HAL_PCD_MspInit+0xd0>)
 800112c:	f001 fa38 	bl	80025a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_PCD_MspInit+0xcc>)
 8001132:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001136:	4a09      	ldr	r2, [pc, #36]	; (800115c <HAL_PCD_MspInit+0xcc>)
 8001138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800113c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_PCD_MspInit+0xcc>)
 8001142:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	37b0      	adds	r7, #176	; 0xb0
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40016000 	.word	0x40016000
 800115c:	44020c00 	.word	0x44020c00
 8001160:	42020000 	.word	0x42020000

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <NMI_Handler+0x4>

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler+0x4>

08001176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler+0x4>

08001182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b0:	f000 f9b2 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <FDCAN1_IT0_IRQHandler+0x10>)
 80011be:	f000 ff81 	bl	80020c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000008c 	.word	0x2000008c

080011cc <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <FDCAN1_IT1_IRQHandler+0x10>)
 80011d2:	f000 ff77 	bl	80020c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000008c 	.word	0x2000008c

080011e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	e00a      	b.n	8001208 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011f2:	e000      	b.n	80011f6 <_read+0x16>
 80011f4:	bf00      	nop
 80011f6:	4601      	mov	r1, r0
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	60ba      	str	r2, [r7, #8]
 80011fe:	b2ca      	uxtb	r2, r1
 8001200:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	dbf0      	blt.n	80011f2 <_read+0x12>
  }

  return len;
 8001210:	687b      	ldr	r3, [r7, #4]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	e009      	b.n	8001240 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	60ba      	str	r2, [r7, #8]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fc89 	bl	8000b4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	dbf1      	blt.n	800122c <_write+0x12>
  }
  return len;
 8001248:	687b      	ldr	r3, [r7, #4]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_close>:

int _close(int file)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800127a:	605a      	str	r2, [r3, #4]
  return 0;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_isatty>:

int _isatty(int file)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <_sbrk+0x5c>)
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <_sbrk+0x60>)
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <_sbrk+0x64>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <_sbrk+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d207      	bcs.n	80012fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ec:	f005 fb1e 	bl	800692c <__errno>
 80012f0:	4603      	mov	r3, r0
 80012f2:	220c      	movs	r2, #12
 80012f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fa:	e009      	b.n	8001310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <_sbrk+0x64>)
 800130c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20008000 	.word	0x20008000
 800131c:	00000400 	.word	0x00000400
 8001320:	200005ac 	.word	0x200005ac
 8001324:	200005c8 	.word	0x200005c8

08001328 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <SystemInit+0xc8>)
 8001330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001334:	4a2e      	ldr	r2, [pc, #184]	; (80013f0 <SystemInit+0xc8>)
 8001336:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800133e:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <SystemInit+0xcc>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <SystemInit+0xcc>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <SystemInit+0xcc>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <SystemInit+0xcc>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4927      	ldr	r1, [pc, #156]	; (80013f4 <SystemInit+0xcc>)
 8001356:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <SystemInit+0xd0>)
 8001358:	4013      	ands	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800135c:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <SystemInit+0xcc>)
 800135e:	2200      	movs	r2, #0
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <SystemInit+0xcc>)
 8001364:	2200      	movs	r2, #0
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001368:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <SystemInit+0xcc>)
 800136a:	4a24      	ldr	r2, [pc, #144]	; (80013fc <SystemInit+0xd4>)
 800136c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800136e:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <SystemInit+0xcc>)
 8001370:	2200      	movs	r2, #0
 8001372:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <SystemInit+0xcc>)
 8001376:	4a21      	ldr	r2, [pc, #132]	; (80013fc <SystemInit+0xd4>)
 8001378:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <SystemInit+0xcc>)
 800137c:	2200      	movs	r2, #0
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <SystemInit+0xcc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <SystemInit+0xcc>)
 8001386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <SystemInit+0xcc>)
 800138e:	2200      	movs	r2, #0
 8001390:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <SystemInit+0xc8>)
 8001394:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001398:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <SystemInit+0xd8>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80013a2:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80013aa:	d003      	beq.n	80013b4 <SystemInit+0x8c>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80013b2:	d117      	bne.n	80013e4 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <SystemInit+0xd8>)
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <SystemInit+0xd8>)
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <SystemInit+0xdc>)
 80013c4:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <SystemInit+0xd8>)
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <SystemInit+0xe0>)
 80013ca:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <SystemInit+0xd8>)
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <SystemInit+0xd8>)
 80013d2:	f043 0302 	orr.w	r3, r3, #2
 80013d6:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <SystemInit+0xd8>)
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	4a08      	ldr	r2, [pc, #32]	; (8001400 <SystemInit+0xd8>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	61d3      	str	r3, [r2, #28]
  }
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00
 80013f4:	44020c00 	.word	0x44020c00
 80013f8:	fae2eae3 	.word	0xfae2eae3
 80013fc:	01010280 	.word	0x01010280
 8001400:	40022000 	.word	0x40022000
 8001404:	08192a3b 	.word	0x08192a3b
 8001408:	4c5d6e7f 	.word	0x4c5d6e7f

0800140c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800140c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001444 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001410:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001412:	e003      	b.n	800141c <LoopCopyDataInit>

08001414 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001416:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001418:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800141a:	3104      	adds	r1, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <LoopForever+0xa>)
	ldr	r3, =_edata
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001420:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001422:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001424:	d3f6      	bcc.n	8001414 <CopyDataInit>
	ldr	r2, =_sbss
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001428:	e002      	b.n	8001430 <LoopFillZerobss>

0800142a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800142a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800142c:	f842 3b04 	str.w	r3, [r2], #4

08001430 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <LoopForever+0x16>)
	cmp	r2, r3
 8001432:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001434:	d3f9      	bcc.n	800142a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001436:	f7ff ff77 	bl	8001328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143a:	f005 fa7d 	bl	8006938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800143e:	f7ff f8bb 	bl	80005b8 <main>

08001442 <LoopForever>:

LoopForever:
    b LoopForever
 8001442:	e7fe      	b.n	8001442 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001444:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001448:	08007cd4 	.word	0x08007cd4
	ldr	r0, =_sdata
 800144c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001450:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001454:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001458:	200005c4 	.word	0x200005c4

0800145c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC1_IRQHandler>
	...

08001460 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001464:	2003      	movs	r0, #3
 8001466:	f000 f96b 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800146a:	f002 fa27 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 800146e:	4602      	mov	r2, r0
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_Init+0x40>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	490a      	ldr	r1, [pc, #40]	; (80014a4 <HAL_Init+0x44>)
 800147a:	5ccb      	ldrb	r3, [r1, r3]
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
 8001480:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_Init+0x48>)
 8001482:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001484:	200f      	movs	r0, #15
 8001486:	f000 f811 	bl	80014ac <HAL_InitTick>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e002      	b.n	800149a <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fc96 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	44020c00 	.word	0x44020c00
 80014a4:	08007bdc 	.word	0x08007bdc
 80014a8:	20000000 	.word	0x20000000

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_InitTick+0x60>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e021      	b.n	8001504 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_InitTick+0x64>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_InitTick+0x60>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f965 	bl	80017a6 <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f4:	f000 f92f 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_InitTick+0x68>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000008 	.word	0x20000008
 8001510:	20000000 	.word	0x20000000
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008
 800153c:	200005b0 	.word	0x200005b0

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200005b0 	.word	0x200005b0

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff ffee 	bl	8001540 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffde 	bl	8001540 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	; (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001720:	f7ff ff8e 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff29 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff40 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff90 	bl	8001694 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5f 	bl	8001640 <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff33 	bl	8001604 <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffa4 	bl	80016fc <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e147      	b.n	8001a62 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d106      	bne.n	80017ec <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff faf4 	bl	8000dd4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0210 	bic.w	r2, r2, #16
 80017fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017fc:	f7ff fea0 	bl	8001540 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001802:	e012      	b.n	800182a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001804:	f7ff fe9c 	bl	8001540 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b0a      	cmp	r3, #10
 8001810:	d90b      	bls.n	800182a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001816:	f043 0201 	orr.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2203      	movs	r2, #3
 8001822:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e11b      	b.n	8001a62 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b08      	cmp	r3, #8
 8001836:	d0e5      	beq.n	8001804 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001848:	f7ff fe7a 	bl	8001540 <HAL_GetTick>
 800184c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800184e:	e012      	b.n	8001876 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001850:	f7ff fe76 	bl	8001540 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b0a      	cmp	r3, #10
 800185c:	d90b      	bls.n	8001876 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001862:	f043 0201 	orr.w	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2203      	movs	r2, #3
 800186e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e0f5      	b.n	8001a62 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0e5      	beq.n	8001850 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699a      	ldr	r2, [r3, #24]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0202 	orr.w	r2, r2, #2
 8001892:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a74      	ldr	r2, [pc, #464]	; (8001a6c <HAL_FDCAN_Init+0x2ac>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d103      	bne.n	80018a6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800189e:	4a74      	ldr	r2, [pc, #464]	; (8001a70 <HAL_FDCAN_Init+0x2b0>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7c1b      	ldrb	r3, [r3, #16]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d108      	bne.n	80018c0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	699a      	ldr	r2, [r3, #24]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018bc:	619a      	str	r2, [r3, #24]
 80018be:	e007      	b.n	80018d0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7c5b      	ldrb	r3, [r3, #17]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d108      	bne.n	80018ea <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018e6:	619a      	str	r2, [r3, #24]
 80018e8:	e007      	b.n	80018fa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	699a      	ldr	r2, [r3, #24]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018f8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7c9b      	ldrb	r3, [r3, #18]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d108      	bne.n	8001914 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699a      	ldr	r2, [r3, #24]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001910:	619a      	str	r2, [r3, #24]
 8001912:	e007      	b.n	8001924 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001922:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001948:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0210 	bic.w	r2, r2, #16
 8001958:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d108      	bne.n	8001974 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f042 0204 	orr.w	r2, r2, #4
 8001970:	619a      	str	r2, [r3, #24]
 8001972:	e02c      	b.n	80019ce <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d028      	beq.n	80019ce <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d01c      	beq.n	80019be <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699a      	ldr	r2, [r3, #24]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001992:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0210 	orr.w	r2, r2, #16
 80019a2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d110      	bne.n	80019ce <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699a      	ldr	r2, [r3, #24]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0220 	orr.w	r2, r2, #32
 80019ba:	619a      	str	r2, [r3, #24]
 80019bc:	e007      	b.n	80019ce <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	699a      	ldr	r2, [r3, #24]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0220 	orr.w	r2, r2, #32
 80019cc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	3b01      	subs	r3, #1
 80019dc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019de:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019e6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019f6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019f8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a02:	d115      	bne.n	8001a30 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a12:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a1c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	3b01      	subs	r3, #1
 8001a26:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a2c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a2e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fcd8 	bl	80023fc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	4000a400 	.word	0x4000a400
 8001a70:	4000a500 	.word	0x4000a500

08001a74 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a84:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d002      	beq.n	8001a92 <HAL_FDCAN_ConfigFilter+0x1e>
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d13d      	bne.n	8001b0e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d119      	bne.n	8001ace <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001aa6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001aae:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	e01d      	b.n	8001b0a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	075a      	lsls	r2, r3, #29
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	079a      	lsls	r2, r3, #30
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3304      	adds	r3, #4
 8001b02:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e006      	b.n	8001b1c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b12:	f043 0202 	orr.w	r2, r3, #2
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
  }
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d116      	bne.n	8001b70 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b4a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	011a      	lsls	r2, r3, #4
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	431a      	orrs	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	431a      	orrs	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e006      	b.n	8001b7e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b74:	f043 0204 	orr.w	r2, r3, #4
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
  }
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d108      	bne.n	8001bb4 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	0219      	lsls	r1, r3, #8
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e006      	b.n	8001bc2 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb8:	f043 0204 	orr.w	r2, r3, #4
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
  }
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d109      	bne.n	8001bf6 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bf0:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e006      	b.n	8001c04 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfa:	f043 0204 	orr.w	r2, r3, #4
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
  }
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d110      	bne.n	8001c46 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e006      	b.n	8001c54 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4a:	f043 0204 	orr.w	r2, r3, #4
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
  }
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d12c      	bne.n	8001cd2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e023      	b.n	8001ce0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ca0:	0c1b      	lsrs	r3, r3, #16
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fbfa 	bl	80024a8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e006      	b.n	8001ce0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	f043 0208 	orr.w	r2, r3, #8
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
  }
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b08b      	sub	sp, #44	; 0x2c
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d00:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001d02:	7efb      	ldrb	r3, [r7, #27]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	f040 80e8 	bne.w	8001eda <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b40      	cmp	r3, #64	; 0x40
 8001d0e:	d137      	bne.n	8001d80 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d107      	bne.n	8001d30 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0db      	b.n	8001ee8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d38:	0e1b      	lsrs	r3, r3, #24
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d10a      	bne.n	8001d58 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d4a:	0a5b      	lsrs	r3, r3, #9
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001d54:	2301      	movs	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	4413      	add	r3, r2
 8001d6a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7e:	e036      	b.n	8001dee <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0a3      	b.n	8001ee8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001da8:	0e1b      	lsrs	r3, r3, #24
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d10a      	bne.n	8001dc8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	4413      	add	r3, r2
 8001dda:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001de0:	69fa      	ldr	r2, [r7, #28]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d107      	bne.n	8001e12 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	0c9b      	lsrs	r3, r3, #18
 8001e08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e005      	b.n	8001e1e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	3304      	adds	r3, #4
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	0c1b      	lsrs	r3, r3, #16
 8001e4c:	f003 020f 	and.w	r2, r3, #15
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0e1b      	lsrs	r3, r3, #24
 8001e72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	0fda      	lsrs	r2, r3, #31
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	3304      	adds	r3, #4
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	e00a      	b.n	8001eaa <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	441a      	add	r2, r3
 8001e9a:	6839      	ldr	r1, [r7, #0]
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	440b      	add	r3, r1
 8001ea0:	7812      	ldrb	r2, [r2, #0]
 8001ea2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	623b      	str	r3, [r7, #32]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d3ec      	bcc.n	8001e94 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b40      	cmp	r3, #64	; 0x40
 8001ebe:	d105      	bne.n	8001ecc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69fa      	ldr	r2, [r7, #28]
 8001ec6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001eca:	e004      	b.n	8001ed6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e006      	b.n	8001ee8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ede:	f043 0208 	orr.w	r2, r3, #8
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
  }
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	372c      	adds	r7, #44	; 0x2c
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	08007bf4 	.word	0x08007bf4

08001ef8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f0a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d003      	beq.n	8001f1a <HAL_FDCAN_ActivateNotification+0x22>
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	f040 80c8 	bne.w	80020aa <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d03b      	beq.n	8001fae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d004      	beq.n	8001f4a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d031      	beq.n	8001fae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d027      	beq.n	8001fae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01d      	beq.n	8001fae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d013      	beq.n	8001fae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00c      	beq.n	8001fbe <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d107      	bne.n	8001fbe <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d004      	beq.n	8001fd2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d13b      	bne.n	800204a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d131      	bne.n	800204a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d127      	bne.n	800204a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d11d      	bne.n	800204a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002014:	2b00      	cmp	r3, #0
 8002016:	d004      	beq.n	8002022 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d113      	bne.n	800204a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002028:	2b00      	cmp	r3, #0
 800202a:	d004      	beq.n	8002036 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00c      	beq.n	800205a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0202 	orr.w	r2, r2, #2
 8002058:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002060:	2b00      	cmp	r3, #0
 8002062:	d009      	beq.n	8002078 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	430a      	orrs	r2, r1
 8002074:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d009      	beq.n	8002096 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	430a      	orrs	r2, r1
 8002092:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e006      	b.n	80020b8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	f043 0202 	orr.w	r2, r3, #2
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
  }
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	; 0x30
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e0:	4013      	ands	r3, r2
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020f8:	4013      	ands	r3, r2
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002110:	4013      	ands	r3, r2
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800211a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800211e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	6a3a      	ldr	r2, [r7, #32]
 8002128:	4013      	ands	r3, r2
 800212a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002132:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002136:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	4013      	ands	r3, r2
 8002142:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002152:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	099b      	lsrs	r3, r3, #6
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00c      	beq.n	800217a <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	099b      	lsrs	r3, r3, #6
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2240      	movs	r2, #64	; 0x40
 8002172:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f922 	bl	80023be <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d01a      	beq.n	80021bc <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d014      	beq.n	80021bc <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800219a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80021b4:	6939      	ldr	r1, [r7, #16]
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f8e2 	bl	8002380 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021c8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80021ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f8ac 	bl	800232a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80021d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021de:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80021e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fcca 	bl	8000b7c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80021f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f8a1 	bl	8002340 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	0a5b      	lsrs	r3, r3, #9
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00d      	beq.n	8002226 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	0a5b      	lsrs	r3, r3, #9
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800221e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f898 	bl	8002356 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	09db      	lsrs	r3, r3, #7
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d019      	beq.n	8002266 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	09db      	lsrs	r3, r3, #7
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d013      	beq.n	8002266 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002246:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4013      	ands	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800225e:	68f9      	ldr	r1, [r7, #12]
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f882 	bl	800236a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	0b5b      	lsrs	r3, r3, #13
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00d      	beq.n	800228e <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	0b5b      	lsrs	r3, r3, #13
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002286:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f884 	bl	8002396 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	0bdb      	lsrs	r3, r3, #15
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	0bdb      	lsrs	r3, r3, #15
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d007      	beq.n	80022b6 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022ae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f87a 	bl	80023aa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	0b9b      	lsrs	r3, r3, #14
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	0b9b      	lsrs	r3, r3, #14
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80022f2:	69f9      	ldr	r1, [r7, #28]
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f876 	bl	80023e6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d009      	beq.n	8002314 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6a3a      	ldr	r2, [r7, #32]
 8002306:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f858 	bl	80023d2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002322:	bf00      	nop
 8002324:	3730      	adds	r7, #48	; 0x30
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002406:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002416:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241e:	041a      	lsls	r2, r3, #16
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800243c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	061a      	lsls	r2, r3, #24
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	e005      	b.n	800248a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3304      	adds	r3, #4
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	429a      	cmp	r2, r3
 8002494:	d3f3      	bcc.n	800247e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002496:	bf00      	nop
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	4000ac00 	.word	0x4000ac00

080024a8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10a      	bne.n	80024d4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80024c6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	e00a      	b.n	80024ea <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80024dc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80024e2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80024e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024e8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80024f4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80024fa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002500:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	3304      	adds	r3, #4
 8002528:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	3304      	adds	r3, #4
 8002534:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	e020      	b.n	800257e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	3303      	adds	r3, #3
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3302      	adds	r3, #2
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	440b      	add	r3, r1
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002554:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3301      	adds	r3, #1
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	440b      	add	r3, r1
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002562:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	440a      	add	r2, r1
 800256a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800256c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	3304      	adds	r3, #4
 8002576:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3304      	adds	r3, #4
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	4a06      	ldr	r2, [pc, #24]	; (800259c <FDCAN_CopyMessageToRAM+0xf4>)
 8002584:	5cd3      	ldrb	r3, [r2, r3]
 8002586:	461a      	mov	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	4293      	cmp	r3, r2
 800258c:	d3d6      	bcc.n	800253c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	3724      	adds	r7, #36	; 0x24
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	08007bf4 	.word	0x08007bf4

080025a0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80025ae:	e136      	b.n	800281e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2101      	movs	r1, #1
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	4013      	ands	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8128 	beq.w	8002818 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x38>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b12      	cmp	r3, #18
 80025d6:	d125      	bne.n	8002624 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4013      	ands	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f003 020f 	and.w	r2, r3, #15
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	08da      	lsrs	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3208      	adds	r2, #8
 800261e:	6979      	ldr	r1, [r7, #20]
 8002620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4013      	ands	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0203 	and.w	r2, r3, #3
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d00b      	beq.n	8002678 <HAL_GPIO_Init+0xd8>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d007      	beq.n	8002678 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800266c:	2b11      	cmp	r3, #17
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b12      	cmp	r3, #18
 8002676:	d130      	bne.n	80026da <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4013      	ands	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ae:	2201      	movs	r2, #1
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4013      	ands	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f003 0201 	and.w	r2, r3, #1
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d017      	beq.n	8002712 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	4013      	ands	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d07c      	beq.n	8002818 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800271e:	4a47      	ldr	r2, [pc, #284]	; (800283c <HAL_GPIO_Init+0x29c>)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	3318      	adds	r3, #24
 8002726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	220f      	movs	r2, #15
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4013      	ands	r3, r2
 8002740:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	0a9a      	lsrs	r2, r3, #10
 8002746:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <HAL_GPIO_Init+0x2a0>)
 8002748:	4013      	ands	r3, r2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	f002 0203 	and.w	r2, r2, #3
 8002750:	00d2      	lsls	r2, r2, #3
 8002752:	4093      	lsls	r3, r2
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800275a:	4938      	ldr	r1, [pc, #224]	; (800283c <HAL_GPIO_Init+0x29c>)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	3318      	adds	r3, #24
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002768:	4b34      	ldr	r3, [pc, #208]	; (800283c <HAL_GPIO_Init+0x29c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	43db      	mvns	r3, r3
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4013      	ands	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800278c:	4a2b      	ldr	r2, [pc, #172]	; (800283c <HAL_GPIO_Init+0x29c>)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002792:	4b2a      	ldr	r3, [pc, #168]	; (800283c <HAL_GPIO_Init+0x29c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	43db      	mvns	r3, r3
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4013      	ands	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80027b6:	4a21      	ldr	r2, [pc, #132]	; (800283c <HAL_GPIO_Init+0x29c>)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80027bc:	4b1f      	ldr	r3, [pc, #124]	; (800283c <HAL_GPIO_Init+0x29c>)
 80027be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4013      	ands	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80027e2:	4a16      	ldr	r2, [pc, #88]	; (800283c <HAL_GPIO_Init+0x29c>)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_GPIO_Init+0x29c>)
 80027ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027f0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4013      	ands	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_GPIO_Init+0x29c>)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	3301      	adds	r3, #1
 800281c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	f47f aec1 	bne.w	80025b0 <HAL_GPIO_Init+0x10>
  }
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	44022000 	.word	0x44022000
 8002840:	002f7f7f 	.word	0x002f7f7f

08002844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
 8002850:	4613      	mov	r3, r2
 8002852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002854:	787b      	ldrb	r3, [r7, #1]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800285a:	887a      	ldrh	r2, [r7, #2]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002860:	e002      	b.n	8002868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e081      	b.n	800298a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fb28 	bl	8000ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2224      	movs	r2, #36	; 0x24
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d107      	bne.n	80028ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	e006      	b.n	80028fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d104      	bne.n	800290e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800290c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800291c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002920:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002930:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69d9      	ldr	r1, [r3, #28]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1a      	ldr	r2, [r3, #32]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d138      	bne.n	8002a1a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e032      	b.n	8002a1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2224      	movs	r2, #36	; 0x24
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6819      	ldr	r1, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e000      	b.n	8002a1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
  }
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d139      	bne.n	8002ab2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e033      	b.n	8002ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2224      	movs	r2, #36	; 0x24
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e000      	b.n	8002ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
  }
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_ICACHE_Enable+0x1c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_ICACHE_Enable+0x1c>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40030400 	.word	0x40030400

08002ae0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae2:	b08f      	sub	sp, #60	; 0x3c
 8002ae4:	af0a      	add	r7, sp, #40	; 0x28
 8002ae6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e0cd      	b.n	8002c8e <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe fac2 	bl	8001090 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2203      	movs	r2, #3
 8002b10:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 feab 	bl	8006874 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	e03e      	b.n	8002ba2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	333d      	adds	r3, #61	; 0x3d
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	333c      	adds	r3, #60	; 0x3c
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	440b      	add	r3, r1
 8002b5a:	333f      	adds	r3, #63	; 0x3f
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	440b      	add	r3, r1
 8002b6e:	334c      	adds	r3, #76	; 0x4c
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	3350      	adds	r3, #80	; 0x50
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	3354      	adds	r3, #84	; 0x54
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d3bb      	bcc.n	8002b24 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	e044      	b.n	8002c3c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f203 137d 	addw	r3, r3, #381	; 0x17d
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d3b5      	bcc.n	8002bb2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	687e      	ldr	r6, [r7, #4]
 8002c4e:	466d      	mov	r5, sp
 8002c50:	f106 0410 	add.w	r4, r6, #16
 8002c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c60:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c64:	1d33      	adds	r3, r6, #4
 8002c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c68:	6838      	ldr	r0, [r7, #0]
 8002c6a:	f003 fe3b 	bl	80068e4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d102      	bne.n	8002c8c <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f805 	bl	8002c96 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c96 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	f043 0202 	orr.w	r2, r3, #2
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f000 bc28 	b.w	8003540 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf0:	4b94      	ldr	r3, [pc, #592]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f003 0318 	and.w	r3, r3, #24
 8002cf8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002cfa:	4b92      	ldr	r3, [pc, #584]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d05b      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x46>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	2b18      	cmp	r3, #24
 8002d1a:	d114      	bne.n	8002d46 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d111      	bne.n	8002d46 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f000 bc08 	b.w	8003540 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002d30:	4b84      	ldr	r3, [pc, #528]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	4981      	ldr	r1, [pc, #516]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002d44:	e040      	b.n	8002dc8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d023      	beq.n	8002d96 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d4e:	4b7d      	ldr	r3, [pc, #500]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7c      	ldr	r2, [pc, #496]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7fe fbf1 	bl	8001540 <HAL_GetTick>
 8002d5e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002d62:	f7fe fbed 	bl	8001540 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e3e5      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002d74:	4b73      	ldr	r3, [pc, #460]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002d80:	4b70      	ldr	r3, [pc, #448]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	041b      	lsls	r3, r3, #16
 8002d8e:	496d      	ldr	r1, [pc, #436]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	618b      	str	r3, [r1, #24]
 8002d94:	e018      	b.n	8002dc8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d96:	4b6b      	ldr	r3, [pc, #428]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a6a      	ldr	r2, [pc, #424]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe fbcd 	bl	8001540 <HAL_GetTick>
 8002da6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002daa:	f7fe fbc9 	bl	8001540 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e3c1      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002dbc:	4b61      	ldr	r3, [pc, #388]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f0      	bne.n	8002daa <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80a0 	beq.w	8002f16 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_OscConfig+0x10c>
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b18      	cmp	r3, #24
 8002de0:	d109      	bne.n	8002df6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d106      	bne.n	8002df6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f040 8092 	bne.w	8002f16 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e3a4      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCC_OscConfig+0x132>
 8002e00:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a4f      	ldr	r2, [pc, #316]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	e058      	b.n	8002ec0 <HAL_RCC_OscConfig+0x1e4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d112      	bne.n	8002e3c <HAL_RCC_OscConfig+0x160>
 8002e16:	4b4b      	ldr	r3, [pc, #300]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a4a      	ldr	r2, [pc, #296]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b48      	ldr	r3, [pc, #288]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a47      	ldr	r2, [pc, #284]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	4b45      	ldr	r3, [pc, #276]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a44      	ldr	r2, [pc, #272]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e041      	b.n	8002ec0 <HAL_RCC_OscConfig+0x1e4>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e44:	d112      	bne.n	8002e6c <HAL_RCC_OscConfig+0x190>
 8002e46:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a3e      	ldr	r2, [pc, #248]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b3c      	ldr	r3, [pc, #240]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a3b      	ldr	r2, [pc, #236]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b39      	ldr	r3, [pc, #228]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a38      	ldr	r2, [pc, #224]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e029      	b.n	8002ec0 <HAL_RCC_OscConfig+0x1e4>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002e74:	d112      	bne.n	8002e9c <HAL_RCC_OscConfig+0x1c0>
 8002e76:	4b33      	ldr	r3, [pc, #204]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a32      	ldr	r2, [pc, #200]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2f      	ldr	r2, [pc, #188]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a2c      	ldr	r2, [pc, #176]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e011      	b.n	8002ec0 <HAL_RCC_OscConfig+0x1e4>
 8002e9c:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a28      	ldr	r2, [pc, #160]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002eba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fb3a 	bl	8001540 <HAL_GetTick>
 8002ecc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe fb36 	bl	8001540 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e32e      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee2:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x1f4>
 8002eee:	e012      	b.n	8002f16 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fb26 	bl	8001540 <HAL_GetTick>
 8002ef4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002ef8:	f7fe fb22 	bl	8001540 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	; 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e31a      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <HAL_RCC_OscConfig+0x268>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 809a 	beq.w	8003058 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_RCC_OscConfig+0x25a>
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2b18      	cmp	r3, #24
 8002f2e:	d149      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d146      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d104      	bne.n	8002f48 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e2fe      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
 8002f42:	bf00      	nop
 8002f44:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002f4e:	4b9a      	ldr	r3, [pc, #616]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0218 	and.w	r2, r3, #24
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d014      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002f5e:	4b96      	ldr	r3, [pc, #600]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 0218 	bic.w	r2, r3, #24
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	4993      	ldr	r1, [pc, #588]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002f70:	f000 fdd0 	bl	8003b14 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f74:	4b91      	ldr	r3, [pc, #580]	; (80031bc <HAL_RCC_OscConfig+0x4e0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe fa97 	bl	80014ac <HAL_InitTick>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e2db      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fada 	bl	8001540 <HAL_GetTick>
 8002f8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002f90:	f7fe fad6 	bl	8001540 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e2ce      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa2:	4b85      	ldr	r3, [pc, #532]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002fae:	4b82      	ldr	r3, [pc, #520]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	041b      	lsls	r3, r3, #16
 8002fbc:	497e      	ldr	r1, [pc, #504]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002fc2:	e049      	b.n	8003058 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d02c      	beq.n	8003026 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002fcc:	4b7a      	ldr	r3, [pc, #488]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 0218 	bic.w	r2, r3, #24
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	4977      	ldr	r1, [pc, #476]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002fde:	4b76      	ldr	r3, [pc, #472]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a75      	ldr	r2, [pc, #468]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fea:	f7fe faa9 	bl	8001540 <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002ff2:	f7fe faa5 	bl	8001540 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e29d      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003004:	4b6c      	ldr	r3, [pc, #432]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003010:	4b69      	ldr	r3, [pc, #420]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	4966      	ldr	r1, [pc, #408]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8003020:	4313      	orrs	r3, r2
 8003022:	610b      	str	r3, [r1, #16]
 8003024:	e018      	b.n	8003058 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003026:	4b64      	ldr	r3, [pc, #400]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a63      	ldr	r2, [pc, #396]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fe fa85 	bl	8001540 <HAL_GetTick>
 8003036:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800303a:	f7fe fa81 	bl	8001540 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e279      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800304c:	4b5a      	ldr	r3, [pc, #360]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b00      	cmp	r3, #0
 8003062:	d03c      	beq.n	80030de <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01c      	beq.n	80030a6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306c:	4b52      	ldr	r3, [pc, #328]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 800306e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003072:	4a51      	ldr	r2, [pc, #324]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8003074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003078:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe fa60 	bl	8001540 <HAL_GetTick>
 8003080:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003084:	f7fe fa5c 	bl	8001540 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e254      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003096:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8003098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800309c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ef      	beq.n	8003084 <HAL_RCC_OscConfig+0x3a8>
 80030a4:	e01b      	b.n	80030de <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a6:	4b44      	ldr	r3, [pc, #272]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 80030a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030ac:	4a42      	ldr	r2, [pc, #264]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 80030ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b6:	f7fe fa43 	bl	8001540 <HAL_GetTick>
 80030ba:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80030be:	f7fe fa3f 	bl	8001540 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e237      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80030d0:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 80030d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ef      	bne.n	80030be <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80d2 	beq.w	8003290 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80030ec:	4b34      	ldr	r3, [pc, #208]	; (80031c0 <HAL_RCC_OscConfig+0x4e4>)
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d118      	bne.n	800312a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80030f8:	4b31      	ldr	r3, [pc, #196]	; (80031c0 <HAL_RCC_OscConfig+0x4e4>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	4a30      	ldr	r2, [pc, #192]	; (80031c0 <HAL_RCC_OscConfig+0x4e4>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003104:	f7fe fa1c 	bl	8001540 <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7fe fa18 	bl	8001540 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e210      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800311e:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <HAL_RCC_OscConfig+0x4e4>)
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d108      	bne.n	8003144 <HAL_RCC_OscConfig+0x468>
 8003132:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8003134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003138:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003142:	e074      	b.n	800322e <HAL_RCC_OscConfig+0x552>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d118      	bne.n	800317e <HAL_RCC_OscConfig+0x4a2>
 800314c:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 800314e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003152:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800315c:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 800315e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003162:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8003164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003168:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 800316e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003172:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8003174:	f023 0304 	bic.w	r3, r3, #4
 8003178:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800317c:	e057      	b.n	800322e <HAL_RCC_OscConfig+0x552>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b05      	cmp	r3, #5
 8003184:	d11e      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4e8>
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8003188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800318c:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 800318e:	f043 0304 	orr.w	r3, r3, #4
 8003192:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 8003198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800319c:	4a06      	ldr	r2, [pc, #24]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 800319e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031a6:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 80031a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ac:	4a02      	ldr	r2, [pc, #8]	; (80031b8 <HAL_RCC_OscConfig+0x4dc>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031b6:	e03a      	b.n	800322e <HAL_RCC_OscConfig+0x552>
 80031b8:	44020c00 	.word	0x44020c00
 80031bc:	20000004 	.word	0x20000004
 80031c0:	44020800 	.word	0x44020800
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b85      	cmp	r3, #133	; 0x85
 80031ca:	d118      	bne.n	80031fe <HAL_RCC_OscConfig+0x522>
 80031cc:	4ba2      	ldr	r3, [pc, #648]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80031ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031d2:	4aa1      	ldr	r2, [pc, #644]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031dc:	4b9e      	ldr	r3, [pc, #632]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80031de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031e2:	4a9d      	ldr	r2, [pc, #628]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80031e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031ec:	4b9a      	ldr	r3, [pc, #616]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80031ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031f2:	4a99      	ldr	r2, [pc, #612]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031fc:	e017      	b.n	800322e <HAL_RCC_OscConfig+0x552>
 80031fe:	4b96      	ldr	r3, [pc, #600]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003204:	4a94      	ldr	r2, [pc, #592]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003206:	f023 0301 	bic.w	r3, r3, #1
 800320a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800320e:	4b92      	ldr	r3, [pc, #584]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003214:	4a90      	ldr	r2, [pc, #576]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003216:	f023 0304 	bic.w	r3, r3, #4
 800321a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800321e:	4b8e      	ldr	r3, [pc, #568]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003224:	4a8c      	ldr	r2, [pc, #560]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800322a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d016      	beq.n	8003264 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003236:	f7fe f983 	bl	8001540 <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fe f97f 	bl	8001540 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	; 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e175      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003254:	4b80      	ldr	r3, [pc, #512]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0ed      	beq.n	800323e <HAL_RCC_OscConfig+0x562>
 8003262:	e015      	b.n	8003290 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003264:	f7fe f96c 	bl	8001540 <HAL_GetTick>
 8003268:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800326a:	e00a      	b.n	8003282 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326c:	f7fe f968 	bl	8001540 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	; 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e15e      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003282:	4b75      	ldr	r3, [pc, #468]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1ed      	bne.n	800326c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d036      	beq.n	800330a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d019      	beq.n	80032d8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032a4:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6b      	ldr	r2, [pc, #428]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80032aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fe f946 	bl	8001540 <HAL_GetTick>
 80032b4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80032b8:	f7fe f942 	bl	8001540 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e13a      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80032ca:	4b63      	ldr	r3, [pc, #396]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x5dc>
 80032d6:	e018      	b.n	800330a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032d8:	4b5f      	ldr	r3, [pc, #380]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a5e      	ldr	r2, [pc, #376]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80032de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe f92c 	bl	8001540 <HAL_GetTick>
 80032e8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80032ec:	f7fe f928 	bl	8001540 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e120      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80032fe:	4b56      	ldr	r3, [pc, #344]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8115 	beq.w	800353e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b18      	cmp	r3, #24
 8003318:	f000 80af 	beq.w	800347a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	2b02      	cmp	r3, #2
 8003322:	f040 8086 	bne.w	8003432 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003326:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a4b      	ldr	r2, [pc, #300]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 800332c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fe f905 	bl	8001540 <HAL_GetTick>
 8003336:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800333a:	f7fe f901 	bl	8001540 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e0f9      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800334c:	4b42      	ldr	r3, [pc, #264]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f0      	bne.n	800333a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003358:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003360:	f023 0303 	bic.w	r3, r3, #3
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800336c:	0212      	lsls	r2, r2, #8
 800336e:	430a      	orrs	r2, r1
 8003370:	4939      	ldr	r1, [pc, #228]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003372:	4313      	orrs	r3, r2
 8003374:	628b      	str	r3, [r1, #40]	; 0x28
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337a:	3b01      	subs	r3, #1
 800337c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	3b01      	subs	r3, #1
 8003386:	025b      	lsls	r3, r3, #9
 8003388:	b29b      	uxth	r3, r3
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	3b01      	subs	r3, #1
 8003392:	041b      	lsls	r3, r3, #16
 8003394:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	3b01      	subs	r3, #1
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033a6:	492c      	ldr	r1, [pc, #176]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80033ac:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	4a29      	ldr	r2, [pc, #164]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80033b2:	f023 0310 	bic.w	r3, r3, #16
 80033b6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033bc:	4a26      	ldr	r2, [pc, #152]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80033c2:	4b25      	ldr	r3, [pc, #148]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	4a24      	ldr	r2, [pc, #144]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80033c8:	f043 0310 	orr.w	r3, r3, #16
 80033cc:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	f023 020c 	bic.w	r2, r3, #12
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	491f      	ldr	r1, [pc, #124]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	f023 0220 	bic.w	r2, r3, #32
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ec:	491a      	ldr	r1, [pc, #104]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033f2:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fe f899 	bl	8001540 <HAL_GetTick>
 800340e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003412:	f7fe f895 	bl	8001540 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e08d      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x736>
 8003430:	e085      	b.n	800353e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a08      	ldr	r2, [pc, #32]	; (8003458 <HAL_RCC_OscConfig+0x77c>)
 8003438:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800343c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fe f87f 	bl	8001540 <HAL_GetTick>
 8003442:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003446:	f7fe f87b 	bl	8001540 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d903      	bls.n	800345c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e073      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
 8003458:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800345c:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <HAL_RCC_OscConfig+0x86c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ee      	bne.n	8003446 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003468:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x86c>)
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	4a36      	ldr	r2, [pc, #216]	; (8003548 <HAL_RCC_OscConfig+0x86c>)
 800346e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003472:	f023 0303 	bic.w	r3, r3, #3
 8003476:	6293      	str	r3, [r2, #40]	; 0x28
 8003478:	e061      	b.n	800353e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800347a:	4b33      	ldr	r3, [pc, #204]	; (8003548 <HAL_RCC_OscConfig+0x86c>)
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003480:	4b31      	ldr	r3, [pc, #196]	; (8003548 <HAL_RCC_OscConfig+0x86c>)
 8003482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003484:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	2b01      	cmp	r3, #1
 800348c:	d031      	beq.n	80034f2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f003 0203 	and.w	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003498:	429a      	cmp	r2, r3
 800349a:	d12a      	bne.n	80034f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d122      	bne.n	80034f2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d11a      	bne.n	80034f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	0a5b      	lsrs	r3, r3, #9
 80034c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d111      	bne.n	80034f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	0c1b      	lsrs	r3, r3, #16
 80034d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d108      	bne.n	80034f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	0e1b      	lsrs	r3, r3, #24
 80034e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d001      	beq.n	80034f6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e024      	b.n	8003540 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <HAL_RCC_OscConfig+0x86c>)
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	08db      	lsrs	r3, r3, #3
 80034fc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003504:	429a      	cmp	r2, r3
 8003506:	d01a      	beq.n	800353e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <HAL_RCC_OscConfig+0x86c>)
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <HAL_RCC_OscConfig+0x86c>)
 800350e:	f023 0310 	bic.w	r3, r3, #16
 8003512:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe f814 	bl	8001540 <HAL_GetTick>
 8003518:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800351a:	bf00      	nop
 800351c:	f7fe f810 	bl	8001540 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	4293      	cmp	r3, r2
 8003526:	d0f9      	beq.n	800351c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352c:	4a06      	ldr	r2, [pc, #24]	; (8003548 <HAL_RCC_OscConfig+0x86c>)
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_RCC_OscConfig+0x86c>)
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	4a04      	ldr	r2, [pc, #16]	; (8003548 <HAL_RCC_OscConfig+0x86c>)
 8003538:	f043 0310 	orr.w	r3, r3, #16
 800353c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3720      	adds	r7, #32
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	44020c00 	.word	0x44020c00

0800354c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e19e      	b.n	800389e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003560:	4b83      	ldr	r3, [pc, #524]	; (8003770 <HAL_RCC_ClockConfig+0x224>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d910      	bls.n	8003590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b80      	ldr	r3, [pc, #512]	; (8003770 <HAL_RCC_ClockConfig+0x224>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 020f 	bic.w	r2, r3, #15
 8003576:	497e      	ldr	r1, [pc, #504]	; (8003770 <HAL_RCC_ClockConfig+0x224>)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b7c      	ldr	r3, [pc, #496]	; (8003770 <HAL_RCC_ClockConfig+0x224>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e186      	b.n	800389e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d012      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	4b74      	ldr	r3, [pc, #464]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d909      	bls.n	80035c2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80035ae:	4b71      	ldr	r3, [pc, #452]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	496d      	ldr	r1, [pc, #436]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d012      	beq.n	80035f4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	4b68      	ldr	r3, [pc, #416]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035dc:	429a      	cmp	r2, r3
 80035de:	d909      	bls.n	80035f4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80035e0:	4b64      	ldr	r3, [pc, #400]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	4961      	ldr	r1, [pc, #388]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d010      	beq.n	8003622 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	4b5b      	ldr	r3, [pc, #364]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800360c:	429a      	cmp	r2, r3
 800360e:	d908      	bls.n	8003622 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003610:	4b58      	ldr	r3, [pc, #352]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4955      	ldr	r1, [pc, #340]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 800361e:	4313      	orrs	r3, r2
 8003620:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d010      	beq.n	8003650 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	4b50      	ldr	r3, [pc, #320]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	429a      	cmp	r2, r3
 800363c:	d908      	bls.n	8003650 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800363e:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f023 020f 	bic.w	r2, r3, #15
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	494a      	ldr	r1, [pc, #296]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 800364c:	4313      	orrs	r3, r2
 800364e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8093 	beq.w	8003784 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b03      	cmp	r3, #3
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003666:	4b43      	ldr	r3, [pc, #268]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d121      	bne.n	80036b6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e113      	b.n	800389e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800367e:	4b3d      	ldr	r3, [pc, #244]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d115      	bne.n	80036b6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e107      	b.n	800389e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003696:	4b37      	ldr	r3, [pc, #220]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0fb      	b.n	800389e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a6:	4b33      	ldr	r3, [pc, #204]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e0f3      	b.n	800389e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80036b6:	4b2f      	ldr	r3, [pc, #188]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f023 0203 	bic.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	492c      	ldr	r1, [pc, #176]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c8:	f7fd ff3a 	bl	8001540 <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d112      	bne.n	80036fc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80036d8:	f7fd ff32 	bl	8001540 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e0d7      	b.n	800389e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ee:	4b21      	ldr	r3, [pc, #132]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f003 0318 	and.w	r3, r3, #24
 80036f6:	2b18      	cmp	r3, #24
 80036f8:	d1ee      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x18c>
 80036fa:	e043      	b.n	8003784 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d112      	bne.n	800372a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003704:	e00a      	b.n	800371c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003706:	f7fd ff1b 	bl	8001540 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	; 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e0c0      	b.n	800389e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800371c:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f003 0318 	and.w	r3, r3, #24
 8003724:	2b10      	cmp	r3, #16
 8003726:	d1ee      	bne.n	8003706 <HAL_RCC_ClockConfig+0x1ba>
 8003728:	e02c      	b.n	8003784 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d122      	bne.n	8003778 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003732:	e00a      	b.n	800374a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003734:	f7fd ff04 	bl	8001540 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003742:	4293      	cmp	r3, r2
 8003744:	d901      	bls.n	800374a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e0a9      	b.n	800389e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <HAL_RCC_ClockConfig+0x228>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 0318 	and.w	r3, r3, #24
 8003752:	2b08      	cmp	r3, #8
 8003754:	d1ee      	bne.n	8003734 <HAL_RCC_ClockConfig+0x1e8>
 8003756:	e015      	b.n	8003784 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003758:	f7fd fef2 	bl	8001540 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d906      	bls.n	8003778 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e097      	b.n	800389e <HAL_RCC_ClockConfig+0x352>
 800376e:	bf00      	nop
 8003770:	40022000 	.word	0x40022000
 8003774:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003778:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f003 0318 	and.w	r3, r3, #24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e9      	bne.n	8003758 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d010      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	4b44      	ldr	r3, [pc, #272]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	429a      	cmp	r2, r3
 800379e:	d208      	bcs.n	80037b2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80037a0:	4b41      	ldr	r3, [pc, #260]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f023 020f 	bic.w	r2, r3, #15
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	493e      	ldr	r1, [pc, #248]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b2:	4b3e      	ldr	r3, [pc, #248]	; (80038ac <HAL_RCC_ClockConfig+0x360>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d210      	bcs.n	80037e2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c0:	4b3a      	ldr	r3, [pc, #232]	; (80038ac <HAL_RCC_ClockConfig+0x360>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 020f 	bic.w	r2, r3, #15
 80037c8:	4938      	ldr	r1, [pc, #224]	; (80038ac <HAL_RCC_ClockConfig+0x360>)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d0:	4b36      	ldr	r3, [pc, #216]	; (80038ac <HAL_RCC_ClockConfig+0x360>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d001      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e05d      	b.n	800389e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d010      	beq.n	8003810 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d208      	bcs.n	8003810 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80037fe:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	4927      	ldr	r1, [pc, #156]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 800380c:	4313      	orrs	r3, r2
 800380e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d012      	beq.n	8003842 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800382a:	429a      	cmp	r2, r3
 800382c:	d209      	bcs.n	8003842 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800382e:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	491a      	ldr	r1, [pc, #104]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 800383e:	4313      	orrs	r3, r2
 8003840:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	d012      	beq.n	8003874 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800385c:	429a      	cmp	r2, r3
 800385e:	d209      	bcs.n	8003874 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	490e      	ldr	r1, [pc, #56]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 8003870:	4313      	orrs	r3, r2
 8003872:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003874:	f000 f822 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_ClockConfig+0x35c>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	490b      	ldr	r1, [pc, #44]	; (80038b0 <HAL_RCC_ClockConfig+0x364>)
 8003884:	5ccb      	ldrb	r3, [r1, r3]
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <HAL_RCC_ClockConfig+0x368>)
 800388c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_RCC_ClockConfig+0x36c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd fe0a 	bl	80014ac <HAL_InitTick>
 8003898:	4603      	mov	r3, r0
 800389a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800389c:	7afb      	ldrb	r3, [r7, #11]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	44020c00 	.word	0x44020c00
 80038ac:	40022000 	.word	0x40022000
 80038b0:	08007bdc 	.word	0x08007bdc
 80038b4:	20000000 	.word	0x20000000
 80038b8:	20000004 	.word	0x20000004

080038bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	; 0x24
 80038c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80038c2:	4b8c      	ldr	r3, [pc, #560]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f003 0318 	and.w	r3, r3, #24
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d102      	bne.n	80038d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80038ce:	4b8a      	ldr	r3, [pc, #552]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x23c>)
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	e107      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038d4:	4b87      	ldr	r3, [pc, #540]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f003 0318 	and.w	r3, r3, #24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d112      	bne.n	8003906 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80038e0:	4b84      	ldr	r3, [pc, #528]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d009      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80038ec:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	08db      	lsrs	r3, r3, #3
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	4a81      	ldr	r2, [pc, #516]	; (8003afc <HAL_RCC_GetSysClockFreq+0x240>)
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	e0f1      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003900:	4b7e      	ldr	r3, [pc, #504]	; (8003afc <HAL_RCC_GetSysClockFreq+0x240>)
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	e0ee      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003906:	4b7b      	ldr	r3, [pc, #492]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 0318 	and.w	r3, r3, #24
 800390e:	2b10      	cmp	r3, #16
 8003910:	d102      	bne.n	8003918 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003912:	4b7b      	ldr	r3, [pc, #492]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x244>)
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	e0e5      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003918:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f003 0318 	and.w	r3, r3, #24
 8003920:	2b18      	cmp	r3, #24
 8003922:	f040 80dd 	bne.w	8003ae0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003926:	4b73      	ldr	r3, [pc, #460]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003930:	4b70      	ldr	r3, [pc, #448]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800393a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800393c:	4b6d      	ldr	r3, [pc, #436]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003948:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800394c:	08db      	lsrs	r3, r3, #3
 800394e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	fb02 f303 	mul.w	r3, r2, r3
 8003958:	ee07 3a90 	vmov	s15, r3
 800395c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003960:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80b7 	beq.w	8003ada <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d003      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0xbe>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d056      	beq.n	8003a26 <HAL_RCC_GetSysClockFreq+0x16a>
 8003978:	e077      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800397a:	4b5e      	ldr	r3, [pc, #376]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d02d      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003986:	4b5b      	ldr	r3, [pc, #364]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	08db      	lsrs	r3, r3, #3
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	4a5a      	ldr	r2, [pc, #360]	; (8003afc <HAL_RCC_GetSysClockFreq+0x240>)
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	ee07 3a90 	vmov	s15, r3
 80039a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b0:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 80039b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b8:	ee07 3a90 	vmov	s15, r3
 80039bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80039c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80039c4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003b04 <HAL_RCC_GetSysClockFreq+0x248>
 80039c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80039d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039dc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80039e0:	e065      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	ee07 3a90 	vmov	s15, r3
 80039e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ec:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003b08 <HAL_RCC_GetSysClockFreq+0x24c>
 80039f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f4:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a04:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a08:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003b04 <HAL_RCC_GetSysClockFreq+0x248>
 8003a0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a20:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003a24:	e043      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a30:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003b0c <HAL_RCC_GetSysClockFreq+0x250>
 8003a34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a38:	4b2e      	ldr	r3, [pc, #184]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a40:	ee07 3a90 	vmov	s15, r3
 8003a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a48:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a4c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003b04 <HAL_RCC_GetSysClockFreq+0x248>
 8003a50:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a64:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003a68:	e021      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a74:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b10 <HAL_RCC_GetSysClockFreq+0x254>
 8003a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a90:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003b04 <HAL_RCC_GetSysClockFreq+0x248>
 8003a94:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a98:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003aac:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003aae:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	0a5b      	lsrs	r3, r3, #9
 8003ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab8:	3301      	adds	r3, #1
 8003aba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ac6:	edd7 6a06 	vldr	s13, [r7, #24]
 8003aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad2:	ee17 3a90 	vmov	r3, s15
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	e004      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	e001      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCC_GetSysClockFreq+0x240>)
 8003ae2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3724      	adds	r7, #36	; 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	44020c00 	.word	0x44020c00
 8003af8:	003d0900 	.word	0x003d0900
 8003afc:	03d09000 	.word	0x03d09000
 8003b00:	016e3600 	.word	0x016e3600
 8003b04:	46000000 	.word	0x46000000
 8003b08:	4c742400 	.word	0x4c742400
 8003b0c:	4bb71b00 	.word	0x4bb71b00
 8003b10:	4a742400 	.word	0x4a742400

08003b14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003b18:	f7ff fed0 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003b20:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003b22:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003b26:	4907      	ldr	r1, [pc, #28]	; (8003b44 <HAL_RCC_GetHCLKFreq+0x30>)
 8003b28:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003b2a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	4a05      	ldr	r2, [pc, #20]	; (8003b48 <HAL_RCC_GetHCLKFreq+0x34>)
 8003b34:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003b36:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <HAL_RCC_GetHCLKFreq+0x34>)
 8003b38:	681b      	ldr	r3, [r3, #0]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	44020c00 	.word	0x44020c00
 8003b44:	08007bdc 	.word	0x08007bdc
 8003b48:	20000000 	.word	0x20000000

08003b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003b50:	f7ff ffe0 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	091b      	lsrs	r3, r3, #4
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4904      	ldr	r1, [pc, #16]	; (8003b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	44020c00 	.word	0x44020c00
 8003b74:	08007bec 	.word	0x08007bec

08003b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003b7c:	f7ff ffca 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4904      	ldr	r1, [pc, #16]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	44020c00 	.word	0x44020c00
 8003ba0:	08007bec 	.word	0x08007bec

08003ba4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003ba8:	f7ff ffb4 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	0b1b      	lsrs	r3, r3, #12
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4904      	ldr	r1, [pc, #16]	; (8003bcc <HAL_RCC_GetPCLK3Freq+0x28>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	44020c00 	.word	0x44020c00
 8003bcc:	08007bec 	.word	0x08007bec

08003bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd4:	b0aa      	sub	sp, #168	; 0xa8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003be2:	2300      	movs	r3, #0
 8003be4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003be8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8003bf4:	2500      	movs	r5, #0
 8003bf6:	ea54 0305 	orrs.w	r3, r4, r5
 8003bfa:	d00b      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003bfc:	4bb8      	ldr	r3, [pc, #736]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c02:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8003c06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	4ab4      	ldr	r2, [pc, #720]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f002 0801 	and.w	r8, r2, #1
 8003c20:	f04f 0900 	mov.w	r9, #0
 8003c24:	ea58 0309 	orrs.w	r3, r8, r9
 8003c28:	d038      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003c2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	d819      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c71 	.word	0x08003c71
 8003c40:	08003c55 	.word	0x08003c55
 8003c44:	08003c69 	.word	0x08003c69
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	08003c71 	.word	0x08003c71
 8003c50:	08003c71 	.word	0x08003c71
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c58:	3308      	adds	r3, #8
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 ffea 	bl	8005c34 <RCCEx_PLL2_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003c66:	e004      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003c6e:	e000      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8003c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c72:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10c      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003c7a:	4b99      	ldr	r3, [pc, #612]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c80:	f023 0107 	bic.w	r1, r3, #7
 8003c84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8a:	4a95      	ldr	r2, [pc, #596]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003c92:	e003      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c94:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003c98:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f002 0a02 	and.w	sl, r2, #2
 8003ca8:	f04f 0b00 	mov.w	fp, #0
 8003cac:	ea5a 030b 	orrs.w	r3, sl, fp
 8003cb0:	d03c      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003cb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	2b28      	cmp	r3, #40	; 0x28
 8003cba:	d01b      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003cbc:	2b28      	cmp	r3, #40	; 0x28
 8003cbe:	d815      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d019      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d811      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003cc8:	2b18      	cmp	r3, #24
 8003cca:	d017      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003ccc:	2b18      	cmp	r3, #24
 8003cce:	d80d      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d109      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cdc:	3308      	adds	r3, #8
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 ffa8 	bl	8005c34 <RCCEx_PLL2_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003cea:	e00a      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003cf2:	e006      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003cf4:	bf00      	nop
 8003cf6:	e004      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003cf8:	bf00      	nop
 8003cfa:	e002      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003cfc:	bf00      	nop
 8003cfe:	e000      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d02:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003d0a:	4b75      	ldr	r3, [pc, #468]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d10:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003d14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	4a71      	ldr	r2, [pc, #452]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003d22:	e003      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003d28:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f002 0304 	and.w	r3, r2, #4
 8003d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d42:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003d46:	460b      	mov	r3, r1
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	d040      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003d4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d56:	d01e      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003d58:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d5c:	d817      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d62:	d01a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d68:	d811      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003d6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d6c:	d017      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003d6e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d70:	d80d      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d015      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	d109      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d7e:	3308      	adds	r3, #8
 8003d80:	4618      	mov	r0, r3
 8003d82:	f001 ff57 	bl	8005c34 <RCCEx_PLL2_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003d94:	e006      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003d96:	bf00      	nop
 8003d98:	e004      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003d9a:	bf00      	nop
 8003d9c:	e002      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10c      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003dac:	4b4c      	ldr	r3, [pc, #304]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003db2:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003db6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbc:	4a48      	ldr	r2, [pc, #288]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003dc4:	e003      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003dca:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003dda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dde:	2300      	movs	r3, #0
 8003de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003de4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003de8:	460b      	mov	r3, r1
 8003dea:	4313      	orrs	r3, r2
 8003dec:	d043      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003dee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003df8:	d021      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003dfa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003dfe:	d81a      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e04:	d01d      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003e06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e0a:	d814      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003e0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e10:	d019      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8003e12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e16:	d80e      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d016      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e20:	d109      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e26:	3308      	adds	r3, #8
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 ff03 	bl	8005c34 <RCCEx_PLL2_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003e34:	e00a      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003e3c:	e006      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003e3e:	bf00      	nop
 8003e40:	e004      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e4c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003e54:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e5a:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003e5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e66:	430b      	orrs	r3, r1
 8003e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e6c:	e003      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003e72:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003e82:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e84:	2300      	movs	r3, #0
 8003e86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	d03e      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003e92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e9c:	d01b      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003e9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ea2:	d814      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ea8:	d017      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eae:	d80e      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d017      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb8:	d109      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003eba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 feb7 	bl	8005c34 <RCCEx_PLL2_Config>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003ecc:	e00b      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003ed4:	e007      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8003ed6:	bf00      	nop
 8003ed8:	e005      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8003eda:	bf00      	nop
 8003edc:	e003      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003ede:	bf00      	nop
 8003ee0:	44020c00 	.word	0x44020c00
        break;
 8003ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003eee:	4ba5      	ldr	r3, [pc, #660]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003ef0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ef4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003ef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	4aa1      	ldr	r2, [pc, #644]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003f06:	e003      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003f0c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003f1c:	673b      	str	r3, [r7, #112]	; 0x70
 8003f1e:	2300      	movs	r3, #0
 8003f20:	677b      	str	r3, [r7, #116]	; 0x74
 8003f22:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003f26:	460b      	mov	r3, r1
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	d03b      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003f2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f36:	d01b      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003f38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f3c:	d814      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003f3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f42:	d017      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003f44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f48:	d80e      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d014      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003f4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f52:	d109      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f58:	3308      	adds	r3, #8
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f001 fe6a 	bl	8005c34 <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003f66:	e008      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003f6e:	e004      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003f70:	bf00      	nop
 8003f72:	e002      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003f74:	bf00      	nop
 8003f76:	e000      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003f82:	4b80      	ldr	r3, [pc, #512]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003f84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f88:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003f8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f92:	4a7c      	ldr	r2, [pc, #496]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003f94:	430b      	orrs	r3, r1
 8003f96:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003f9a:	e003      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003fa0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003fa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003fb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fb6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	d033      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003fc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fca:	d015      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003fcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fd0:	d80e      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d012      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003fd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fda:	d109      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 fe26 	bl	8005c34 <RCCEx_PLL2_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003fee:	e006      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003ff6:	e002      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003ff8:	bf00      	nop
 8003ffa:	e000      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffe:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10c      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004006:	4b5f      	ldr	r3, [pc, #380]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004008:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800400c:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8004010:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004016:	4a5b      	ldr	r2, [pc, #364]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004018:	430b      	orrs	r3, r1
 800401a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800401e:	e003      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004024:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004028:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	2100      	movs	r1, #0
 8004032:	6639      	str	r1, [r7, #96]	; 0x60
 8004034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004038:	667b      	str	r3, [r7, #100]	; 0x64
 800403a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800403e:	460b      	mov	r3, r1
 8004040:	4313      	orrs	r3, r2
 8004042:	d033      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004044:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800404e:	d015      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8004050:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004054:	d80e      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d012      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800405a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800405e:	d109      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* I3C2 clock source config set later after clock selection check */
        break;

      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004060:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004064:	3308      	adds	r3, #8
 8004066:	4618      	mov	r0, r3
 8004068:	f001 fde4 	bl	8005c34 <RCCEx_PLL2_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004072:	e006      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800407a:	e002      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8004080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004082:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10c      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800408a:	4b3e      	ldr	r3, [pc, #248]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800408c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004090:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004094:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409a:	4a3a      	ldr	r2, [pc, #232]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800409c:	430b      	orrs	r3, r1
 800409e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80040a2:	e003      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80040a8:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	2100      	movs	r1, #0
 80040b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80040b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80040c2:	460b      	mov	r3, r1
 80040c4:	4313      	orrs	r3, r2
 80040c6:	d00e      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80040c8:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	4a2d      	ldr	r2, [pc, #180]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80040ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040d2:	61d3      	str	r3, [r2, #28]
 80040d4:	4b2b      	ldr	r3, [pc, #172]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80040d6:	69d9      	ldr	r1, [r3, #28]
 80040d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80040dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040e0:	4a28      	ldr	r2, [pc, #160]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80040e2:	430b      	orrs	r3, r1
 80040e4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80040f2:	653b      	str	r3, [r7, #80]	; 0x50
 80040f4:	2300      	movs	r3, #0
 80040f6:	657b      	str	r3, [r7, #84]	; 0x54
 80040f8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80040fc:	460b      	mov	r3, r1
 80040fe:	4313      	orrs	r3, r2
 8004100:	d046      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004102:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800410c:	d021      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800410e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004112:	d81a      	bhi.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004118:	d01d      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800411a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411e:	d814      	bhi.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004124:	d019      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800412a:	d80e      	bhi.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d016      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8004130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004134:	d109      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004136:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800413a:	3308      	adds	r3, #8
 800413c:	4618      	mov	r0, r3
 800413e:	f001 fd79 	bl	8005c34 <RCCEx_PLL2_Config>
 8004142:	4603      	mov	r3, r0
 8004144:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004148:	e00a      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8004150:	e006      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004152:	bf00      	nop
 8004154:	e004      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004156:	bf00      	nop
 8004158:	e002      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800415a:	bf00      	nop
 800415c:	e000      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800415e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004160:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10f      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800416a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800416e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004172:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	4a02      	ldr	r2, [pc, #8]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800417a:	430b      	orrs	r3, r1
 800417c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004180:	e006      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004182:	bf00      	nop
 8004184:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800418c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004190:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800419c:	64bb      	str	r3, [r7, #72]	; 0x48
 800419e:	2300      	movs	r3, #0
 80041a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041a2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80041a6:	460b      	mov	r3, r1
 80041a8:	4313      	orrs	r3, r2
 80041aa:	d043      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80041ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80041b6:	d021      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80041b8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80041bc:	d81a      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80041be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c2:	d01d      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80041c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c8:	d814      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80041ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041ce:	d019      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80041d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041d4:	d80e      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80041da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041de:	d109      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80041e4:	3308      	adds	r3, #8
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 fd24 	bl	8005c34 <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80041f2:	e00a      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80041fa:	e006      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80041fc:	bf00      	nop
 80041fe:	e004      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004200:	bf00      	nop
 8004202:	e002      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004204:	bf00      	nop
 8004206:	e000      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10c      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004212:	4bb6      	ldr	r3, [pc, #728]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004214:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004218:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800421c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	4ab2      	ldr	r2, [pc, #712]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004224:	430b      	orrs	r3, r1
 8004226:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800422a:	e003      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004230:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004234:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004240:	643b      	str	r3, [r7, #64]	; 0x40
 8004242:	2300      	movs	r3, #0
 8004244:	647b      	str	r3, [r7, #68]	; 0x44
 8004246:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800424a:	460b      	mov	r3, r1
 800424c:	4313      	orrs	r3, r2
 800424e:	d030      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004250:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004256:	2b05      	cmp	r3, #5
 8004258:	d80f      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800425a:	2b03      	cmp	r3, #3
 800425c:	d211      	bcs.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800425e:	2b01      	cmp	r3, #1
 8004260:	d911      	bls.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8004262:	2b02      	cmp	r3, #2
 8004264:	d109      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004266:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800426a:	3308      	adds	r3, #8
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fce1 	bl	8005c34 <RCCEx_PLL2_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8004278:	e006      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8004280:	e002      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8004282:	bf00      	nop
 8004284:	e000      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8004286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004288:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10c      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004290:	4b96      	ldr	r3, [pc, #600]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004292:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004296:	f023 0107 	bic.w	r1, r3, #7
 800429a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800429e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a0:	4a92      	ldr	r2, [pc, #584]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80042a2:	430b      	orrs	r3, r1
 80042a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042a8:	e003      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80042ae:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80042b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	2100      	movs	r1, #0
 80042bc:	63b9      	str	r1, [r7, #56]	; 0x38
 80042be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80042c8:	460b      	mov	r3, r1
 80042ca:	4313      	orrs	r3, r2
 80042cc:	d022      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80042ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d005      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80042e2:	e002      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80042e4:	bf00      	nop
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80042e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ea:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10c      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80042f2:	4b7e      	ldr	r3, [pc, #504]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80042f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042f8:	f023 0108 	bic.w	r1, r3, #8
 80042fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004302:	4a7a      	ldr	r2, [pc, #488]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004304:	430b      	orrs	r3, r1
 8004306:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800430a:	e003      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004310:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004314:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004320:	633b      	str	r3, [r7, #48]	; 0x30
 8004322:	2300      	movs	r3, #0
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
 8004326:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800432a:	460b      	mov	r3, r1
 800432c:	4313      	orrs	r3, r2
 800432e:	f000 80b0 	beq.w	8004492 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004332:	4b6f      	ldr	r3, [pc, #444]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	4a6e      	ldr	r2, [pc, #440]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800433e:	f7fd f8ff 	bl	8001540 <HAL_GetTick>
 8004342:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004346:	e00b      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004348:	f7fd f8fa 	bl	8001540 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d903      	bls.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800435e:	e005      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004360:	4b63      	ldr	r3, [pc, #396]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0ed      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 800436c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004370:	2b00      	cmp	r3, #0
 8004372:	f040 808a 	bne.w	800448a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004376:	4b5d      	ldr	r3, [pc, #372]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800437c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004384:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d022      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
 800438c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004392:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004396:	429a      	cmp	r2, r3
 8004398:	d01b      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800439a:	4b54      	ldr	r3, [pc, #336]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800439c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043a8:	4b50      	ldr	r3, [pc, #320]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80043aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043ae:	4a4f      	ldr	r2, [pc, #316]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043b8:	4b4c      	ldr	r3, [pc, #304]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80043ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043be:	4a4b      	ldr	r2, [pc, #300]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80043c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043c8:	4a48      	ldr	r2, [pc, #288]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80043ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d019      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043de:	f7fd f8af 	bl	8001540 <HAL_GetTick>
 80043e2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e6:	e00d      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e8:	f7fd f8aa 	bl	8001540 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d903      	bls.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            break;
 8004402:	e006      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004404:	4b39      	ldr	r3, [pc, #228]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0ea      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8004412:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d132      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800441a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800441e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004428:	d10f      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800442a:	4b30      	ldr	r3, [pc, #192]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004432:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800443e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004442:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004444:	430b      	orrs	r3, r1
 8004446:	61d3      	str	r3, [r2, #28]
 8004448:	e005      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x886>
 800444a:	4b28      	ldr	r3, [pc, #160]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4a27      	ldr	r2, [pc, #156]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004450:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004454:	61d3      	str	r3, [r2, #28]
 8004456:	4b25      	ldr	r3, [pc, #148]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800445c:	4a23      	ldr	r2, [pc, #140]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800445e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004462:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004466:	4b21      	ldr	r3, [pc, #132]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004468:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800446c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004476:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004478:	430b      	orrs	r3, r1
 800447a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800447e:	e008      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004480:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004484:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8004488:	e003      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800448e:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004492:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a0:	2300      	movs	r3, #0
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80044a8:	460b      	mov	r3, r1
 80044aa:	4313      	orrs	r3, r2
 80044ac:	d038      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80044ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b4:	2b30      	cmp	r3, #48	; 0x30
 80044b6:	d014      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80044b8:	2b30      	cmp	r3, #48	; 0x30
 80044ba:	d80e      	bhi.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d012      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x916>
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d80a      	bhi.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d015      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d106      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044cc:	4b07      	ldr	r3, [pc, #28]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	4a06      	ldr	r2, [pc, #24]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80044d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d6:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80044d8:	e00d      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80044e0:	e009      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80044e2:	bf00      	nop
 80044e4:	e007      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80044e6:	bf00      	nop
 80044e8:	e005      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x926>
 80044ea:	bf00      	nop
 80044ec:	44020c00 	.word	0x44020c00
 80044f0:	44020800 	.word	0x44020800
        break;
 80044f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10c      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80044fe:	4bb5      	ldr	r3, [pc, #724]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004504:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004508:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800450c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450e:	49b1      	ldr	r1, [pc, #708]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004516:	e003      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004518:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800451c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004520:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800452c:	623b      	str	r3, [r7, #32]
 800452e:	2300      	movs	r3, #0
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004536:	460b      	mov	r3, r1
 8004538:	4313      	orrs	r3, r2
 800453a:	d03c      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800453c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004542:	2b04      	cmp	r3, #4
 8004544:	d81d      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	08004561 	.word	0x08004561
 8004550:	0800456f 	.word	0x0800456f
 8004554:	08004583 	.word	0x08004583
 8004558:	0800458b 	.word	0x0800458b
 800455c:	0800458b 	.word	0x0800458b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004560:	4b9c      	ldr	r3, [pc, #624]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	4a9b      	ldr	r2, [pc, #620]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800456a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800456c:	e00e      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800456e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004572:	3308      	adds	r3, #8
 8004574:	4618      	mov	r0, r3
 8004576:	f001 fb5d 	bl	8005c34 <RCCEx_PLL2_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004580:	e004      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8004588:	e000      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 800458a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10c      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004594:	4b8f      	ldr	r3, [pc, #572]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800459a:	f023 0207 	bic.w	r2, r3, #7
 800459e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a4:	498b      	ldr	r1, [pc, #556]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80045ac:	e003      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80045b2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80045b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045cc:	460b      	mov	r3, r1
 80045ce:	4313      	orrs	r3, r2
 80045d0:	d03c      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80045d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d01f      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d819      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80045e0:	2b18      	cmp	r3, #24
 80045e2:	d01d      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80045e4:	2b18      	cmp	r3, #24
 80045e6:	d815      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d007      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80045f0:	e010      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f2:	4b78      	ldr	r3, [pc, #480]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	4a77      	ldr	r2, [pc, #476]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80045f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fc:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80045fe:	e010      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004600:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004604:	3308      	adds	r3, #8
 8004606:	4618      	mov	r0, r3
 8004608:	f001 fb14 	bl	8005c34 <RCCEx_PLL2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004612:	e006      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800461a:	e002      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 800461c:	bf00      	nop
 800461e:	e000      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8004620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004622:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10c      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800462a:	4b6a      	ldr	r3, [pc, #424]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800462c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004630:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004634:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	4966      	ldr	r1, [pc, #408]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004642:	e003      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004644:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004648:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800464c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004662:	460b      	mov	r3, r1
 8004664:	4313      	orrs	r3, r2
 8004666:	d03e      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004668:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800466c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004672:	d020      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8004674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004678:	d819      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xade>
 800467a:	2bc0      	cmp	r3, #192	; 0xc0
 800467c:	d01d      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800467e:	2bc0      	cmp	r3, #192	; 0xc0
 8004680:	d815      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xade>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8004686:	2b40      	cmp	r3, #64	; 0x40
 8004688:	d007      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800468a:	e010      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468c:	4b51      	ldr	r3, [pc, #324]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	4a50      	ldr	r2, [pc, #320]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004696:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004698:	e010      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800469a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800469e:	3308      	adds	r3, #8
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 fac7 	bl	8005c34 <RCCEx_PLL2_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80046ac:	e006      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80046b4:	e002      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80046b6:	bf00      	nop
 80046b8:	e000      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80046ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046bc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10c      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80046c4:	4b43      	ldr	r3, [pc, #268]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80046c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80046ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d4:	493f      	ldr	r1, [pc, #252]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80046dc:	e003      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046de:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80046e2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	2100      	movs	r1, #0
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046fc:	460b      	mov	r3, r1
 80046fe:	4313      	orrs	r3, r2
 8004700:	d038      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004702:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800470c:	d00e      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800470e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004712:	d815      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d017      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8004718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800471c:	d110      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800471e:	4b2d      	ldr	r3, [pc, #180]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	4a2c      	ldr	r2, [pc, #176]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004728:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800472a:	e00e      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800472c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004730:	3308      	adds	r3, #8
 8004732:	4618      	mov	r0, r3
 8004734:	f001 fa7e 	bl	8005c34 <RCCEx_PLL2_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800473e:	e004      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8004746:	e000      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8004748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800474a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004752:	4b20      	ldr	r3, [pc, #128]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800475c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004762:	491c      	ldr	r1, [pc, #112]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800476a:	e003      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004770:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004774:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	2100      	movs	r1, #0
 800477e:	6039      	str	r1, [r7, #0]
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	e9d7 1200 	ldrd	r1, r2, [r7]
 800478a:	460b      	mov	r3, r1
 800478c:	4313      	orrs	r3, r2
 800478e:	d039      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004790:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004796:	2b30      	cmp	r3, #48	; 0x30
 8004798:	d01e      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800479a:	2b30      	cmp	r3, #48	; 0x30
 800479c:	d815      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d002      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d007      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 80047a6:	e010      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	4a09      	ldr	r2, [pc, #36]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80047ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b2:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80047b4:	e011      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80047ba:	3308      	adds	r3, #8
 80047bc:	4618      	mov	r0, r3
 80047be:	f001 fa39 	bl	8005c34 <RCCEx_PLL2_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80047c8:	e007      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80047d0:	e003      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 80047d2:	bf00      	nop
 80047d4:	44020c00 	.word	0x44020c00
        break;
 80047d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047da:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10c      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80047e2:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80047e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80047e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80047f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f2:	4908      	ldr	r1, [pc, #32]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80047fa:	e003      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004800:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8004804:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
}
 8004808:	4618      	mov	r0, r3
 800480a:	37a8      	adds	r7, #168	; 0xa8
 800480c:	46bd      	mov	sp, r7
 800480e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004812:	bf00      	nop
 8004814:	44020c00 	.word	0x44020c00

08004818 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004818:	b480      	push	{r7}
 800481a:	b08b      	sub	sp, #44	; 0x2c
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004820:	4bad      	ldr	r3, [pc, #692]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004828:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800482a:	4bab      	ldr	r3, [pc, #684]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004834:	4ba8      	ldr	r3, [pc, #672]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004840:	4ba5      	ldr	r3, [pc, #660]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800484a:	4ba3      	ldr	r3, [pc, #652]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	08db      	lsrs	r3, r3, #3
 8004850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 8126 	beq.w	8004aba <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d053      	beq.n	800491c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2b03      	cmp	r3, #3
 8004878:	d86f      	bhi.n	800495a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d003      	beq.n	8004888 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d02b      	beq.n	80048de <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8004886:	e068      	b.n	800495a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004888:	4b93      	ldr	r3, [pc, #588]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	08db      	lsrs	r3, r3, #3
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	4a92      	ldr	r2, [pc, #584]	; (8004adc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	ee07 3a90 	vmov	s15, r3
 80048a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	ee07 3a90 	vmov	s15, r3
 80048b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048bc:	ed97 6a04 	vldr	s12, [r7, #16]
 80048c0:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80048c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80048dc:	e068      	b.n	80049b0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	ee07 3a90 	vmov	s15, r3
 80048e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80048ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fa:	ed97 6a04 	vldr	s12, [r7, #16]
 80048fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800490e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004916:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800491a:	e049      	b.n	80049b0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004926:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800492a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	ee07 3a90 	vmov	s15, r3
 8004934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004938:	ed97 6a04 	vldr	s12, [r7, #16]
 800493c:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004948:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800494c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004954:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004958:	e02a      	b.n	80049b0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800495a:	4b5f      	ldr	r3, [pc, #380]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	08db      	lsrs	r3, r3, #3
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	4a5d      	ldr	r2, [pc, #372]	; (8004adc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004966:	fa22 f303 	lsr.w	r3, r2, r3
 800496a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	ee07 3a90 	vmov	s15, r3
 800497c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004992:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80049ae:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049b0:	4b49      	ldr	r3, [pc, #292]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049bc:	d121      	bne.n	8004a02 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80049be:	4b46      	ldr	r3, [pc, #280]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d017      	beq.n	80049fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80049ca:	4b43      	ldr	r3, [pc, #268]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ce:	0a5b      	lsrs	r3, r3, #9
 80049d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80049dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049e0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80049e4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80049e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e006      	b.n	8004a08 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e002      	b.n	8004a08 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a08:	4b33      	ldr	r3, [pc, #204]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a14:	d121      	bne.n	8004a5a <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004a16:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d017      	beq.n	8004a52 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004a22:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a26:	0c1b      	lsrs	r3, r3, #16
 8004a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a38:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004a3c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a48:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	605a      	str	r2, [r3, #4]
 8004a50:	e006      	b.n	8004a60 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	605a      	str	r2, [r3, #4]
 8004a58:	e002      	b.n	8004a60 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a60:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a6c:	d121      	bne.n	8004ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004a6e:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d017      	beq.n	8004aaa <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004a7a:	4b17      	ldr	r3, [pc, #92]	; (8004ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	0e1b      	lsrs	r3, r3, #24
 8004a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a84:	ee07 3a90 	vmov	s15, r3
 8004a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004a8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a90:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004a94:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aa0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004aa8:	e010      	b.n	8004acc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	609a      	str	r2, [r3, #8]
}
 8004ab0:	e00c      	b.n	8004acc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	609a      	str	r2, [r3, #8]
}
 8004ab8:	e008      	b.n	8004acc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	609a      	str	r2, [r3, #8]
}
 8004acc:	bf00      	nop
 8004ace:	372c      	adds	r7, #44	; 0x2c
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	44020c00 	.word	0x44020c00
 8004adc:	03d09000 	.word	0x03d09000
 8004ae0:	46000000 	.word	0x46000000
 8004ae4:	4a742400 	.word	0x4a742400
 8004ae8:	4bb71b00 	.word	0x4bb71b00

08004aec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b08b      	sub	sp, #44	; 0x2c
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004af4:	4bad      	ldr	r3, [pc, #692]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004afe:	4bab      	ldr	r3, [pc, #684]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004b08:	4ba8      	ldr	r3, [pc, #672]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	0a1b      	lsrs	r3, r3, #8
 8004b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b12:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004b14:	4ba5      	ldr	r3, [pc, #660]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004b1e:	4ba3      	ldr	r3, [pc, #652]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	08db      	lsrs	r3, r3, #3
 8004b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8126 	beq.w	8004d8e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d053      	beq.n	8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d86f      	bhi.n	8004c2e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d003      	beq.n	8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d02b      	beq.n	8004bb2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8004b5a:	e068      	b.n	8004c2e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b5c:	4b93      	ldr	r3, [pc, #588]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	08db      	lsrs	r3, r3, #3
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	4a92      	ldr	r2, [pc, #584]	; (8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	ee07 3a90 	vmov	s15, r3
 8004b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	ee07 3a90 	vmov	s15, r3
 8004b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b90:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b94:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004b98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004bb0:	e068      	b.n	8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	ee07 3a90 	vmov	s15, r3
 8004bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbc:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bce:	ed97 6a04 	vldr	s12, [r7, #16]
 8004bd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004bee:	e049      	b.n	8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfa:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c10:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004c14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c28:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004c2c:	e02a      	b.n	8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c2e:	4b5f      	ldr	r3, [pc, #380]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	08db      	lsrs	r3, r3, #3
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	4a5d      	ldr	r2, [pc, #372]	; (8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c62:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c66:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004c82:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c84:	4b49      	ldr	r3, [pc, #292]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c90:	d121      	bne.n	8004cd6 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004c92:	4b46      	ldr	r3, [pc, #280]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d017      	beq.n	8004cce <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c9e:	4b43      	ldr	r3, [pc, #268]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	0a5b      	lsrs	r3, r3, #9
 8004ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca8:	ee07 3a90 	vmov	s15, r3
 8004cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004cb8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e006      	b.n	8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	e002      	b.n	8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cdc:	4b33      	ldr	r3, [pc, #204]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ce8:	d121      	bne.n	8004d2e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004cea:	4b30      	ldr	r3, [pc, #192]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d017      	beq.n	8004d26 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004cf6:	4b2d      	ldr	r3, [pc, #180]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfa:	0c1b      	lsrs	r3, r3, #16
 8004cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004d10:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d1c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	605a      	str	r2, [r3, #4]
 8004d24:	e006      	b.n	8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	605a      	str	r2, [r3, #4]
 8004d2c:	e002      	b.n	8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d34:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d40:	d121      	bne.n	8004d86 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004d42:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d017      	beq.n	8004d7e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004d4e:	4b17      	ldr	r3, [pc, #92]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	0e1b      	lsrs	r3, r3, #24
 8004d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004d60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d64:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004d68:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d74:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d7c:	e010      	b.n	8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	609a      	str	r2, [r3, #8]
}
 8004d84:	e00c      	b.n	8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	609a      	str	r2, [r3, #8]
}
 8004d8c:	e008      	b.n	8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	609a      	str	r2, [r3, #8]
}
 8004da0:	bf00      	nop
 8004da2:	372c      	adds	r7, #44	; 0x2c
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	44020c00 	.word	0x44020c00
 8004db0:	03d09000 	.word	0x03d09000
 8004db4:	46000000 	.word	0x46000000
 8004db8:	4a742400 	.word	0x4a742400
 8004dbc:	4bb71b00 	.word	0x4bb71b00

08004dc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08c      	sub	sp, #48	; 0x30
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004dca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dce:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	d14b      	bne.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004dd6:	4bbd      	ldr	r3, [pc, #756]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8004dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004de2:	4bba      	ldr	r3, [pc, #744]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8004de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d108      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df6:	d104      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dfe:	f000 bf10 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004e02:	4bb2      	ldr	r3, [pc, #712]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8004e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e10:	d108      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e18:	d104      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8004e1a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e20:	f000 beff 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004e24:	4ba9      	ldr	r3, [pc, #676]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e30:	d119      	bne.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e38:	d115      	bne.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004e3a:	4ba4      	ldr	r3, [pc, #656]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8004e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e46:	d30a      	bcc.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004e48:	4ba0      	ldr	r3, [pc, #640]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	0a1b      	lsrs	r3, r3, #8
 8004e4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e52:	4a9f      	ldr	r2, [pc, #636]	; (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004e5a:	f000 bee2 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
      }
      else
      {
        frequency = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004e62:	f000 bede 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e6a:	f000 beda 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e72:	f5a3 5180 	sub.w	r1, r3, #4096	; 0x1000
 8004e76:	ea52 0301 	orrs.w	r3, r2, r1
 8004e7a:	f000 8389 	beq.w	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8004e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e82:	2a01      	cmp	r2, #1
 8004e84:	f573 5380 	sbcs.w	r3, r3, #4096	; 0x1000
 8004e88:	f080 86c8 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e90:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8004e94:	ea52 0301 	orrs.w	r3, r2, r1
 8004e98:	f000 82a5 	beq.w	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ea0:	2a01      	cmp	r2, #1
 8004ea2:	f573 7300 	sbcs.w	r3, r3, #512	; 0x200
 8004ea6:	f080 86b9 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eae:	f1a3 0110 	sub.w	r1, r3, #16
 8004eb2:	ea52 0301 	orrs.w	r3, r2, r1
 8004eb6:	f000 867d 	beq.w	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8004eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ebe:	2a01      	cmp	r2, #1
 8004ec0:	f173 0310 	sbcs.w	r3, r3, #16
 8004ec4:	f080 86aa 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ecc:	1f19      	subs	r1, r3, #4
 8004ece:	ea52 0301 	orrs.w	r3, r2, r1
 8004ed2:	f000 84ad 	beq.w	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eda:	2a01      	cmp	r2, #1
 8004edc:	f173 0304 	sbcs.w	r3, r3, #4
 8004ee0:	f080 869c 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee8:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 8004eec:	430b      	orrs	r3, r1
 8004eee:	f000 85a6 	beq.w	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ef6:	4977      	ldr	r1, [pc, #476]	; (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8004ef8:	428a      	cmp	r2, r1
 8004efa:	f173 0300 	sbcs.w	r3, r3, #0
 8004efe:	f080 868d 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f06:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	f000 852e 	beq.w	800596c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f14:	4970      	ldr	r1, [pc, #448]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8004f16:	428a      	cmp	r2, r1
 8004f18:	f173 0300 	sbcs.w	r3, r3, #0
 8004f1c:	f080 867e 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f24:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	f000 84b8 	beq.w	800589e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
 8004f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f32:	496a      	ldr	r1, [pc, #424]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 8004f34:	428a      	cmp	r2, r1
 8004f36:	f173 0300 	sbcs.w	r3, r3, #0
 8004f3a:	f080 866f 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f42:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8004f46:	430b      	orrs	r3, r1
 8004f48:	f000 85ee 	beq.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
 8004f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f50:	4963      	ldr	r1, [pc, #396]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8004f52:	428a      	cmp	r2, r1
 8004f54:	f173 0300 	sbcs.w	r3, r3, #0
 8004f58:	f080 8660 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f60:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8004f64:	430b      	orrs	r3, r1
 8004f66:	f000 81e2 	beq.w	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8004f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f6e:	495d      	ldr	r1, [pc, #372]	; (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
 8004f70:	428a      	cmp	r2, r1
 8004f72:	f173 0300 	sbcs.w	r3, r3, #0
 8004f76:	f080 8651 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f7e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004f82:	430b      	orrs	r3, r1
 8004f84:	f000 83c8 	beq.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f8c:	4956      	ldr	r1, [pc, #344]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004f8e:	428a      	cmp	r2, r1
 8004f90:	f173 0300 	sbcs.w	r3, r3, #0
 8004f94:	f080 8642 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f9c:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	f000 832d 	beq.w	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8004fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004faa:	4950      	ldr	r1, [pc, #320]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004fac:	428a      	cmp	r2, r1
 8004fae:	f173 0300 	sbcs.w	r3, r3, #0
 8004fb2:	f080 8633 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fba:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	f000 82b6 	beq.w	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fc8:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8004fcc:	f173 0300 	sbcs.w	r3, r3, #0
 8004fd0:	f080 8624 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	f000 8268 	beq.w	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
 8004fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fe6:	f244 0101 	movw	r1, #16385	; 0x4001
 8004fea:	428a      	cmp	r2, r1
 8004fec:	f173 0300 	sbcs.w	r3, r3, #0
 8004ff0:	f080 8614 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ff8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	f000 8219 	beq.w	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
 8005002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005006:	f242 0101 	movw	r1, #8193	; 0x2001
 800500a:	428a      	cmp	r2, r1
 800500c:	f173 0300 	sbcs.w	r3, r3, #0
 8005010:	f080 8604 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8005014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005018:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800501c:	430b      	orrs	r3, r1
 800501e:	f000 8134 	beq.w	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8005022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005026:	f241 0101 	movw	r1, #4097	; 0x1001
 800502a:	428a      	cmp	r2, r1
 800502c:	f173 0300 	sbcs.w	r3, r3, #0
 8005030:	f080 85f4 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8005034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005038:	1f11      	subs	r1, r2, #4
 800503a:	430b      	orrs	r3, r1
 800503c:	f000 80cf 	beq.w	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 8005040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005044:	2a05      	cmp	r2, #5
 8005046:	f173 0300 	sbcs.w	r3, r3, #0
 800504a:	f080 85e7 	bcs.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 800504e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005052:	1e51      	subs	r1, r2, #1
 8005054:	430b      	orrs	r3, r1
 8005056:	d006      	beq.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8005058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800505c:	1e91      	subs	r1, r2, #2
 800505e:	430b      	orrs	r3, r1
 8005060:	d069      	beq.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005062:	f000 bddb 	b.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005066:	4b19      	ldr	r3, [pc, #100]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005068:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005078:	f7fe fd7e 	bl	8003b78 <HAL_RCC_GetPCLK2Freq>
 800507c:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800507e:	f000 bdd0 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800508a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800508e:	d10a      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	2b01      	cmp	r3, #1
 8005094:	d107      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005096:	f107 030c 	add.w	r3, r7, #12
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fd26 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a4:	e045      	b.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d120      	bne.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d11d      	bne.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050b8:	4b04      	ldr	r3, [pc, #16]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	08db      	lsrs	r3, r3, #3
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	4a0b      	ldr	r2, [pc, #44]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
 80050c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ca:	e032      	b.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80050cc:	44020c00 	.word	0x44020c00
 80050d0:	016e3600 	.word	0x016e3600
 80050d4:	20000001 	.word	0x20000001
 80050d8:	10000001 	.word	0x10000001
 80050dc:	08000001 	.word	0x08000001
 80050e0:	04000001 	.word	0x04000001
 80050e4:	00200001 	.word	0x00200001
 80050e8:	00040001 	.word	0x00040001
 80050ec:	00020001 	.word	0x00020001
 80050f0:	03d09000 	.word	0x03d09000
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80050f4:	4b9f      	ldr	r3, [pc, #636]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005100:	d105      	bne.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	2b04      	cmp	r3, #4
 8005106:	d102      	bne.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          frequency = CSI_VALUE;
 8005108:	4b9b      	ldr	r3, [pc, #620]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800510c:	e011      	b.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800510e:	4b99      	ldr	r3, [pc, #612]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b02      	cmp	r3, #2
 800511a:	d106      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	2b05      	cmp	r3, #5
 8005120:	d103      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
          frequency = LSE_VALUE;
 8005122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005128:	e003      	b.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          frequency = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800512e:	f000 bd78 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 8005132:	f000 bd76 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005136:	4b8f      	ldr	r3, [pc, #572]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005138:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800513c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005148:	f7fe fd00 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 800514c:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800514e:	f000 bd68 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005152:	4b88      	ldr	r3, [pc, #544]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800515a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800515e:	d10a      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	2b08      	cmp	r3, #8
 8005164:	d107      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005166:	f107 030c 	add.w	r3, r7, #12
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff fcbe 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005174:	e031      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005176:	4b7f      	ldr	r3, [pc, #508]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b02      	cmp	r3, #2
 8005180:	d10c      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	2b18      	cmp	r3, #24
 8005186:	d109      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005188:	4b7a      	ldr	r3, [pc, #488]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	08db      	lsrs	r3, r3, #3
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	4a7a      	ldr	r2, [pc, #488]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>)
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800519a:	e01e      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800519c:	4b75      	ldr	r3, [pc, #468]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051a8:	d105      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d102      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
          frequency = CSI_VALUE;
 80051b0:	4b71      	ldr	r3, [pc, #452]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 80051b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b4:	e011      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80051b6:	4b6f      	ldr	r3, [pc, #444]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80051b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d106      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	2b28      	cmp	r3, #40	; 0x28
 80051c8:	d103      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          frequency = LSE_VALUE;
 80051ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d0:	e003      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          frequency = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051d6:	f000 bd24 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 80051da:	f000 bd22 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80051de:	4b65      	ldr	r3, [pc, #404]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80051e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80051e4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80051f0:	f7fe fcac 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 80051f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80051f6:	f000 bd14 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80051fa:	4b5e      	ldr	r3, [pc, #376]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005206:	d10a      	bne.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	d107      	bne.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800520e:	f107 030c 	add.w	r3, r7, #12
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff fc6a 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800521c:	e033      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800521e:	4b55      	ldr	r3, [pc, #340]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b02      	cmp	r3, #2
 8005228:	d10c      	bne.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	2bc0      	cmp	r3, #192	; 0xc0
 800522e:	d109      	bne.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005230:	4b50      	ldr	r3, [pc, #320]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	08db      	lsrs	r3, r3, #3
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	4a50      	ldr	r2, [pc, #320]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>)
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
 8005240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005242:	e020      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005244:	4b4b      	ldr	r3, [pc, #300]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800524c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005250:	d106      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005258:	d102      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
          frequency = CSI_VALUE;
 800525a:	4b47      	ldr	r3, [pc, #284]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800525e:	e012      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005260:	4b44      	ldr	r3, [pc, #272]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b02      	cmp	r3, #2
 800526c:	d107      	bne.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005274:	d103      	bne.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          frequency = LSE_VALUE;
 8005276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800527c:	e003      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
          frequency = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005282:	f000 bcce 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 8005286:	f000 bccc 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800528a:	4b3a      	ldr	r3, [pc, #232]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800528c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005290:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005294:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800529c:	f7fe fc82 	bl	8003ba4 <HAL_RCC_GetPCLK3Freq>
 80052a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80052a2:	f000 bcbe 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052ac:	d108      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ae:	f107 030c 	add.w	r3, r7, #12
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fc1a 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052bc:	f000 bcb1 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80052c0:	4b2c      	ldr	r3, [pc, #176]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d10d      	bne.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052d2:	d109      	bne.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052d4:	4b27      	ldr	r3, [pc, #156]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	08db      	lsrs	r3, r3, #3
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	4a27      	ldr	r2, [pc, #156]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>)
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052e6:	e020      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80052e8:	4b22      	ldr	r3, [pc, #136]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f4:	d106      	bne.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052fc:	d102      	bne.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
          frequency = CSI_VALUE;
 80052fe:	4b1e      	ldr	r3, [pc, #120]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005302:	e012      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005304:	4b1b      	ldr	r3, [pc, #108]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005306:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b02      	cmp	r3, #2
 8005310:	d107      	bne.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005318:	d103      	bne.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          frequency = LSE_VALUE;
 800531a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005320:	e003      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
          frequency = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005326:	f000 bc7c 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 800532a:	f000 bc7a 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800532e:	4b11      	ldr	r3, [pc, #68]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8005340:	f7fe fbe8 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8005344:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8005346:	f000 bc6c 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	2b01      	cmp	r3, #1
 800534e:	d104      	bne.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005350:	f7fe fab4 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8005354:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005356:	f000 bc64 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	2b02      	cmp	r3, #2
 800535e:	d10f      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005360:	f107 030c 	add.w	r3, r7, #12
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff fbc1 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800536e:	f000 bc58 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 8005372:	bf00      	nop
 8005374:	44020c00 	.word	0x44020c00
 8005378:	003d0900 	.word	0x003d0900
 800537c:	03d09000 	.word	0x03d09000
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005380:	4b9b      	ldr	r3, [pc, #620]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800538c:	d105      	bne.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	2b03      	cmp	r3, #3
 8005392:	d102      	bne.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          frequency = HSE_VALUE;
 8005394:	4b97      	ldr	r3, [pc, #604]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005398:	e023      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800539a:	4b95      	ldr	r3, [pc, #596]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d109      	bne.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053ac:	4b90      	ldr	r3, [pc, #576]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	08db      	lsrs	r3, r3, #3
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	4a90      	ldr	r2, [pc, #576]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053be:	e010      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80053c0:	4b8b      	ldr	r3, [pc, #556]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053cc:	d105      	bne.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	2b05      	cmp	r3, #5
 80053d2:	d102      	bne.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          frequency = CSI_VALUE;
 80053d4:	4b89      	ldr	r3, [pc, #548]	; (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053d8:	e003      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
          frequency = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053de:	f000 bc20 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 80053e2:	f000 bc1e 	b.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80053e6:	4b82      	ldr	r3, [pc, #520]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80053e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80053f2:	4b7f      	ldr	r3, [pc, #508]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80053f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d106      	bne.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x64e>
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	2b00      	cmp	r3, #0
 8005404:	d103      	bne.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x64e>
        {
          frequency = LSE_VALUE;
 8005406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800540c:	e011      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800540e:	4b78      	ldr	r3, [pc, #480]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800541c:	d106      	bne.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	2b08      	cmp	r3, #8
 8005422:	d103      	bne.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        {
          frequency = LSI_VALUE;
 8005424:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800542a:	e002      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8005430:	e3f7      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 8005432:	e3f6      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005434:	4b6e      	ldr	r3, [pc, #440]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005436:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800543a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800543e:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005446:	f7fe fb81 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 800544a:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800544c:	e3e9      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005454:	d107      	bne.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005456:	f107 030c 	add.w	r3, r7, #12
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff fb46 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005464:	e3dd      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005466:	4b62      	ldr	r3, [pc, #392]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b02      	cmp	r3, #2
 8005470:	d10d      	bne.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005478:	d109      	bne.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800547a:	4b5d      	ldr	r3, [pc, #372]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	08db      	lsrs	r3, r3, #3
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	4a5c      	ldr	r2, [pc, #368]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005486:	fa22 f303 	lsr.w	r3, r2, r3
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800548c:	e010      	b.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800548e:	4b58      	ldr	r3, [pc, #352]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800549a:	d106      	bne.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054a2:	d102      	bne.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          frequency = CSI_VALUE;
 80054a4:	4b55      	ldr	r3, [pc, #340]	; (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054a8:	e002      	b.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054ae:	e3b8      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 80054b0:	e3b7      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80054b2:	4b4f      	ldr	r3, [pc, #316]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80054b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80054bc:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d103      	bne.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80054c4:	f7fe fb42 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 80054c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80054ca:	e3aa      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054d2:	d107      	bne.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054d4:	f107 030c 	add.w	r3, r7, #12
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fb07 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054e2:	e39e      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80054e4:	4b42      	ldr	r3, [pc, #264]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d10d      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054f6:	d109      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054f8:	4b3d      	ldr	r3, [pc, #244]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	08db      	lsrs	r3, r3, #3
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	4a3d      	ldr	r2, [pc, #244]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
 8005508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800550a:	e010      	b.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800550c:	4b38      	ldr	r3, [pc, #224]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005518:	d106      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005520:	d102      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = CSI_VALUE;
 8005522:	4b36      	ldr	r3, [pc, #216]	; (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005526:	e002      	b.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          frequency = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800552c:	e379      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 800552e:	e378      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8005530:	4b2f      	ldr	r3, [pc, #188]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005532:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005536:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800553a:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	2b00      	cmp	r3, #0
 8005540:	d103      	bne.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005542:	f7fe fb03 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8005546:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005548:	e36b      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005550:	d107      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005552:	f107 030c 	add.w	r3, r7, #12
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fac8 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005560:	e35f      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8005562:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b02      	cmp	r3, #2
 800556c:	d10d      	bne.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005574:	d109      	bne.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005576:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	08db      	lsrs	r3, r3, #3
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005582:	fa22 f303 	lsr.w	r3, r2, r3
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005588:	e34b      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
          frequency = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800558e:	e348      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8005590:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005592:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005596:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80055a2:	f7fe faff 	bl	8003ba4 <HAL_RCC_GetPCLK3Freq>
 80055a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80055a8:	e33b      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055b0:	d107      	bne.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055b2:	f107 030c 	add.w	r3, r7, #12
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fa98 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055c0:	e32f      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80055c2:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d10d      	bne.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d4:	d109      	bne.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055d6:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	08db      	lsrs	r3, r3, #3
 80055dc:	f003 0303 	and.w	r3, r3, #3
 80055e0:	4a05      	ldr	r2, [pc, #20]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80055e2:	fa22 f303 	lsr.w	r3, r2, r3
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055e8:	e31b      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
          frequency = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055ee:	e318      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 80055f0:	44020c00 	.word	0x44020c00
 80055f4:	016e3600 	.word	0x016e3600
 80055f8:	03d09000 	.word	0x03d09000
 80055fc:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005600:	4b9b      	ldr	r3, [pc, #620]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005602:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005606:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005612:	d044      	beq.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800561a:	d879      	bhi.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005622:	d02d      	beq.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562a:	d871      	bhi.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 800562c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005632:	d017      	beq.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800563a:	d869      	bhi.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	2b00      	cmp	r3, #0
 8005640:	d004      	beq.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005648:	d004      	beq.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800564a:	e061      	b.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x950>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800564c:	f7fe faaa 	bl	8003ba4 <HAL_RCC_GetPCLK3Freq>
 8005650:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 8005652:	e060      	b.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005654:	f107 030c 	add.w	r3, r7, #12
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fa47 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005662:	e058      	b.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005664:	4b82      	ldr	r3, [pc, #520]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005666:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b02      	cmp	r3, #2
 8005670:	d103      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
            {
              frequency = LSE_VALUE;
 8005672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005676:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005678:	e04d      	b.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
              frequency = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800567e:	e04a      	b.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005680:	4b7b      	ldr	r3, [pc, #492]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005686:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800568a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800568e:	d103      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
            {
              frequency = LSI_VALUE;
 8005690:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005694:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005696:	e03e      	b.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
              frequency = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800569c:	e03b      	b.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800569e:	4b74      	ldr	r3, [pc, #464]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80056a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056a4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056aa:	4b71      	ldr	r3, [pc, #452]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d109      	bne.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80056bc:	4b6c      	ldr	r3, [pc, #432]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	08db      	lsrs	r3, r3, #3
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	4a6b      	ldr	r2, [pc, #428]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ce:	e01e      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056d0:	4b67      	ldr	r3, [pc, #412]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056dc:	d106      	bne.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e4:	d102      	bne.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80056e6:	4b64      	ldr	r3, [pc, #400]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80056e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ea:	e010      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056ec:	4b60      	ldr	r3, [pc, #384]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056f8:	d106      	bne.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005700:	d102      	bne.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005702:	4b5e      	ldr	r3, [pc, #376]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005706:	e002      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005708:	2300      	movs	r3, #0
 800570a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 800570c:	e003      	b.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 800570e:	e002      	b.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          }
          default :
          {
            frequency = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005714:	bf00      	nop
          }
        }
        break;
 8005716:	e284      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005718:	4b55      	ldr	r3, [pc, #340]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800571a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800571e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800572a:	d044      	beq.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005732:	d879      	bhi.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800573a:	d02d      	beq.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005742:	d871      	bhi.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800574a:	d017      	beq.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005752:	d869      	bhi.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	2b00      	cmp	r3, #0
 8005758:	d004      	beq.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005760:	d004      	beq.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8005762:	e061      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8005764:	f7fe f9f2 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8005768:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 800576a:	e060      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800576c:	f107 030c 	add.w	r3, r7, #12
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff f9bb 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800577a:	e058      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800577c:	4b3c      	ldr	r3, [pc, #240]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800577e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b02      	cmp	r3, #2
 8005788:	d103      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
            {
              frequency = LSE_VALUE;
 800578a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578e:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005790:	e04d      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
              frequency = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005796:	e04a      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005798:	4b35      	ldr	r3, [pc, #212]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800579a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800579e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057a6:	d103      	bne.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
            {
              frequency = LSI_VALUE;
 80057a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80057ac:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80057ae:	e03e      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
              frequency = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80057b4:	e03b      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057b6:	4b2e      	ldr	r3, [pc, #184]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80057b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057bc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057c2:	4b2b      	ldr	r3, [pc, #172]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d10c      	bne.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80057d4:	4b26      	ldr	r3, [pc, #152]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	08db      	lsrs	r3, r3, #3
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	4a25      	ldr	r2, [pc, #148]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e6:	e01e      	b.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057e8:	4b21      	ldr	r3, [pc, #132]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057f4:	d106      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fc:	d102      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80057fe:	4b1e      	ldr	r3, [pc, #120]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005802:	e010      	b.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005804:	4b1a      	ldr	r3, [pc, #104]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005810:	d106      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xa60>
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005818:	d102      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xa60>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800581a:	4b18      	ldr	r3, [pc, #96]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800581e:	e002      	b.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8005824:	e003      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8005826:	e002      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          }
          default :
          {
            frequency = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800582c:	bf00      	nop
          }
        }
        break;
 800582e:	e1f8      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005830:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583a:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800583c:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005848:	d105      	bne.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8005852:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8005854:	e1e5      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585c:	d110      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800585e:	f107 0318 	add.w	r3, r7, #24
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe ffd8 	bl	8004818 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800586c:	e1d9      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 800586e:	bf00      	nop
 8005870:	44020c00 	.word	0x44020c00
 8005874:	03d09000 	.word	0x03d09000
 8005878:	003d0900 	.word	0x003d0900
 800587c:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005886:	d107      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005888:	f107 030c 	add.w	r3, r7, #12
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff f92d 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005896:	e1c4      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
          frequency = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800589c:	e1c1      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800589e:	4b9d      	ldr	r3, [pc, #628]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 80058a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d859      	bhi.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80058b0:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	080058cd 	.word	0x080058cd
 80058bc:	080058dd 	.word	0x080058dd
 80058c0:	08005965 	.word	0x08005965
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	080058f3 	.word	0x080058f3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058cc:	f107 0318 	add.w	r3, r7, #24
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fe ffa1 	bl	8004818 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80058da:	e046      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058dc:	f107 030c 	add.w	r3, r7, #12
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff f903 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80058ea:	e03e      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80058ec:	4b8a      	ldr	r3, [pc, #552]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80058f0:	e03b      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058f2:	4b88      	ldr	r3, [pc, #544]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 80058f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058f8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058fe:	4b85      	ldr	r3, [pc, #532]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b02      	cmp	r3, #2
 8005908:	d10c      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	d109      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005910:	4b80      	ldr	r3, [pc, #512]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	08db      	lsrs	r3, r3, #3
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	4a80      	ldr	r2, [pc, #512]	; (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
 8005920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005922:	e01e      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005924:	4b7b      	ldr	r3, [pc, #492]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800592c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005930:	d106      	bne.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005938:	d102      	bne.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800593a:	4b79      	ldr	r3, [pc, #484]	; (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800593e:	e010      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005940:	4b74      	ldr	r3, [pc, #464]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800594c:	d106      	bne.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005954:	d102      	bne.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005956:	4b73      	ldr	r3, [pc, #460]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800595a:	e002      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8005960:	e003      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8005962:	e002      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
          }
          default:
          {
            frequency = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005968:	bf00      	nop
          }
        }
        break;
 800596a:	e15a      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800596c:	4b69      	ldr	r3, [pc, #420]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 800596e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005972:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	2b20      	cmp	r3, #32
 800597c:	d022      	beq.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	2b20      	cmp	r3, #32
 8005982:	d858      	bhi.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	2b18      	cmp	r3, #24
 8005988:	d019      	beq.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0xbfe>
 800598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598c:	2b18      	cmp	r3, #24
 800598e:	d852      	bhi.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0xbde>
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	2b08      	cmp	r3, #8
 800599a:	d008      	beq.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800599c:	e04b      	b.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800599e:	f107 0318 	add.w	r3, r7, #24
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe ff38 	bl	8004818 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80059ac:	e046      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059ae:	f107 030c 	add.w	r3, r7, #12
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff f89a 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80059bc:	e03e      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80059be:	4b56      	ldr	r3, [pc, #344]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 80059c0:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80059c2:	e03b      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059c4:	4b53      	ldr	r3, [pc, #332]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 80059c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059ca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059d0:	4b50      	ldr	r3, [pc, #320]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d10c      	bne.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d109      	bne.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80059e2:	4b4c      	ldr	r3, [pc, #304]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	08db      	lsrs	r3, r3, #3
 80059e8:	f003 0303 	and.w	r3, r3, #3
 80059ec:	4a4b      	ldr	r2, [pc, #300]	; (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80059ee:	fa22 f303 	lsr.w	r3, r2, r3
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f4:	e01e      	b.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059f6:	4b47      	ldr	r3, [pc, #284]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a02:	d106      	bne.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0a:	d102      	bne.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005a0c:	4b44      	ldr	r3, [pc, #272]	; (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a10:	e010      	b.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a12:	4b40      	ldr	r3, [pc, #256]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a1e:	d106      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a26:	d102      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005a28:	4b3e      	ldr	r3, [pc, #248]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2c:	e002      	b.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8005a32:	e003      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
 8005a34:	e002      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
          }
          default:
          {
            frequency = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005a3a:	bf00      	nop
          }
        }
        break;
 8005a3c:	e0f1      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005a3e:	4b35      	ldr	r3, [pc, #212]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a44:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a50:	d023      	beq.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0xcda>
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a58:	d858      	bhi.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	2bc0      	cmp	r3, #192	; 0xc0
 8005a5e:	d019      	beq.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	2bc0      	cmp	r3, #192	; 0xc0
 8005a64:	d852      	bhi.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d008      	beq.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
 8005a72:	e04b      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a74:	f107 0318 	add.w	r3, r7, #24
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fe fecd 	bl	8004818 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005a82:	e046      	b.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a84:	f107 030c 	add.w	r3, r7, #12
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff f82f 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005a92:	e03e      	b.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005a94:	4b20      	ldr	r3, [pc, #128]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005a98:	e03b      	b.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a9a:	4b1e      	ldr	r3, [pc, #120]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005aa0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005aa6:	4b1b      	ldr	r3, [pc, #108]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d10c      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d109      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ab8:	4b16      	ldr	r3, [pc, #88]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	08db      	lsrs	r3, r3, #3
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aca:	e01e      	b.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005acc:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad8:	d106      	bne.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae0:	d102      	bne.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005ae2:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae6:	e010      	b.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005af4:	d106      	bne.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005afc:	d102      	bne.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005afe:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b02:	e002      	b.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8005b08:	e003      	b.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8005b0a:	e002      	b.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          }
          default:
          {
            frequency = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005b10:	bf00      	nop
          }
        }
        break;
 8005b12:	e086      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 8005b14:	44020c00 	.word	0x44020c00
 8005b18:	00bb8000 	.word	0x00bb8000
 8005b1c:	03d09000 	.word	0x03d09000
 8005b20:	003d0900 	.word	0x003d0900
 8005b24:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005b28:	4b40      	ldr	r3, [pc, #256]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>)
 8005b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b32:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005b34:	4b3d      	ldr	r3, [pc, #244]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b40:	d105      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8005b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
        {
          frequency = HSI48_VALUE;
 8005b48:	4b39      	ldr	r3, [pc, #228]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>)
 8005b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4c:	e031      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005b4e:	4b37      	ldr	r3, [pc, #220]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b5a:	d10a      	bne.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	2b10      	cmp	r3, #16
 8005b60:	d107      	bne.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b62:	f107 0318 	add.w	r3, r7, #24
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe fe56 	bl	8004818 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b70:	e01f      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8005b72:	4b2e      	ldr	r3, [pc, #184]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>)
 8005b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d106      	bne.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d103      	bne.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
        {
          frequency = LSE_VALUE;
 8005b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b8c:	e011      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005b8e:	4b27      	ldr	r3, [pc, #156]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>)
 8005b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b9c:	d106      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	2b30      	cmp	r3, #48	; 0x30
 8005ba2:	d103      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
        {
          frequency = LSI_VALUE;
 8005ba4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005baa:	e002      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8005bb0:	e037      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 8005bb2:	e036      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005bb4:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>)
 8005bb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bbe:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	2b10      	cmp	r3, #16
 8005bc4:	d107      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bc6:	f107 0318 	add.w	r3, r7, #24
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fe fe24 	bl	8004818 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8005bd4:	e025      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8005bd6:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005be2:	d10a      	bne.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d107      	bne.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bea:	f107 030c 	add.w	r3, r7, #12
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe ff7c 	bl	8004aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf8:	e00f      	b.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0xe5a>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe6c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c06:	d105      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	2b30      	cmp	r3, #48	; 0x30
 8005c0c:	d102      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>
        {
          frequency = HSI48_VALUE;
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>)
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c12:	e002      	b.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0xe5a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        break;
 8005c18:	e003      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 8005c1a:	e002      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>


      default:
        frequency = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c20:	bf00      	nop
    }
  }

  return (frequency);
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3730      	adds	r7, #48	; 0x30
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	44020c00 	.word	0x44020c00
 8005c30:	02dc6c00 	.word	0x02dc6c00

08005c34 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005c3c:	4b48      	ldr	r3, [pc, #288]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a47      	ldr	r2, [pc, #284]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005c42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c46:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c48:	f7fb fc7a 	bl	8001540 <HAL_GetTick>
 8005c4c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c4e:	e008      	b.n	8005c62 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c50:	f7fb fc76 	bl	8001540 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e07a      	b.n	8005d58 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c62:	4b3f      	ldr	r3, [pc, #252]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f0      	bne.n	8005c50 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005c6e:	4b3c      	ldr	r3, [pc, #240]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6811      	ldr	r1, [r2, #0]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6852      	ldr	r2, [r2, #4]
 8005c82:	0212      	lsls	r2, r2, #8
 8005c84:	430a      	orrs	r2, r1
 8005c86:	4936      	ldr	r1, [pc, #216]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	025b      	lsls	r3, r3, #9
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	041b      	lsls	r3, r3, #16
 8005caa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	061b      	lsls	r3, r3, #24
 8005cb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cbc:	4928      	ldr	r1, [pc, #160]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005cc2:	4b27      	ldr	r3, [pc, #156]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	f023 020c 	bic.w	r2, r3, #12
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	4924      	ldr	r1, [pc, #144]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005cd4:	4b22      	ldr	r3, [pc, #136]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	f023 0220 	bic.w	r2, r3, #32
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	491f      	ldr	r1, [pc, #124]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005ce6:	4b1e      	ldr	r3, [pc, #120]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	491c      	ldr	r1, [pc, #112]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005cf4:	4b1a      	ldr	r3, [pc, #104]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	4a19      	ldr	r2, [pc, #100]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005cfa:	f023 0310 	bic.w	r3, r3, #16
 8005cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005d00:	4b17      	ldr	r3, [pc, #92]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d08:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6a12      	ldr	r2, [r2, #32]
 8005d10:	00d2      	lsls	r2, r2, #3
 8005d12:	4913      	ldr	r1, [pc, #76]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005d18:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	4a10      	ldr	r2, [pc, #64]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005d1e:	f043 0310 	orr.w	r3, r3, #16
 8005d22:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005d24:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a0d      	ldr	r2, [pc, #52]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d2e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d30:	f7fb fc06 	bl	8001540 <HAL_GetTick>
 8005d34:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d36:	e008      	b.n	8005d4a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d38:	f7fb fc02 	bl	8001540 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e006      	b.n	8005d58 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d4a:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <RCCEx_PLL2_Config+0x12c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f0      	beq.n	8005d38 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0

}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	44020c00 	.word	0x44020c00

08005d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e042      	b.n	8005dfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d106      	bne.n	8005d8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7fb f919 	bl	8000fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2224      	movs	r2, #36	; 0x24
 8005d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0201 	bic.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f8ca 	bl	8005f40 <UART_SetConfig>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e022      	b.n	8005dfc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fa3c 	bl	800623c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fac3 	bl	8006380 <UART_CheckIdleState>
 8005dfa:	4603      	mov	r3, r0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08a      	sub	sp, #40	; 0x28
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	4613      	mov	r3, r2
 8005e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	f040 808b 	bne.w	8005f36 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_UART_Transmit+0x28>
 8005e26:	88fb      	ldrh	r3, [r7, #6]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e083      	b.n	8005f38 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3a:	2b80      	cmp	r3, #128	; 0x80
 8005e3c:	d107      	bne.n	8005e4e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e4c:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2221      	movs	r2, #33	; 0x21
 8005e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e5e:	f7fb fb6f 	bl	8001540 <HAL_GetTick>
 8005e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	88fa      	ldrh	r2, [r7, #6]
 8005e68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	88fa      	ldrh	r2, [r7, #6]
 8005e70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7c:	d108      	bne.n	8005e90 <HAL_UART_Transmit+0x8c>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d104      	bne.n	8005e90 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	e003      	b.n	8005e98 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e94:	2300      	movs	r3, #0
 8005e96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e98:	e030      	b.n	8005efc <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2180      	movs	r1, #128	; 0x80
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 fb15 	bl	80064d4 <UART_WaitOnFlagUntilTimeout>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e03d      	b.n	8005f38 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10b      	bne.n	8005eda <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ed0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	61bb      	str	r3, [r7, #24]
 8005ed8:	e007      	b.n	8005eea <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	781a      	ldrb	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1c8      	bne.n	8005e9a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2140      	movs	r1, #64	; 0x40
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 fade 	bl	80064d4 <UART_WaitOnFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e006      	b.n	8005f38 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e000      	b.n	8005f38 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005f36:	2302      	movs	r3, #2
  }
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3720      	adds	r7, #32
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f44:	b094      	sub	sp, #80	; 0x50
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	498a      	ldr	r1, [pc, #552]	; (8006198 <UART_SetConfig+0x258>)
 8005f70:	4019      	ands	r1, r3
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	68d9      	ldr	r1, [r3, #12]
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	ea40 0301 	orr.w	r3, r0, r1
 8005f92:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b7f      	ldr	r3, [pc, #508]	; (800619c <UART_SetConfig+0x25c>)
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d004      	beq.n	8005fae <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	6a1a      	ldr	r2, [r3, #32]
 8005fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005faa:	4313      	orrs	r3, r2
 8005fac:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8005fb8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	f023 000f 	bic.w	r0, r3, #15
 8005fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	ea40 0301 	orr.w	r3, r0, r1
 8005fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b6f      	ldr	r3, [pc, #444]	; (80061a0 <UART_SetConfig+0x260>)
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d102      	bne.n	8005fee <UART_SetConfig+0xae>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fec:	e01a      	b.n	8006024 <UART_SetConfig+0xe4>
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b6c      	ldr	r3, [pc, #432]	; (80061a4 <UART_SetConfig+0x264>)
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d102      	bne.n	8005ffe <UART_SetConfig+0xbe>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ffc:	e012      	b.n	8006024 <UART_SetConfig+0xe4>
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b69      	ldr	r3, [pc, #420]	; (80061a8 <UART_SetConfig+0x268>)
 8006004:	429a      	cmp	r2, r3
 8006006:	d102      	bne.n	800600e <UART_SetConfig+0xce>
 8006008:	2304      	movs	r3, #4
 800600a:	64bb      	str	r3, [r7, #72]	; 0x48
 800600c:	e00a      	b.n	8006024 <UART_SetConfig+0xe4>
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4b62      	ldr	r3, [pc, #392]	; (800619c <UART_SetConfig+0x25c>)
 8006014:	429a      	cmp	r2, r3
 8006016:	d103      	bne.n	8006020 <UART_SetConfig+0xe0>
 8006018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800601c:	64bb      	str	r3, [r7, #72]	; 0x48
 800601e:	e001      	b.n	8006024 <UART_SetConfig+0xe4>
 8006020:	2300      	movs	r3, #0
 8006022:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4b5c      	ldr	r3, [pc, #368]	; (800619c <UART_SetConfig+0x25c>)
 800602a:	429a      	cmp	r2, r3
 800602c:	d171      	bne.n	8006112 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800602e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006030:	2200      	movs	r2, #0
 8006032:	623b      	str	r3, [r7, #32]
 8006034:	627a      	str	r2, [r7, #36]	; 0x24
 8006036:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800603a:	f7fe fec1 	bl	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq>
 800603e:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 80e2 	beq.w	800620c <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	4a57      	ldr	r2, [pc, #348]	; (80061ac <UART_SetConfig+0x26c>)
 800604e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006052:	461a      	mov	r2, r3
 8006054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006056:	fbb3 f3f2 	udiv	r3, r3, r2
 800605a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800605c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	4613      	mov	r3, r2
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	4413      	add	r3, r2
 8006066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006068:	429a      	cmp	r2, r3
 800606a:	d305      	bcc.n	8006078 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006074:	429a      	cmp	r2, r3
 8006076:	d903      	bls.n	8006080 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800607e:	e0c5      	b.n	800620c <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006082:	2200      	movs	r2, #0
 8006084:	61bb      	str	r3, [r7, #24]
 8006086:	61fa      	str	r2, [r7, #28]
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	4a47      	ldr	r2, [pc, #284]	; (80061ac <UART_SetConfig+0x26c>)
 800608e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006092:	b29b      	uxth	r3, r3
 8006094:	2200      	movs	r2, #0
 8006096:	613b      	str	r3, [r7, #16]
 8006098:	617a      	str	r2, [r7, #20]
 800609a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800609e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80060a2:	f7fa f8f9 	bl	8000298 <__aeabi_uldivmod>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4610      	mov	r0, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	f04f 0200 	mov.w	r2, #0
 80060b2:	f04f 0300 	mov.w	r3, #0
 80060b6:	020b      	lsls	r3, r1, #8
 80060b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060bc:	0202      	lsls	r2, r0, #8
 80060be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060c0:	6849      	ldr	r1, [r1, #4]
 80060c2:	0849      	lsrs	r1, r1, #1
 80060c4:	2000      	movs	r0, #0
 80060c6:	460c      	mov	r4, r1
 80060c8:	4605      	mov	r5, r0
 80060ca:	eb12 0804 	adds.w	r8, r2, r4
 80060ce:	eb43 0905 	adc.w	r9, r3, r5
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	60bb      	str	r3, [r7, #8]
 80060da:	60fa      	str	r2, [r7, #12]
 80060dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060e0:	4640      	mov	r0, r8
 80060e2:	4649      	mov	r1, r9
 80060e4:	f7fa f8d8 	bl	8000298 <__aeabi_uldivmod>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4613      	mov	r3, r2
 80060ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060f6:	d308      	bcc.n	800610a <UART_SetConfig+0x1ca>
 80060f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060fe:	d204      	bcs.n	800610a <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006106:	60da      	str	r2, [r3, #12]
 8006108:	e080      	b.n	800620c <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006110:	e07c      	b.n	800620c <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611a:	d149      	bne.n	80061b0 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800611c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800611e:	2200      	movs	r2, #0
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006128:	f7fe fe4a 	bl	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq>
 800612c:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800612e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d06b      	beq.n	800620c <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	4a1c      	ldr	r2, [pc, #112]	; (80061ac <UART_SetConfig+0x26c>)
 800613a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800613e:	461a      	mov	r2, r3
 8006140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006142:	fbb3 f3f2 	udiv	r3, r3, r2
 8006146:	005a      	lsls	r2, r3, #1
 8006148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	085b      	lsrs	r3, r3, #1
 800614e:	441a      	add	r2, r3
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	fbb2 f3f3 	udiv	r3, r2, r3
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800615a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615c:	2b0f      	cmp	r3, #15
 800615e:	d916      	bls.n	800618e <UART_SetConfig+0x24e>
 8006160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006166:	d212      	bcs.n	800618e <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616a:	b29b      	uxth	r3, r3
 800616c:	f023 030f 	bic.w	r3, r3, #15
 8006170:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006174:	085b      	lsrs	r3, r3, #1
 8006176:	b29b      	uxth	r3, r3
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	b29a      	uxth	r2, r3
 800617e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006180:	4313      	orrs	r3, r2
 8006182:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800618a:	60da      	str	r2, [r3, #12]
 800618c:	e03e      	b.n	800620c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006194:	e03a      	b.n	800620c <UART_SetConfig+0x2cc>
 8006196:	bf00      	nop
 8006198:	cfff69f3 	.word	0xcfff69f3
 800619c:	44002400 	.word	0x44002400
 80061a0:	40013800 	.word	0x40013800
 80061a4:	40004400 	.word	0x40004400
 80061a8:	40004800 	.word	0x40004800
 80061ac:	08007c04 	.word	0x08007c04
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80061b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b2:	2200      	movs	r2, #0
 80061b4:	469a      	mov	sl, r3
 80061b6:	4693      	mov	fp, r2
 80061b8:	4650      	mov	r0, sl
 80061ba:	4659      	mov	r1, fp
 80061bc:	f7fe fe00 	bl	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq>
 80061c0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80061c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d021      	beq.n	800620c <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	4a1a      	ldr	r2, [pc, #104]	; (8006238 <UART_SetConfig+0x2f8>)
 80061ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d2:	461a      	mov	r2, r3
 80061d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	441a      	add	r2, r3
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ee:	2b0f      	cmp	r3, #15
 80061f0:	d909      	bls.n	8006206 <UART_SetConfig+0x2c6>
 80061f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f8:	d205      	bcs.n	8006206 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60da      	str	r2, [r3, #12]
 8006204:	e002      	b.n	800620c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620e:	2201      	movs	r2, #1
 8006210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	2201      	movs	r2, #1
 8006218:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	2200      	movs	r2, #0
 8006220:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	2200      	movs	r2, #0
 8006226:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006228:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800622c:	4618      	mov	r0, r3
 800622e:	3750      	adds	r7, #80	; 0x50
 8006230:	46bd      	mov	sp, r7
 8006232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006236:	bf00      	nop
 8006238:	08007c04 	.word	0x08007c04

0800623c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	f003 0310 	and.w	r3, r3, #16
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01a      	beq.n	8006352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800633a:	d10a      	bne.n	8006352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	605a      	str	r2, [r3, #4]
  }
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b098      	sub	sp, #96	; 0x60
 8006384:	af02      	add	r7, sp, #8
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006390:	f7fb f8d6 	bl	8001540 <HAL_GetTick>
 8006394:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d12f      	bne.n	8006404 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ac:	2200      	movs	r2, #0
 80063ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f88e 	bl	80064d4 <UART_WaitOnFlagUntilTimeout>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d022      	beq.n	8006404 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063d2:	653b      	str	r3, [r7, #80]	; 0x50
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063dc:	647b      	str	r3, [r7, #68]	; 0x44
 80063de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e6      	bne.n	80063be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e063      	b.n	80064cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0304 	and.w	r3, r3, #4
 800640e:	2b04      	cmp	r3, #4
 8006410:	d149      	bne.n	80064a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006412:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800641a:	2200      	movs	r2, #0
 800641c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f857 	bl	80064d4 <UART_WaitOnFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d03c      	beq.n	80064a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	623b      	str	r3, [r7, #32]
   return(result);
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006440:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644a:	633b      	str	r3, [r7, #48]	; 0x30
 800644c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e6      	bne.n	800642c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	60fb      	str	r3, [r7, #12]
   return(result);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	64bb      	str	r3, [r7, #72]	; 0x48
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3308      	adds	r3, #8
 800647c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800647e:	61fa      	str	r2, [r7, #28]
 8006480:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	69b9      	ldr	r1, [r7, #24]
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	617b      	str	r3, [r7, #20]
   return(result);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e5      	bne.n	800645e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e012      	b.n	80064cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3758      	adds	r7, #88	; 0x58
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e4:	e049      	b.n	800657a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ec:	d045      	beq.n	800657a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ee:	f7fb f827 	bl	8001540 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d302      	bcc.n	8006504 <UART_WaitOnFlagUntilTimeout+0x30>
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e048      	b.n	800659a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	d031      	beq.n	800657a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	2b08      	cmp	r3, #8
 8006522:	d110      	bne.n	8006546 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2208      	movs	r2, #8
 800652a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f838 	bl	80065a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2208      	movs	r2, #8
 8006536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e029      	b.n	800659a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006554:	d111      	bne.n	800657a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800655e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 f81e 	bl	80065a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2220      	movs	r2, #32
 800656a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e00f      	b.n	800659a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4013      	ands	r3, r2
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	429a      	cmp	r2, r3
 8006588:	bf0c      	ite	eq
 800658a:	2301      	moveq	r3, #1
 800658c:	2300      	movne	r3, #0
 800658e:	b2db      	uxtb	r3, r3
 8006590:	461a      	mov	r2, r3
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	429a      	cmp	r2, r3
 8006596:	d0a6      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b095      	sub	sp, #84	; 0x54
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c8:	643b      	str	r3, [r7, #64]	; 0x40
 80065ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e6      	bne.n	80065aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3308      	adds	r3, #8
 80065e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	e853 3f00 	ldrex	r3, [r3]
 80065ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065f2:	f023 0301 	bic.w	r3, r3, #1
 80065f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3308      	adds	r3, #8
 80065fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006600:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e3      	bne.n	80065dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d118      	bne.n	800664e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	60bb      	str	r3, [r7, #8]
   return(result);
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f023 0310 	bic.w	r3, r3, #16
 8006630:	647b      	str	r3, [r7, #68]	; 0x44
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800663a:	61bb      	str	r3, [r7, #24]
 800663c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	6979      	ldr	r1, [r7, #20]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	613b      	str	r3, [r7, #16]
   return(result);
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e6      	bne.n	800661c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2220      	movs	r2, #32
 8006652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006662:	bf00      	nop
 8006664:	3754      	adds	r7, #84	; 0x54
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_UARTEx_DisableFifoMode+0x16>
 8006680:	2302      	movs	r3, #2
 8006682:	e027      	b.n	80066d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2224      	movs	r2, #36	; 0x24
 8006690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0201 	bic.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e02d      	b.n	8006754 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2224      	movs	r2, #36	; 0x24
 8006704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0201 	bic.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f84f 	bl	80067d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006770:	2302      	movs	r3, #2
 8006772:	e02d      	b.n	80067d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2224      	movs	r2, #36	; 0x24
 8006780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0201 	bic.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f811 	bl	80067d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d108      	bne.n	80067fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067f8:	e031      	b.n	800685e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067fa:	2308      	movs	r3, #8
 80067fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067fe:	2308      	movs	r3, #8
 8006800:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	0e5b      	lsrs	r3, r3, #25
 800680a:	b2db      	uxtb	r3, r3
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	0f5b      	lsrs	r3, r3, #29
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006822:	7bbb      	ldrb	r3, [r7, #14]
 8006824:	7b3a      	ldrb	r2, [r7, #12]
 8006826:	4911      	ldr	r1, [pc, #68]	; (800686c <UARTEx_SetNbDataToProcess+0x94>)
 8006828:	5c8a      	ldrb	r2, [r1, r2]
 800682a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800682e:	7b3a      	ldrb	r2, [r7, #12]
 8006830:	490f      	ldr	r1, [pc, #60]	; (8006870 <UARTEx_SetNbDataToProcess+0x98>)
 8006832:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006834:	fb93 f3f2 	sdiv	r3, r3, r2
 8006838:	b29a      	uxth	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	7b7a      	ldrb	r2, [r7, #13]
 8006844:	4909      	ldr	r1, [pc, #36]	; (800686c <UARTEx_SetNbDataToProcess+0x94>)
 8006846:	5c8a      	ldrb	r2, [r1, r2]
 8006848:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800684c:	7b7a      	ldrb	r2, [r7, #13]
 800684e:	4908      	ldr	r1, [pc, #32]	; (8006870 <UARTEx_SetNbDataToProcess+0x98>)
 8006850:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006852:	fb93 f3f2 	sdiv	r3, r3, r2
 8006856:	b29a      	uxth	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800685e:	bf00      	nop
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	08007c1c 	.word	0x08007c1c
 8006870:	08007c24 	.word	0x08007c24

08006874 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800687c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006880:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	43db      	mvns	r3, r3
 800688a:	401a      	ands	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 80068aa:	78fb      	ldrb	r3, [r7, #3]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	641a      	str	r2, [r3, #64]	; 0x40
 80068bc:	e00b      	b.n	80068d6 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d106      	bne.n	80068d2 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40
 80068d0:	e001      	b.n	80068d6 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e000      	b.n	80068d8 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 80068e4:	b084      	sub	sp, #16
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	f107 001c 	add.w	r0, r7, #28
 80068f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	f023 0201 	bic.w	r2, r3, #1
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8006908:	2100      	movs	r1, #0
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff ffc7 	bl	800689e <USB_SetCurrentMode>
 8006910:	4603      	mov	r3, r0
 8006912:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800691a:	7bfb      	ldrb	r3, [r7, #15]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006926:	b004      	add	sp, #16
 8006928:	4770      	bx	lr
	...

0800692c <__errno>:
 800692c:	4b01      	ldr	r3, [pc, #4]	; (8006934 <__errno+0x8>)
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	2000000c 	.word	0x2000000c

08006938 <__libc_init_array>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4d0d      	ldr	r5, [pc, #52]	; (8006970 <__libc_init_array+0x38>)
 800693c:	2600      	movs	r6, #0
 800693e:	4c0d      	ldr	r4, [pc, #52]	; (8006974 <__libc_init_array+0x3c>)
 8006940:	1b64      	subs	r4, r4, r5
 8006942:	10a4      	asrs	r4, r4, #2
 8006944:	42a6      	cmp	r6, r4
 8006946:	d109      	bne.n	800695c <__libc_init_array+0x24>
 8006948:	4d0b      	ldr	r5, [pc, #44]	; (8006978 <__libc_init_array+0x40>)
 800694a:	2600      	movs	r6, #0
 800694c:	4c0b      	ldr	r4, [pc, #44]	; (800697c <__libc_init_array+0x44>)
 800694e:	f001 f831 	bl	80079b4 <_init>
 8006952:	1b64      	subs	r4, r4, r5
 8006954:	10a4      	asrs	r4, r4, #2
 8006956:	42a6      	cmp	r6, r4
 8006958:	d105      	bne.n	8006966 <__libc_init_array+0x2e>
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006960:	3601      	adds	r6, #1
 8006962:	4798      	blx	r3
 8006964:	e7ee      	b.n	8006944 <__libc_init_array+0xc>
 8006966:	f855 3b04 	ldr.w	r3, [r5], #4
 800696a:	3601      	adds	r6, #1
 800696c:	4798      	blx	r3
 800696e:	e7f2      	b.n	8006956 <__libc_init_array+0x1e>
 8006970:	08007ccc 	.word	0x08007ccc
 8006974:	08007ccc 	.word	0x08007ccc
 8006978:	08007ccc 	.word	0x08007ccc
 800697c:	08007cd0 	.word	0x08007cd0

08006980 <memset>:
 8006980:	4402      	add	r2, r0
 8006982:	4603      	mov	r3, r0
 8006984:	4293      	cmp	r3, r2
 8006986:	d100      	bne.n	800698a <memset+0xa>
 8006988:	4770      	bx	lr
 800698a:	f803 1b01 	strb.w	r1, [r3], #1
 800698e:	e7f9      	b.n	8006984 <memset+0x4>

08006990 <iprintf>:
 8006990:	b40f      	push	{r0, r1, r2, r3}
 8006992:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <iprintf+0x2c>)
 8006994:	b513      	push	{r0, r1, r4, lr}
 8006996:	681c      	ldr	r4, [r3, #0]
 8006998:	b124      	cbz	r4, 80069a4 <iprintf+0x14>
 800699a:	69a3      	ldr	r3, [r4, #24]
 800699c:	b913      	cbnz	r3, 80069a4 <iprintf+0x14>
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 fa5c 	bl	8006e5c <__sinit>
 80069a4:	ab05      	add	r3, sp, #20
 80069a6:	9a04      	ldr	r2, [sp, #16]
 80069a8:	68a1      	ldr	r1, [r4, #8]
 80069aa:	4620      	mov	r0, r4
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	f000 fc65 	bl	800727c <_vfiprintf_r>
 80069b2:	b002      	add	sp, #8
 80069b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069b8:	b004      	add	sp, #16
 80069ba:	4770      	bx	lr
 80069bc:	2000000c 	.word	0x2000000c

080069c0 <_puts_r>:
 80069c0:	b570      	push	{r4, r5, r6, lr}
 80069c2:	460e      	mov	r6, r1
 80069c4:	4605      	mov	r5, r0
 80069c6:	b118      	cbz	r0, 80069d0 <_puts_r+0x10>
 80069c8:	6983      	ldr	r3, [r0, #24]
 80069ca:	b90b      	cbnz	r3, 80069d0 <_puts_r+0x10>
 80069cc:	f000 fa46 	bl	8006e5c <__sinit>
 80069d0:	69ab      	ldr	r3, [r5, #24]
 80069d2:	68ac      	ldr	r4, [r5, #8]
 80069d4:	b913      	cbnz	r3, 80069dc <_puts_r+0x1c>
 80069d6:	4628      	mov	r0, r5
 80069d8:	f000 fa40 	bl	8006e5c <__sinit>
 80069dc:	4b2c      	ldr	r3, [pc, #176]	; (8006a90 <_puts_r+0xd0>)
 80069de:	429c      	cmp	r4, r3
 80069e0:	d120      	bne.n	8006a24 <_puts_r+0x64>
 80069e2:	686c      	ldr	r4, [r5, #4]
 80069e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069e6:	07db      	lsls	r3, r3, #31
 80069e8:	d405      	bmi.n	80069f6 <_puts_r+0x36>
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	0598      	lsls	r0, r3, #22
 80069ee:	d402      	bmi.n	80069f6 <_puts_r+0x36>
 80069f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069f2:	f000 fad1 	bl	8006f98 <__retarget_lock_acquire_recursive>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	0719      	lsls	r1, r3, #28
 80069fa:	d51d      	bpl.n	8006a38 <_puts_r+0x78>
 80069fc:	6923      	ldr	r3, [r4, #16]
 80069fe:	b1db      	cbz	r3, 8006a38 <_puts_r+0x78>
 8006a00:	3e01      	subs	r6, #1
 8006a02:	68a3      	ldr	r3, [r4, #8]
 8006a04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	60a3      	str	r3, [r4, #8]
 8006a0c:	bb39      	cbnz	r1, 8006a5e <_puts_r+0x9e>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	da38      	bge.n	8006a84 <_puts_r+0xc4>
 8006a12:	4622      	mov	r2, r4
 8006a14:	210a      	movs	r1, #10
 8006a16:	4628      	mov	r0, r5
 8006a18:	f000 f848 	bl	8006aac <__swbuf_r>
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d011      	beq.n	8006a44 <_puts_r+0x84>
 8006a20:	250a      	movs	r5, #10
 8006a22:	e011      	b.n	8006a48 <_puts_r+0x88>
 8006a24:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <_puts_r+0xd4>)
 8006a26:	429c      	cmp	r4, r3
 8006a28:	d101      	bne.n	8006a2e <_puts_r+0x6e>
 8006a2a:	68ac      	ldr	r4, [r5, #8]
 8006a2c:	e7da      	b.n	80069e4 <_puts_r+0x24>
 8006a2e:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <_puts_r+0xd8>)
 8006a30:	429c      	cmp	r4, r3
 8006a32:	bf08      	it	eq
 8006a34:	68ec      	ldreq	r4, [r5, #12]
 8006a36:	e7d5      	b.n	80069e4 <_puts_r+0x24>
 8006a38:	4621      	mov	r1, r4
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f000 f888 	bl	8006b50 <__swsetup_r>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d0dd      	beq.n	8006a00 <_puts_r+0x40>
 8006a44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a4a:	07da      	lsls	r2, r3, #31
 8006a4c:	d405      	bmi.n	8006a5a <_puts_r+0x9a>
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	059b      	lsls	r3, r3, #22
 8006a52:	d402      	bmi.n	8006a5a <_puts_r+0x9a>
 8006a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a56:	f000 faa0 	bl	8006f9a <__retarget_lock_release_recursive>
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	da04      	bge.n	8006a6c <_puts_r+0xac>
 8006a62:	69a2      	ldr	r2, [r4, #24]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	dc06      	bgt.n	8006a76 <_puts_r+0xb6>
 8006a68:	290a      	cmp	r1, #10
 8006a6a:	d004      	beq.n	8006a76 <_puts_r+0xb6>
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	6022      	str	r2, [r4, #0]
 8006a72:	7019      	strb	r1, [r3, #0]
 8006a74:	e7c5      	b.n	8006a02 <_puts_r+0x42>
 8006a76:	4622      	mov	r2, r4
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f000 f817 	bl	8006aac <__swbuf_r>
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d1bf      	bne.n	8006a02 <_puts_r+0x42>
 8006a82:	e7df      	b.n	8006a44 <_puts_r+0x84>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	250a      	movs	r5, #10
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	6022      	str	r2, [r4, #0]
 8006a8c:	701d      	strb	r5, [r3, #0]
 8006a8e:	e7db      	b.n	8006a48 <_puts_r+0x88>
 8006a90:	08007c50 	.word	0x08007c50
 8006a94:	08007c70 	.word	0x08007c70
 8006a98:	08007c30 	.word	0x08007c30

08006a9c <puts>:
 8006a9c:	4b02      	ldr	r3, [pc, #8]	; (8006aa8 <puts+0xc>)
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	f7ff bf8d 	b.w	80069c0 <_puts_r>
 8006aa6:	bf00      	nop
 8006aa8:	2000000c 	.word	0x2000000c

08006aac <__swbuf_r>:
 8006aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aae:	460e      	mov	r6, r1
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	b118      	cbz	r0, 8006abe <__swbuf_r+0x12>
 8006ab6:	6983      	ldr	r3, [r0, #24]
 8006ab8:	b90b      	cbnz	r3, 8006abe <__swbuf_r+0x12>
 8006aba:	f000 f9cf 	bl	8006e5c <__sinit>
 8006abe:	4b21      	ldr	r3, [pc, #132]	; (8006b44 <__swbuf_r+0x98>)
 8006ac0:	429c      	cmp	r4, r3
 8006ac2:	d12b      	bne.n	8006b1c <__swbuf_r+0x70>
 8006ac4:	686c      	ldr	r4, [r5, #4]
 8006ac6:	69a3      	ldr	r3, [r4, #24]
 8006ac8:	60a3      	str	r3, [r4, #8]
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	071a      	lsls	r2, r3, #28
 8006ace:	d52f      	bpl.n	8006b30 <__swbuf_r+0x84>
 8006ad0:	6923      	ldr	r3, [r4, #16]
 8006ad2:	b36b      	cbz	r3, 8006b30 <__swbuf_r+0x84>
 8006ad4:	6923      	ldr	r3, [r4, #16]
 8006ad6:	b2f6      	uxtb	r6, r6
 8006ad8:	6820      	ldr	r0, [r4, #0]
 8006ada:	4637      	mov	r7, r6
 8006adc:	1ac0      	subs	r0, r0, r3
 8006ade:	6963      	ldr	r3, [r4, #20]
 8006ae0:	4283      	cmp	r3, r0
 8006ae2:	dc04      	bgt.n	8006aee <__swbuf_r+0x42>
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f000 f924 	bl	8006d34 <_fflush_r>
 8006aec:	bb30      	cbnz	r0, 8006b3c <__swbuf_r+0x90>
 8006aee:	68a3      	ldr	r3, [r4, #8]
 8006af0:	3001      	adds	r0, #1
 8006af2:	3b01      	subs	r3, #1
 8006af4:	60a3      	str	r3, [r4, #8]
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	6022      	str	r2, [r4, #0]
 8006afc:	701e      	strb	r6, [r3, #0]
 8006afe:	6963      	ldr	r3, [r4, #20]
 8006b00:	4283      	cmp	r3, r0
 8006b02:	d004      	beq.n	8006b0e <__swbuf_r+0x62>
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	07db      	lsls	r3, r3, #31
 8006b08:	d506      	bpl.n	8006b18 <__swbuf_r+0x6c>
 8006b0a:	2e0a      	cmp	r6, #10
 8006b0c:	d104      	bne.n	8006b18 <__swbuf_r+0x6c>
 8006b0e:	4621      	mov	r1, r4
 8006b10:	4628      	mov	r0, r5
 8006b12:	f000 f90f 	bl	8006d34 <_fflush_r>
 8006b16:	b988      	cbnz	r0, 8006b3c <__swbuf_r+0x90>
 8006b18:	4638      	mov	r0, r7
 8006b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <__swbuf_r+0x9c>)
 8006b1e:	429c      	cmp	r4, r3
 8006b20:	d101      	bne.n	8006b26 <__swbuf_r+0x7a>
 8006b22:	68ac      	ldr	r4, [r5, #8]
 8006b24:	e7cf      	b.n	8006ac6 <__swbuf_r+0x1a>
 8006b26:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <__swbuf_r+0xa0>)
 8006b28:	429c      	cmp	r4, r3
 8006b2a:	bf08      	it	eq
 8006b2c:	68ec      	ldreq	r4, [r5, #12]
 8006b2e:	e7ca      	b.n	8006ac6 <__swbuf_r+0x1a>
 8006b30:	4621      	mov	r1, r4
 8006b32:	4628      	mov	r0, r5
 8006b34:	f000 f80c 	bl	8006b50 <__swsetup_r>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d0cb      	beq.n	8006ad4 <__swbuf_r+0x28>
 8006b3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006b40:	e7ea      	b.n	8006b18 <__swbuf_r+0x6c>
 8006b42:	bf00      	nop
 8006b44:	08007c50 	.word	0x08007c50
 8006b48:	08007c70 	.word	0x08007c70
 8006b4c:	08007c30 	.word	0x08007c30

08006b50 <__swsetup_r>:
 8006b50:	4b32      	ldr	r3, [pc, #200]	; (8006c1c <__swsetup_r+0xcc>)
 8006b52:	b570      	push	{r4, r5, r6, lr}
 8006b54:	681d      	ldr	r5, [r3, #0]
 8006b56:	4606      	mov	r6, r0
 8006b58:	460c      	mov	r4, r1
 8006b5a:	b125      	cbz	r5, 8006b66 <__swsetup_r+0x16>
 8006b5c:	69ab      	ldr	r3, [r5, #24]
 8006b5e:	b913      	cbnz	r3, 8006b66 <__swsetup_r+0x16>
 8006b60:	4628      	mov	r0, r5
 8006b62:	f000 f97b 	bl	8006e5c <__sinit>
 8006b66:	4b2e      	ldr	r3, [pc, #184]	; (8006c20 <__swsetup_r+0xd0>)
 8006b68:	429c      	cmp	r4, r3
 8006b6a:	d10f      	bne.n	8006b8c <__swsetup_r+0x3c>
 8006b6c:	686c      	ldr	r4, [r5, #4]
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b74:	0719      	lsls	r1, r3, #28
 8006b76:	d42c      	bmi.n	8006bd2 <__swsetup_r+0x82>
 8006b78:	06dd      	lsls	r5, r3, #27
 8006b7a:	d411      	bmi.n	8006ba0 <__swsetup_r+0x50>
 8006b7c:	2309      	movs	r3, #9
 8006b7e:	6033      	str	r3, [r6, #0]
 8006b80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b88:	81a3      	strh	r3, [r4, #12]
 8006b8a:	e03e      	b.n	8006c0a <__swsetup_r+0xba>
 8006b8c:	4b25      	ldr	r3, [pc, #148]	; (8006c24 <__swsetup_r+0xd4>)
 8006b8e:	429c      	cmp	r4, r3
 8006b90:	d101      	bne.n	8006b96 <__swsetup_r+0x46>
 8006b92:	68ac      	ldr	r4, [r5, #8]
 8006b94:	e7eb      	b.n	8006b6e <__swsetup_r+0x1e>
 8006b96:	4b24      	ldr	r3, [pc, #144]	; (8006c28 <__swsetup_r+0xd8>)
 8006b98:	429c      	cmp	r4, r3
 8006b9a:	bf08      	it	eq
 8006b9c:	68ec      	ldreq	r4, [r5, #12]
 8006b9e:	e7e6      	b.n	8006b6e <__swsetup_r+0x1e>
 8006ba0:	0758      	lsls	r0, r3, #29
 8006ba2:	d512      	bpl.n	8006bca <__swsetup_r+0x7a>
 8006ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ba6:	b141      	cbz	r1, 8006bba <__swsetup_r+0x6a>
 8006ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bac:	4299      	cmp	r1, r3
 8006bae:	d002      	beq.n	8006bb6 <__swsetup_r+0x66>
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f000 fa59 	bl	8007068 <_free_r>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	6363      	str	r3, [r4, #52]	; 0x34
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bc0:	81a3      	strh	r3, [r4, #12]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	6063      	str	r3, [r4, #4]
 8006bc6:	6923      	ldr	r3, [r4, #16]
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	f043 0308 	orr.w	r3, r3, #8
 8006bd0:	81a3      	strh	r3, [r4, #12]
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	b94b      	cbnz	r3, 8006bea <__swsetup_r+0x9a>
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be0:	d003      	beq.n	8006bea <__swsetup_r+0x9a>
 8006be2:	4621      	mov	r1, r4
 8006be4:	4630      	mov	r0, r6
 8006be6:	f000 f9ff 	bl	8006fe8 <__smakebuf_r>
 8006bea:	89a0      	ldrh	r0, [r4, #12]
 8006bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bf0:	f010 0301 	ands.w	r3, r0, #1
 8006bf4:	d00a      	beq.n	8006c0c <__swsetup_r+0xbc>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60a3      	str	r3, [r4, #8]
 8006bfa:	6963      	ldr	r3, [r4, #20]
 8006bfc:	425b      	negs	r3, r3
 8006bfe:	61a3      	str	r3, [r4, #24]
 8006c00:	6923      	ldr	r3, [r4, #16]
 8006c02:	b943      	cbnz	r3, 8006c16 <__swsetup_r+0xc6>
 8006c04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c08:	d1ba      	bne.n	8006b80 <__swsetup_r+0x30>
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	0781      	lsls	r1, r0, #30
 8006c0e:	bf58      	it	pl
 8006c10:	6963      	ldrpl	r3, [r4, #20]
 8006c12:	60a3      	str	r3, [r4, #8]
 8006c14:	e7f4      	b.n	8006c00 <__swsetup_r+0xb0>
 8006c16:	2000      	movs	r0, #0
 8006c18:	e7f7      	b.n	8006c0a <__swsetup_r+0xba>
 8006c1a:	bf00      	nop
 8006c1c:	2000000c 	.word	0x2000000c
 8006c20:	08007c50 	.word	0x08007c50
 8006c24:	08007c70 	.word	0x08007c70
 8006c28:	08007c30 	.word	0x08007c30

08006c2c <__sflush_r>:
 8006c2c:	898a      	ldrh	r2, [r1, #12]
 8006c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c32:	4605      	mov	r5, r0
 8006c34:	0710      	lsls	r0, r2, #28
 8006c36:	460c      	mov	r4, r1
 8006c38:	d458      	bmi.n	8006cec <__sflush_r+0xc0>
 8006c3a:	684b      	ldr	r3, [r1, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	dc05      	bgt.n	8006c4c <__sflush_r+0x20>
 8006c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	dc02      	bgt.n	8006c4c <__sflush_r+0x20>
 8006c46:	2000      	movs	r0, #0
 8006c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c4e:	2e00      	cmp	r6, #0
 8006c50:	d0f9      	beq.n	8006c46 <__sflush_r+0x1a>
 8006c52:	2300      	movs	r3, #0
 8006c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c58:	682f      	ldr	r7, [r5, #0]
 8006c5a:	602b      	str	r3, [r5, #0]
 8006c5c:	d032      	beq.n	8006cc4 <__sflush_r+0x98>
 8006c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	075a      	lsls	r2, r3, #29
 8006c64:	d505      	bpl.n	8006c72 <__sflush_r+0x46>
 8006c66:	6863      	ldr	r3, [r4, #4]
 8006c68:	1ac0      	subs	r0, r0, r3
 8006c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c6c:	b10b      	cbz	r3, 8006c72 <__sflush_r+0x46>
 8006c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c70:	1ac0      	subs	r0, r0, r3
 8006c72:	2300      	movs	r3, #0
 8006c74:	4602      	mov	r2, r0
 8006c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c78:	4628      	mov	r0, r5
 8006c7a:	6a21      	ldr	r1, [r4, #32]
 8006c7c:	47b0      	blx	r6
 8006c7e:	1c43      	adds	r3, r0, #1
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	d106      	bne.n	8006c92 <__sflush_r+0x66>
 8006c84:	6829      	ldr	r1, [r5, #0]
 8006c86:	291d      	cmp	r1, #29
 8006c88:	d82c      	bhi.n	8006ce4 <__sflush_r+0xb8>
 8006c8a:	4a29      	ldr	r2, [pc, #164]	; (8006d30 <__sflush_r+0x104>)
 8006c8c:	40ca      	lsrs	r2, r1
 8006c8e:	07d6      	lsls	r6, r2, #31
 8006c90:	d528      	bpl.n	8006ce4 <__sflush_r+0xb8>
 8006c92:	2200      	movs	r2, #0
 8006c94:	04d9      	lsls	r1, r3, #19
 8006c96:	6062      	str	r2, [r4, #4]
 8006c98:	6922      	ldr	r2, [r4, #16]
 8006c9a:	6022      	str	r2, [r4, #0]
 8006c9c:	d504      	bpl.n	8006ca8 <__sflush_r+0x7c>
 8006c9e:	1c42      	adds	r2, r0, #1
 8006ca0:	d101      	bne.n	8006ca6 <__sflush_r+0x7a>
 8006ca2:	682b      	ldr	r3, [r5, #0]
 8006ca4:	b903      	cbnz	r3, 8006ca8 <__sflush_r+0x7c>
 8006ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006caa:	602f      	str	r7, [r5, #0]
 8006cac:	2900      	cmp	r1, #0
 8006cae:	d0ca      	beq.n	8006c46 <__sflush_r+0x1a>
 8006cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cb4:	4299      	cmp	r1, r3
 8006cb6:	d002      	beq.n	8006cbe <__sflush_r+0x92>
 8006cb8:	4628      	mov	r0, r5
 8006cba:	f000 f9d5 	bl	8007068 <_free_r>
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8006cc2:	e7c1      	b.n	8006c48 <__sflush_r+0x1c>
 8006cc4:	6a21      	ldr	r1, [r4, #32]
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b0      	blx	r6
 8006ccc:	1c41      	adds	r1, r0, #1
 8006cce:	d1c7      	bne.n	8006c60 <__sflush_r+0x34>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0c4      	beq.n	8006c60 <__sflush_r+0x34>
 8006cd6:	2b1d      	cmp	r3, #29
 8006cd8:	d001      	beq.n	8006cde <__sflush_r+0xb2>
 8006cda:	2b16      	cmp	r3, #22
 8006cdc:	d101      	bne.n	8006ce2 <__sflush_r+0xb6>
 8006cde:	602f      	str	r7, [r5, #0]
 8006ce0:	e7b1      	b.n	8006c46 <__sflush_r+0x1a>
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ce8:	81a3      	strh	r3, [r4, #12]
 8006cea:	e7ad      	b.n	8006c48 <__sflush_r+0x1c>
 8006cec:	690f      	ldr	r7, [r1, #16]
 8006cee:	2f00      	cmp	r7, #0
 8006cf0:	d0a9      	beq.n	8006c46 <__sflush_r+0x1a>
 8006cf2:	0793      	lsls	r3, r2, #30
 8006cf4:	680e      	ldr	r6, [r1, #0]
 8006cf6:	600f      	str	r7, [r1, #0]
 8006cf8:	bf0c      	ite	eq
 8006cfa:	694b      	ldreq	r3, [r1, #20]
 8006cfc:	2300      	movne	r3, #0
 8006cfe:	eba6 0807 	sub.w	r8, r6, r7
 8006d02:	608b      	str	r3, [r1, #8]
 8006d04:	f1b8 0f00 	cmp.w	r8, #0
 8006d08:	dd9d      	ble.n	8006c46 <__sflush_r+0x1a>
 8006d0a:	4643      	mov	r3, r8
 8006d0c:	463a      	mov	r2, r7
 8006d0e:	6a21      	ldr	r1, [r4, #32]
 8006d10:	4628      	mov	r0, r5
 8006d12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d14:	47b0      	blx	r6
 8006d16:	2800      	cmp	r0, #0
 8006d18:	dc06      	bgt.n	8006d28 <__sflush_r+0xfc>
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d24:	81a3      	strh	r3, [r4, #12]
 8006d26:	e78f      	b.n	8006c48 <__sflush_r+0x1c>
 8006d28:	4407      	add	r7, r0
 8006d2a:	eba8 0800 	sub.w	r8, r8, r0
 8006d2e:	e7e9      	b.n	8006d04 <__sflush_r+0xd8>
 8006d30:	20400001 	.word	0x20400001

08006d34 <_fflush_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	690b      	ldr	r3, [r1, #16]
 8006d38:	4605      	mov	r5, r0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	b913      	cbnz	r3, 8006d44 <_fflush_r+0x10>
 8006d3e:	2500      	movs	r5, #0
 8006d40:	4628      	mov	r0, r5
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	b118      	cbz	r0, 8006d4e <_fflush_r+0x1a>
 8006d46:	6983      	ldr	r3, [r0, #24]
 8006d48:	b90b      	cbnz	r3, 8006d4e <_fflush_r+0x1a>
 8006d4a:	f000 f887 	bl	8006e5c <__sinit>
 8006d4e:	4b14      	ldr	r3, [pc, #80]	; (8006da0 <_fflush_r+0x6c>)
 8006d50:	429c      	cmp	r4, r3
 8006d52:	d11b      	bne.n	8006d8c <_fflush_r+0x58>
 8006d54:	686c      	ldr	r4, [r5, #4]
 8006d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0ef      	beq.n	8006d3e <_fflush_r+0xa>
 8006d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d60:	07d0      	lsls	r0, r2, #31
 8006d62:	d404      	bmi.n	8006d6e <_fflush_r+0x3a>
 8006d64:	0599      	lsls	r1, r3, #22
 8006d66:	d402      	bmi.n	8006d6e <_fflush_r+0x3a>
 8006d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d6a:	f000 f915 	bl	8006f98 <__retarget_lock_acquire_recursive>
 8006d6e:	4628      	mov	r0, r5
 8006d70:	4621      	mov	r1, r4
 8006d72:	f7ff ff5b 	bl	8006c2c <__sflush_r>
 8006d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d78:	4605      	mov	r5, r0
 8006d7a:	07da      	lsls	r2, r3, #31
 8006d7c:	d4e0      	bmi.n	8006d40 <_fflush_r+0xc>
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	059b      	lsls	r3, r3, #22
 8006d82:	d4dd      	bmi.n	8006d40 <_fflush_r+0xc>
 8006d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d86:	f000 f908 	bl	8006f9a <__retarget_lock_release_recursive>
 8006d8a:	e7d9      	b.n	8006d40 <_fflush_r+0xc>
 8006d8c:	4b05      	ldr	r3, [pc, #20]	; (8006da4 <_fflush_r+0x70>)
 8006d8e:	429c      	cmp	r4, r3
 8006d90:	d101      	bne.n	8006d96 <_fflush_r+0x62>
 8006d92:	68ac      	ldr	r4, [r5, #8]
 8006d94:	e7df      	b.n	8006d56 <_fflush_r+0x22>
 8006d96:	4b04      	ldr	r3, [pc, #16]	; (8006da8 <_fflush_r+0x74>)
 8006d98:	429c      	cmp	r4, r3
 8006d9a:	bf08      	it	eq
 8006d9c:	68ec      	ldreq	r4, [r5, #12]
 8006d9e:	e7da      	b.n	8006d56 <_fflush_r+0x22>
 8006da0:	08007c50 	.word	0x08007c50
 8006da4:	08007c70 	.word	0x08007c70
 8006da8:	08007c30 	.word	0x08007c30

08006dac <std>:
 8006dac:	2300      	movs	r3, #0
 8006dae:	b510      	push	{r4, lr}
 8006db0:	4604      	mov	r4, r0
 8006db2:	6083      	str	r3, [r0, #8]
 8006db4:	8181      	strh	r1, [r0, #12]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6643      	str	r3, [r0, #100]	; 0x64
 8006dba:	81c2      	strh	r2, [r0, #14]
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	6183      	str	r3, [r0, #24]
 8006dc0:	e9c0 3300 	strd	r3, r3, [r0]
 8006dc4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dc8:	305c      	adds	r0, #92	; 0x5c
 8006dca:	f7ff fdd9 	bl	8006980 <memset>
 8006dce:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <std+0x38>)
 8006dd0:	6224      	str	r4, [r4, #32]
 8006dd2:	6263      	str	r3, [r4, #36]	; 0x24
 8006dd4:	4b04      	ldr	r3, [pc, #16]	; (8006de8 <std+0x3c>)
 8006dd6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006dd8:	4b04      	ldr	r3, [pc, #16]	; (8006dec <std+0x40>)
 8006dda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ddc:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <std+0x44>)
 8006dde:	6323      	str	r3, [r4, #48]	; 0x30
 8006de0:	bd10      	pop	{r4, pc}
 8006de2:	bf00      	nop
 8006de4:	08007829 	.word	0x08007829
 8006de8:	0800784b 	.word	0x0800784b
 8006dec:	08007883 	.word	0x08007883
 8006df0:	080078a7 	.word	0x080078a7

08006df4 <_cleanup_r>:
 8006df4:	4901      	ldr	r1, [pc, #4]	; (8006dfc <_cleanup_r+0x8>)
 8006df6:	f000 b8af 	b.w	8006f58 <_fwalk_reent>
 8006dfa:	bf00      	nop
 8006dfc:	08006d35 	.word	0x08006d35

08006e00 <__sfmoreglue>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	2268      	movs	r2, #104	; 0x68
 8006e04:	1e4d      	subs	r5, r1, #1
 8006e06:	460e      	mov	r6, r1
 8006e08:	4355      	muls	r5, r2
 8006e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e0e:	f000 f997 	bl	8007140 <_malloc_r>
 8006e12:	4604      	mov	r4, r0
 8006e14:	b140      	cbz	r0, 8006e28 <__sfmoreglue+0x28>
 8006e16:	2100      	movs	r1, #0
 8006e18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e1c:	e9c0 1600 	strd	r1, r6, [r0]
 8006e20:	300c      	adds	r0, #12
 8006e22:	60a0      	str	r0, [r4, #8]
 8006e24:	f7ff fdac 	bl	8006980 <memset>
 8006e28:	4620      	mov	r0, r4
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}

08006e2c <__sfp_lock_acquire>:
 8006e2c:	4801      	ldr	r0, [pc, #4]	; (8006e34 <__sfp_lock_acquire+0x8>)
 8006e2e:	f000 b8b3 	b.w	8006f98 <__retarget_lock_acquire_recursive>
 8006e32:	bf00      	nop
 8006e34:	200005b5 	.word	0x200005b5

08006e38 <__sfp_lock_release>:
 8006e38:	4801      	ldr	r0, [pc, #4]	; (8006e40 <__sfp_lock_release+0x8>)
 8006e3a:	f000 b8ae 	b.w	8006f9a <__retarget_lock_release_recursive>
 8006e3e:	bf00      	nop
 8006e40:	200005b5 	.word	0x200005b5

08006e44 <__sinit_lock_acquire>:
 8006e44:	4801      	ldr	r0, [pc, #4]	; (8006e4c <__sinit_lock_acquire+0x8>)
 8006e46:	f000 b8a7 	b.w	8006f98 <__retarget_lock_acquire_recursive>
 8006e4a:	bf00      	nop
 8006e4c:	200005b6 	.word	0x200005b6

08006e50 <__sinit_lock_release>:
 8006e50:	4801      	ldr	r0, [pc, #4]	; (8006e58 <__sinit_lock_release+0x8>)
 8006e52:	f000 b8a2 	b.w	8006f9a <__retarget_lock_release_recursive>
 8006e56:	bf00      	nop
 8006e58:	200005b6 	.word	0x200005b6

08006e5c <__sinit>:
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	4604      	mov	r4, r0
 8006e60:	f7ff fff0 	bl	8006e44 <__sinit_lock_acquire>
 8006e64:	69a3      	ldr	r3, [r4, #24]
 8006e66:	b11b      	cbz	r3, 8006e70 <__sinit+0x14>
 8006e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e6c:	f7ff bff0 	b.w	8006e50 <__sinit_lock_release>
 8006e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e74:	6523      	str	r3, [r4, #80]	; 0x50
 8006e76:	4620      	mov	r0, r4
 8006e78:	4b12      	ldr	r3, [pc, #72]	; (8006ec4 <__sinit+0x68>)
 8006e7a:	4a13      	ldr	r2, [pc, #76]	; (8006ec8 <__sinit+0x6c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	bf04      	itt	eq
 8006e84:	2301      	moveq	r3, #1
 8006e86:	61a3      	streq	r3, [r4, #24]
 8006e88:	f000 f820 	bl	8006ecc <__sfp>
 8006e8c:	6060      	str	r0, [r4, #4]
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f000 f81c 	bl	8006ecc <__sfp>
 8006e94:	60a0      	str	r0, [r4, #8]
 8006e96:	4620      	mov	r0, r4
 8006e98:	f000 f818 	bl	8006ecc <__sfp>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2104      	movs	r1, #4
 8006ea0:	60e0      	str	r0, [r4, #12]
 8006ea2:	6860      	ldr	r0, [r4, #4]
 8006ea4:	f7ff ff82 	bl	8006dac <std>
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	2109      	movs	r1, #9
 8006eac:	68a0      	ldr	r0, [r4, #8]
 8006eae:	f7ff ff7d 	bl	8006dac <std>
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	2112      	movs	r1, #18
 8006eb6:	68e0      	ldr	r0, [r4, #12]
 8006eb8:	f7ff ff78 	bl	8006dac <std>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	61a3      	str	r3, [r4, #24]
 8006ec0:	e7d2      	b.n	8006e68 <__sinit+0xc>
 8006ec2:	bf00      	nop
 8006ec4:	08007c2c 	.word	0x08007c2c
 8006ec8:	08006df5 	.word	0x08006df5

08006ecc <__sfp>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	4607      	mov	r7, r0
 8006ed0:	f7ff ffac 	bl	8006e2c <__sfp_lock_acquire>
 8006ed4:	4b1e      	ldr	r3, [pc, #120]	; (8006f50 <__sfp+0x84>)
 8006ed6:	681e      	ldr	r6, [r3, #0]
 8006ed8:	69b3      	ldr	r3, [r6, #24]
 8006eda:	b913      	cbnz	r3, 8006ee2 <__sfp+0x16>
 8006edc:	4630      	mov	r0, r6
 8006ede:	f7ff ffbd 	bl	8006e5c <__sinit>
 8006ee2:	3648      	adds	r6, #72	; 0x48
 8006ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	d503      	bpl.n	8006ef4 <__sfp+0x28>
 8006eec:	6833      	ldr	r3, [r6, #0]
 8006eee:	b30b      	cbz	r3, 8006f34 <__sfp+0x68>
 8006ef0:	6836      	ldr	r6, [r6, #0]
 8006ef2:	e7f7      	b.n	8006ee4 <__sfp+0x18>
 8006ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ef8:	b9d5      	cbnz	r5, 8006f30 <__sfp+0x64>
 8006efa:	4b16      	ldr	r3, [pc, #88]	; (8006f54 <__sfp+0x88>)
 8006efc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f00:	6665      	str	r5, [r4, #100]	; 0x64
 8006f02:	60e3      	str	r3, [r4, #12]
 8006f04:	f000 f847 	bl	8006f96 <__retarget_lock_init_recursive>
 8006f08:	f7ff ff96 	bl	8006e38 <__sfp_lock_release>
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	4629      	mov	r1, r5
 8006f10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f14:	6025      	str	r5, [r4, #0]
 8006f16:	61a5      	str	r5, [r4, #24]
 8006f18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f20:	f7ff fd2e 	bl	8006980 <memset>
 8006f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f30:	3468      	adds	r4, #104	; 0x68
 8006f32:	e7d9      	b.n	8006ee8 <__sfp+0x1c>
 8006f34:	2104      	movs	r1, #4
 8006f36:	4638      	mov	r0, r7
 8006f38:	f7ff ff62 	bl	8006e00 <__sfmoreglue>
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	6030      	str	r0, [r6, #0]
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d1d5      	bne.n	8006ef0 <__sfp+0x24>
 8006f44:	f7ff ff78 	bl	8006e38 <__sfp_lock_release>
 8006f48:	230c      	movs	r3, #12
 8006f4a:	603b      	str	r3, [r7, #0]
 8006f4c:	e7ee      	b.n	8006f2c <__sfp+0x60>
 8006f4e:	bf00      	nop
 8006f50:	08007c2c 	.word	0x08007c2c
 8006f54:	ffff0001 	.word	0xffff0001

08006f58 <_fwalk_reent>:
 8006f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f5c:	4606      	mov	r6, r0
 8006f5e:	4688      	mov	r8, r1
 8006f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f64:	2700      	movs	r7, #0
 8006f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8006f6e:	d505      	bpl.n	8006f7c <_fwalk_reent+0x24>
 8006f70:	6824      	ldr	r4, [r4, #0]
 8006f72:	2c00      	cmp	r4, #0
 8006f74:	d1f7      	bne.n	8006f66 <_fwalk_reent+0xe>
 8006f76:	4638      	mov	r0, r7
 8006f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f7c:	89ab      	ldrh	r3, [r5, #12]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d907      	bls.n	8006f92 <_fwalk_reent+0x3a>
 8006f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f86:	3301      	adds	r3, #1
 8006f88:	d003      	beq.n	8006f92 <_fwalk_reent+0x3a>
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	47c0      	blx	r8
 8006f90:	4307      	orrs	r7, r0
 8006f92:	3568      	adds	r5, #104	; 0x68
 8006f94:	e7e9      	b.n	8006f6a <_fwalk_reent+0x12>

08006f96 <__retarget_lock_init_recursive>:
 8006f96:	4770      	bx	lr

08006f98 <__retarget_lock_acquire_recursive>:
 8006f98:	4770      	bx	lr

08006f9a <__retarget_lock_release_recursive>:
 8006f9a:	4770      	bx	lr

08006f9c <__swhatbuf_r>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	460e      	mov	r6, r1
 8006fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa4:	b096      	sub	sp, #88	; 0x58
 8006fa6:	4614      	mov	r4, r2
 8006fa8:	2900      	cmp	r1, #0
 8006faa:	461d      	mov	r5, r3
 8006fac:	da08      	bge.n	8006fc0 <__swhatbuf_r+0x24>
 8006fae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	602a      	str	r2, [r5, #0]
 8006fb6:	061a      	lsls	r2, r3, #24
 8006fb8:	d410      	bmi.n	8006fdc <__swhatbuf_r+0x40>
 8006fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fbe:	e00e      	b.n	8006fde <__swhatbuf_r+0x42>
 8006fc0:	466a      	mov	r2, sp
 8006fc2:	f000 fc97 	bl	80078f4 <_fstat_r>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	dbf1      	blt.n	8006fae <__swhatbuf_r+0x12>
 8006fca:	9a01      	ldr	r2, [sp, #4]
 8006fcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fd4:	425a      	negs	r2, r3
 8006fd6:	415a      	adcs	r2, r3
 8006fd8:	602a      	str	r2, [r5, #0]
 8006fda:	e7ee      	b.n	8006fba <__swhatbuf_r+0x1e>
 8006fdc:	2340      	movs	r3, #64	; 0x40
 8006fde:	2000      	movs	r0, #0
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	b016      	add	sp, #88	; 0x58
 8006fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006fe8 <__smakebuf_r>:
 8006fe8:	898b      	ldrh	r3, [r1, #12]
 8006fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fec:	079d      	lsls	r5, r3, #30
 8006fee:	4606      	mov	r6, r0
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	d507      	bpl.n	8007004 <__smakebuf_r+0x1c>
 8006ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	6123      	str	r3, [r4, #16]
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	6163      	str	r3, [r4, #20]
 8007000:	b002      	add	sp, #8
 8007002:	bd70      	pop	{r4, r5, r6, pc}
 8007004:	ab01      	add	r3, sp, #4
 8007006:	466a      	mov	r2, sp
 8007008:	f7ff ffc8 	bl	8006f9c <__swhatbuf_r>
 800700c:	9900      	ldr	r1, [sp, #0]
 800700e:	4605      	mov	r5, r0
 8007010:	4630      	mov	r0, r6
 8007012:	f000 f895 	bl	8007140 <_malloc_r>
 8007016:	b948      	cbnz	r0, 800702c <__smakebuf_r+0x44>
 8007018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800701c:	059a      	lsls	r2, r3, #22
 800701e:	d4ef      	bmi.n	8007000 <__smakebuf_r+0x18>
 8007020:	f023 0303 	bic.w	r3, r3, #3
 8007024:	f043 0302 	orr.w	r3, r3, #2
 8007028:	81a3      	strh	r3, [r4, #12]
 800702a:	e7e3      	b.n	8006ff4 <__smakebuf_r+0xc>
 800702c:	4b0d      	ldr	r3, [pc, #52]	; (8007064 <__smakebuf_r+0x7c>)
 800702e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	6020      	str	r0, [r4, #0]
 8007034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007038:	6120      	str	r0, [r4, #16]
 800703a:	81a3      	strh	r3, [r4, #12]
 800703c:	9b00      	ldr	r3, [sp, #0]
 800703e:	6163      	str	r3, [r4, #20]
 8007040:	9b01      	ldr	r3, [sp, #4]
 8007042:	b15b      	cbz	r3, 800705c <__smakebuf_r+0x74>
 8007044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007048:	4630      	mov	r0, r6
 800704a:	f000 fc65 	bl	8007918 <_isatty_r>
 800704e:	b128      	cbz	r0, 800705c <__smakebuf_r+0x74>
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	f023 0303 	bic.w	r3, r3, #3
 8007056:	f043 0301 	orr.w	r3, r3, #1
 800705a:	81a3      	strh	r3, [r4, #12]
 800705c:	89a0      	ldrh	r0, [r4, #12]
 800705e:	4305      	orrs	r5, r0
 8007060:	81a5      	strh	r5, [r4, #12]
 8007062:	e7cd      	b.n	8007000 <__smakebuf_r+0x18>
 8007064:	08006df5 	.word	0x08006df5

08007068 <_free_r>:
 8007068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800706a:	2900      	cmp	r1, #0
 800706c:	d043      	beq.n	80070f6 <_free_r+0x8e>
 800706e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007072:	1f0c      	subs	r4, r1, #4
 8007074:	9001      	str	r0, [sp, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	bfb8      	it	lt
 800707a:	18e4      	addlt	r4, r4, r3
 800707c:	f000 fc7c 	bl	8007978 <__malloc_lock>
 8007080:	4a1e      	ldr	r2, [pc, #120]	; (80070fc <_free_r+0x94>)
 8007082:	9801      	ldr	r0, [sp, #4]
 8007084:	6813      	ldr	r3, [r2, #0]
 8007086:	b933      	cbnz	r3, 8007096 <_free_r+0x2e>
 8007088:	6063      	str	r3, [r4, #4]
 800708a:	6014      	str	r4, [r2, #0]
 800708c:	b003      	add	sp, #12
 800708e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007092:	f000 bc77 	b.w	8007984 <__malloc_unlock>
 8007096:	42a3      	cmp	r3, r4
 8007098:	d908      	bls.n	80070ac <_free_r+0x44>
 800709a:	6825      	ldr	r5, [r4, #0]
 800709c:	1961      	adds	r1, r4, r5
 800709e:	428b      	cmp	r3, r1
 80070a0:	bf01      	itttt	eq
 80070a2:	6819      	ldreq	r1, [r3, #0]
 80070a4:	685b      	ldreq	r3, [r3, #4]
 80070a6:	1949      	addeq	r1, r1, r5
 80070a8:	6021      	streq	r1, [r4, #0]
 80070aa:	e7ed      	b.n	8007088 <_free_r+0x20>
 80070ac:	461a      	mov	r2, r3
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	b10b      	cbz	r3, 80070b6 <_free_r+0x4e>
 80070b2:	42a3      	cmp	r3, r4
 80070b4:	d9fa      	bls.n	80070ac <_free_r+0x44>
 80070b6:	6811      	ldr	r1, [r2, #0]
 80070b8:	1855      	adds	r5, r2, r1
 80070ba:	42a5      	cmp	r5, r4
 80070bc:	d10b      	bne.n	80070d6 <_free_r+0x6e>
 80070be:	6824      	ldr	r4, [r4, #0]
 80070c0:	4421      	add	r1, r4
 80070c2:	1854      	adds	r4, r2, r1
 80070c4:	6011      	str	r1, [r2, #0]
 80070c6:	42a3      	cmp	r3, r4
 80070c8:	d1e0      	bne.n	800708c <_free_r+0x24>
 80070ca:	681c      	ldr	r4, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	4421      	add	r1, r4
 80070d0:	6053      	str	r3, [r2, #4]
 80070d2:	6011      	str	r1, [r2, #0]
 80070d4:	e7da      	b.n	800708c <_free_r+0x24>
 80070d6:	d902      	bls.n	80070de <_free_r+0x76>
 80070d8:	230c      	movs	r3, #12
 80070da:	6003      	str	r3, [r0, #0]
 80070dc:	e7d6      	b.n	800708c <_free_r+0x24>
 80070de:	6825      	ldr	r5, [r4, #0]
 80070e0:	1961      	adds	r1, r4, r5
 80070e2:	428b      	cmp	r3, r1
 80070e4:	bf02      	ittt	eq
 80070e6:	6819      	ldreq	r1, [r3, #0]
 80070e8:	685b      	ldreq	r3, [r3, #4]
 80070ea:	1949      	addeq	r1, r1, r5
 80070ec:	6063      	str	r3, [r4, #4]
 80070ee:	bf08      	it	eq
 80070f0:	6021      	streq	r1, [r4, #0]
 80070f2:	6054      	str	r4, [r2, #4]
 80070f4:	e7ca      	b.n	800708c <_free_r+0x24>
 80070f6:	b003      	add	sp, #12
 80070f8:	bd30      	pop	{r4, r5, pc}
 80070fa:	bf00      	nop
 80070fc:	200005b8 	.word	0x200005b8

08007100 <sbrk_aligned>:
 8007100:	b570      	push	{r4, r5, r6, lr}
 8007102:	4e0e      	ldr	r6, [pc, #56]	; (800713c <sbrk_aligned+0x3c>)
 8007104:	460c      	mov	r4, r1
 8007106:	4605      	mov	r5, r0
 8007108:	6831      	ldr	r1, [r6, #0]
 800710a:	b911      	cbnz	r1, 8007112 <sbrk_aligned+0x12>
 800710c:	f000 fb7c 	bl	8007808 <_sbrk_r>
 8007110:	6030      	str	r0, [r6, #0]
 8007112:	4621      	mov	r1, r4
 8007114:	4628      	mov	r0, r5
 8007116:	f000 fb77 	bl	8007808 <_sbrk_r>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	d00a      	beq.n	8007134 <sbrk_aligned+0x34>
 800711e:	1cc4      	adds	r4, r0, #3
 8007120:	f024 0403 	bic.w	r4, r4, #3
 8007124:	42a0      	cmp	r0, r4
 8007126:	d007      	beq.n	8007138 <sbrk_aligned+0x38>
 8007128:	1a21      	subs	r1, r4, r0
 800712a:	4628      	mov	r0, r5
 800712c:	f000 fb6c 	bl	8007808 <_sbrk_r>
 8007130:	3001      	adds	r0, #1
 8007132:	d101      	bne.n	8007138 <sbrk_aligned+0x38>
 8007134:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007138:	4620      	mov	r0, r4
 800713a:	bd70      	pop	{r4, r5, r6, pc}
 800713c:	200005bc 	.word	0x200005bc

08007140 <_malloc_r>:
 8007140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007144:	1ccd      	adds	r5, r1, #3
 8007146:	4607      	mov	r7, r0
 8007148:	f025 0503 	bic.w	r5, r5, #3
 800714c:	3508      	adds	r5, #8
 800714e:	2d0c      	cmp	r5, #12
 8007150:	bf38      	it	cc
 8007152:	250c      	movcc	r5, #12
 8007154:	2d00      	cmp	r5, #0
 8007156:	db01      	blt.n	800715c <_malloc_r+0x1c>
 8007158:	42a9      	cmp	r1, r5
 800715a:	d905      	bls.n	8007168 <_malloc_r+0x28>
 800715c:	230c      	movs	r3, #12
 800715e:	2600      	movs	r6, #0
 8007160:	603b      	str	r3, [r7, #0]
 8007162:	4630      	mov	r0, r6
 8007164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007168:	4e2e      	ldr	r6, [pc, #184]	; (8007224 <_malloc_r+0xe4>)
 800716a:	f000 fc05 	bl	8007978 <__malloc_lock>
 800716e:	6833      	ldr	r3, [r6, #0]
 8007170:	461c      	mov	r4, r3
 8007172:	bb34      	cbnz	r4, 80071c2 <_malloc_r+0x82>
 8007174:	4629      	mov	r1, r5
 8007176:	4638      	mov	r0, r7
 8007178:	f7ff ffc2 	bl	8007100 <sbrk_aligned>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	4604      	mov	r4, r0
 8007180:	d14d      	bne.n	800721e <_malloc_r+0xde>
 8007182:	6834      	ldr	r4, [r6, #0]
 8007184:	4626      	mov	r6, r4
 8007186:	2e00      	cmp	r6, #0
 8007188:	d140      	bne.n	800720c <_malloc_r+0xcc>
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	4631      	mov	r1, r6
 800718e:	4638      	mov	r0, r7
 8007190:	eb04 0803 	add.w	r8, r4, r3
 8007194:	f000 fb38 	bl	8007808 <_sbrk_r>
 8007198:	4580      	cmp	r8, r0
 800719a:	d13a      	bne.n	8007212 <_malloc_r+0xd2>
 800719c:	6821      	ldr	r1, [r4, #0]
 800719e:	3503      	adds	r5, #3
 80071a0:	4638      	mov	r0, r7
 80071a2:	1a6d      	subs	r5, r5, r1
 80071a4:	f025 0503 	bic.w	r5, r5, #3
 80071a8:	3508      	adds	r5, #8
 80071aa:	2d0c      	cmp	r5, #12
 80071ac:	bf38      	it	cc
 80071ae:	250c      	movcc	r5, #12
 80071b0:	4629      	mov	r1, r5
 80071b2:	f7ff ffa5 	bl	8007100 <sbrk_aligned>
 80071b6:	3001      	adds	r0, #1
 80071b8:	d02b      	beq.n	8007212 <_malloc_r+0xd2>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	442b      	add	r3, r5
 80071be:	6023      	str	r3, [r4, #0]
 80071c0:	e00e      	b.n	80071e0 <_malloc_r+0xa0>
 80071c2:	6822      	ldr	r2, [r4, #0]
 80071c4:	1b52      	subs	r2, r2, r5
 80071c6:	d41e      	bmi.n	8007206 <_malloc_r+0xc6>
 80071c8:	2a0b      	cmp	r2, #11
 80071ca:	d916      	bls.n	80071fa <_malloc_r+0xba>
 80071cc:	1961      	adds	r1, r4, r5
 80071ce:	42a3      	cmp	r3, r4
 80071d0:	6025      	str	r5, [r4, #0]
 80071d2:	bf18      	it	ne
 80071d4:	6059      	strne	r1, [r3, #4]
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	bf08      	it	eq
 80071da:	6031      	streq	r1, [r6, #0]
 80071dc:	5162      	str	r2, [r4, r5]
 80071de:	604b      	str	r3, [r1, #4]
 80071e0:	f104 060b 	add.w	r6, r4, #11
 80071e4:	4638      	mov	r0, r7
 80071e6:	f000 fbcd 	bl	8007984 <__malloc_unlock>
 80071ea:	1d23      	adds	r3, r4, #4
 80071ec:	f026 0607 	bic.w	r6, r6, #7
 80071f0:	1af2      	subs	r2, r6, r3
 80071f2:	d0b6      	beq.n	8007162 <_malloc_r+0x22>
 80071f4:	1b9b      	subs	r3, r3, r6
 80071f6:	50a3      	str	r3, [r4, r2]
 80071f8:	e7b3      	b.n	8007162 <_malloc_r+0x22>
 80071fa:	6862      	ldr	r2, [r4, #4]
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	bf0c      	ite	eq
 8007200:	6032      	streq	r2, [r6, #0]
 8007202:	605a      	strne	r2, [r3, #4]
 8007204:	e7ec      	b.n	80071e0 <_malloc_r+0xa0>
 8007206:	4623      	mov	r3, r4
 8007208:	6864      	ldr	r4, [r4, #4]
 800720a:	e7b2      	b.n	8007172 <_malloc_r+0x32>
 800720c:	4634      	mov	r4, r6
 800720e:	6876      	ldr	r6, [r6, #4]
 8007210:	e7b9      	b.n	8007186 <_malloc_r+0x46>
 8007212:	230c      	movs	r3, #12
 8007214:	4638      	mov	r0, r7
 8007216:	603b      	str	r3, [r7, #0]
 8007218:	f000 fbb4 	bl	8007984 <__malloc_unlock>
 800721c:	e7a1      	b.n	8007162 <_malloc_r+0x22>
 800721e:	6025      	str	r5, [r4, #0]
 8007220:	e7de      	b.n	80071e0 <_malloc_r+0xa0>
 8007222:	bf00      	nop
 8007224:	200005b8 	.word	0x200005b8

08007228 <__sfputc_r>:
 8007228:	6893      	ldr	r3, [r2, #8]
 800722a:	3b01      	subs	r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	6093      	str	r3, [r2, #8]
 8007230:	b410      	push	{r4}
 8007232:	da08      	bge.n	8007246 <__sfputc_r+0x1e>
 8007234:	6994      	ldr	r4, [r2, #24]
 8007236:	42a3      	cmp	r3, r4
 8007238:	db01      	blt.n	800723e <__sfputc_r+0x16>
 800723a:	290a      	cmp	r1, #10
 800723c:	d103      	bne.n	8007246 <__sfputc_r+0x1e>
 800723e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007242:	f7ff bc33 	b.w	8006aac <__swbuf_r>
 8007246:	6813      	ldr	r3, [r2, #0]
 8007248:	1c58      	adds	r0, r3, #1
 800724a:	6010      	str	r0, [r2, #0]
 800724c:	4608      	mov	r0, r1
 800724e:	7019      	strb	r1, [r3, #0]
 8007250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007254:	4770      	bx	lr

08007256 <__sfputs_r>:
 8007256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007258:	4606      	mov	r6, r0
 800725a:	460f      	mov	r7, r1
 800725c:	4614      	mov	r4, r2
 800725e:	18d5      	adds	r5, r2, r3
 8007260:	42ac      	cmp	r4, r5
 8007262:	d101      	bne.n	8007268 <__sfputs_r+0x12>
 8007264:	2000      	movs	r0, #0
 8007266:	e007      	b.n	8007278 <__sfputs_r+0x22>
 8007268:	463a      	mov	r2, r7
 800726a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800726e:	4630      	mov	r0, r6
 8007270:	f7ff ffda 	bl	8007228 <__sfputc_r>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d1f3      	bne.n	8007260 <__sfputs_r+0xa>
 8007278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800727c <_vfiprintf_r>:
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	460d      	mov	r5, r1
 8007282:	b09d      	sub	sp, #116	; 0x74
 8007284:	4614      	mov	r4, r2
 8007286:	4698      	mov	r8, r3
 8007288:	4606      	mov	r6, r0
 800728a:	b118      	cbz	r0, 8007294 <_vfiprintf_r+0x18>
 800728c:	6983      	ldr	r3, [r0, #24]
 800728e:	b90b      	cbnz	r3, 8007294 <_vfiprintf_r+0x18>
 8007290:	f7ff fde4 	bl	8006e5c <__sinit>
 8007294:	4b89      	ldr	r3, [pc, #548]	; (80074bc <_vfiprintf_r+0x240>)
 8007296:	429d      	cmp	r5, r3
 8007298:	d11b      	bne.n	80072d2 <_vfiprintf_r+0x56>
 800729a:	6875      	ldr	r5, [r6, #4]
 800729c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800729e:	07d9      	lsls	r1, r3, #31
 80072a0:	d405      	bmi.n	80072ae <_vfiprintf_r+0x32>
 80072a2:	89ab      	ldrh	r3, [r5, #12]
 80072a4:	059a      	lsls	r2, r3, #22
 80072a6:	d402      	bmi.n	80072ae <_vfiprintf_r+0x32>
 80072a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072aa:	f7ff fe75 	bl	8006f98 <__retarget_lock_acquire_recursive>
 80072ae:	89ab      	ldrh	r3, [r5, #12]
 80072b0:	071b      	lsls	r3, r3, #28
 80072b2:	d501      	bpl.n	80072b8 <_vfiprintf_r+0x3c>
 80072b4:	692b      	ldr	r3, [r5, #16]
 80072b6:	b9eb      	cbnz	r3, 80072f4 <_vfiprintf_r+0x78>
 80072b8:	4629      	mov	r1, r5
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7ff fc48 	bl	8006b50 <__swsetup_r>
 80072c0:	b1c0      	cbz	r0, 80072f4 <_vfiprintf_r+0x78>
 80072c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072c4:	07dc      	lsls	r4, r3, #31
 80072c6:	d50e      	bpl.n	80072e6 <_vfiprintf_r+0x6a>
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072cc:	b01d      	add	sp, #116	; 0x74
 80072ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d2:	4b7b      	ldr	r3, [pc, #492]	; (80074c0 <_vfiprintf_r+0x244>)
 80072d4:	429d      	cmp	r5, r3
 80072d6:	d101      	bne.n	80072dc <_vfiprintf_r+0x60>
 80072d8:	68b5      	ldr	r5, [r6, #8]
 80072da:	e7df      	b.n	800729c <_vfiprintf_r+0x20>
 80072dc:	4b79      	ldr	r3, [pc, #484]	; (80074c4 <_vfiprintf_r+0x248>)
 80072de:	429d      	cmp	r5, r3
 80072e0:	bf08      	it	eq
 80072e2:	68f5      	ldreq	r5, [r6, #12]
 80072e4:	e7da      	b.n	800729c <_vfiprintf_r+0x20>
 80072e6:	89ab      	ldrh	r3, [r5, #12]
 80072e8:	0598      	lsls	r0, r3, #22
 80072ea:	d4ed      	bmi.n	80072c8 <_vfiprintf_r+0x4c>
 80072ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072ee:	f7ff fe54 	bl	8006f9a <__retarget_lock_release_recursive>
 80072f2:	e7e9      	b.n	80072c8 <_vfiprintf_r+0x4c>
 80072f4:	2300      	movs	r3, #0
 80072f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072fa:	f04f 0901 	mov.w	r9, #1
 80072fe:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80074c8 <_vfiprintf_r+0x24c>
 8007302:	9309      	str	r3, [sp, #36]	; 0x24
 8007304:	2320      	movs	r3, #32
 8007306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800730a:	2330      	movs	r3, #48	; 0x30
 800730c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007310:	4623      	mov	r3, r4
 8007312:	469a      	mov	sl, r3
 8007314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007318:	b10a      	cbz	r2, 800731e <_vfiprintf_r+0xa2>
 800731a:	2a25      	cmp	r2, #37	; 0x25
 800731c:	d1f9      	bne.n	8007312 <_vfiprintf_r+0x96>
 800731e:	ebba 0b04 	subs.w	fp, sl, r4
 8007322:	d00b      	beq.n	800733c <_vfiprintf_r+0xc0>
 8007324:	465b      	mov	r3, fp
 8007326:	4622      	mov	r2, r4
 8007328:	4629      	mov	r1, r5
 800732a:	4630      	mov	r0, r6
 800732c:	f7ff ff93 	bl	8007256 <__sfputs_r>
 8007330:	3001      	adds	r0, #1
 8007332:	f000 80aa 	beq.w	800748a <_vfiprintf_r+0x20e>
 8007336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007338:	445a      	add	r2, fp
 800733a:	9209      	str	r2, [sp, #36]	; 0x24
 800733c:	f89a 3000 	ldrb.w	r3, [sl]
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 80a2 	beq.w	800748a <_vfiprintf_r+0x20e>
 8007346:	2300      	movs	r3, #0
 8007348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800734c:	f10a 0a01 	add.w	sl, sl, #1
 8007350:	9304      	str	r3, [sp, #16]
 8007352:	9307      	str	r3, [sp, #28]
 8007354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007358:	931a      	str	r3, [sp, #104]	; 0x68
 800735a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800735e:	4654      	mov	r4, sl
 8007360:	2205      	movs	r2, #5
 8007362:	4859      	ldr	r0, [pc, #356]	; (80074c8 <_vfiprintf_r+0x24c>)
 8007364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007368:	f000 faf8 	bl	800795c <memchr>
 800736c:	9a04      	ldr	r2, [sp, #16]
 800736e:	b9d8      	cbnz	r0, 80073a8 <_vfiprintf_r+0x12c>
 8007370:	06d1      	lsls	r1, r2, #27
 8007372:	bf44      	itt	mi
 8007374:	2320      	movmi	r3, #32
 8007376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800737a:	0713      	lsls	r3, r2, #28
 800737c:	bf44      	itt	mi
 800737e:	232b      	movmi	r3, #43	; 0x2b
 8007380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007384:	f89a 3000 	ldrb.w	r3, [sl]
 8007388:	2b2a      	cmp	r3, #42	; 0x2a
 800738a:	d015      	beq.n	80073b8 <_vfiprintf_r+0x13c>
 800738c:	9a07      	ldr	r2, [sp, #28]
 800738e:	4654      	mov	r4, sl
 8007390:	2000      	movs	r0, #0
 8007392:	f04f 0c0a 	mov.w	ip, #10
 8007396:	4621      	mov	r1, r4
 8007398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800739c:	3b30      	subs	r3, #48	; 0x30
 800739e:	2b09      	cmp	r3, #9
 80073a0:	d94e      	bls.n	8007440 <_vfiprintf_r+0x1c4>
 80073a2:	b1b0      	cbz	r0, 80073d2 <_vfiprintf_r+0x156>
 80073a4:	9207      	str	r2, [sp, #28]
 80073a6:	e014      	b.n	80073d2 <_vfiprintf_r+0x156>
 80073a8:	eba0 0308 	sub.w	r3, r0, r8
 80073ac:	46a2      	mov	sl, r4
 80073ae:	fa09 f303 	lsl.w	r3, r9, r3
 80073b2:	4313      	orrs	r3, r2
 80073b4:	9304      	str	r3, [sp, #16]
 80073b6:	e7d2      	b.n	800735e <_vfiprintf_r+0xe2>
 80073b8:	9b03      	ldr	r3, [sp, #12]
 80073ba:	1d19      	adds	r1, r3, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	9103      	str	r1, [sp, #12]
 80073c2:	bfbb      	ittet	lt
 80073c4:	425b      	neglt	r3, r3
 80073c6:	f042 0202 	orrlt.w	r2, r2, #2
 80073ca:	9307      	strge	r3, [sp, #28]
 80073cc:	9307      	strlt	r3, [sp, #28]
 80073ce:	bfb8      	it	lt
 80073d0:	9204      	strlt	r2, [sp, #16]
 80073d2:	7823      	ldrb	r3, [r4, #0]
 80073d4:	2b2e      	cmp	r3, #46	; 0x2e
 80073d6:	d10c      	bne.n	80073f2 <_vfiprintf_r+0x176>
 80073d8:	7863      	ldrb	r3, [r4, #1]
 80073da:	2b2a      	cmp	r3, #42	; 0x2a
 80073dc:	d135      	bne.n	800744a <_vfiprintf_r+0x1ce>
 80073de:	9b03      	ldr	r3, [sp, #12]
 80073e0:	3402      	adds	r4, #2
 80073e2:	1d1a      	adds	r2, r3, #4
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	9203      	str	r2, [sp, #12]
 80073ea:	bfb8      	it	lt
 80073ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073f0:	9305      	str	r3, [sp, #20]
 80073f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80074d8 <_vfiprintf_r+0x25c>
 80073f6:	2203      	movs	r2, #3
 80073f8:	7821      	ldrb	r1, [r4, #0]
 80073fa:	4650      	mov	r0, sl
 80073fc:	f000 faae 	bl	800795c <memchr>
 8007400:	b140      	cbz	r0, 8007414 <_vfiprintf_r+0x198>
 8007402:	2340      	movs	r3, #64	; 0x40
 8007404:	eba0 000a 	sub.w	r0, r0, sl
 8007408:	3401      	adds	r4, #1
 800740a:	fa03 f000 	lsl.w	r0, r3, r0
 800740e:	9b04      	ldr	r3, [sp, #16]
 8007410:	4303      	orrs	r3, r0
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007418:	2206      	movs	r2, #6
 800741a:	482c      	ldr	r0, [pc, #176]	; (80074cc <_vfiprintf_r+0x250>)
 800741c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007420:	f000 fa9c 	bl	800795c <memchr>
 8007424:	2800      	cmp	r0, #0
 8007426:	d03f      	beq.n	80074a8 <_vfiprintf_r+0x22c>
 8007428:	4b29      	ldr	r3, [pc, #164]	; (80074d0 <_vfiprintf_r+0x254>)
 800742a:	bb1b      	cbnz	r3, 8007474 <_vfiprintf_r+0x1f8>
 800742c:	9b03      	ldr	r3, [sp, #12]
 800742e:	3307      	adds	r3, #7
 8007430:	f023 0307 	bic.w	r3, r3, #7
 8007434:	3308      	adds	r3, #8
 8007436:	9303      	str	r3, [sp, #12]
 8007438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800743a:	443b      	add	r3, r7
 800743c:	9309      	str	r3, [sp, #36]	; 0x24
 800743e:	e767      	b.n	8007310 <_vfiprintf_r+0x94>
 8007440:	fb0c 3202 	mla	r2, ip, r2, r3
 8007444:	460c      	mov	r4, r1
 8007446:	2001      	movs	r0, #1
 8007448:	e7a5      	b.n	8007396 <_vfiprintf_r+0x11a>
 800744a:	2300      	movs	r3, #0
 800744c:	3401      	adds	r4, #1
 800744e:	f04f 0c0a 	mov.w	ip, #10
 8007452:	4619      	mov	r1, r3
 8007454:	9305      	str	r3, [sp, #20]
 8007456:	4620      	mov	r0, r4
 8007458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800745c:	3a30      	subs	r2, #48	; 0x30
 800745e:	2a09      	cmp	r2, #9
 8007460:	d903      	bls.n	800746a <_vfiprintf_r+0x1ee>
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0c5      	beq.n	80073f2 <_vfiprintf_r+0x176>
 8007466:	9105      	str	r1, [sp, #20]
 8007468:	e7c3      	b.n	80073f2 <_vfiprintf_r+0x176>
 800746a:	fb0c 2101 	mla	r1, ip, r1, r2
 800746e:	4604      	mov	r4, r0
 8007470:	2301      	movs	r3, #1
 8007472:	e7f0      	b.n	8007456 <_vfiprintf_r+0x1da>
 8007474:	ab03      	add	r3, sp, #12
 8007476:	462a      	mov	r2, r5
 8007478:	a904      	add	r1, sp, #16
 800747a:	4630      	mov	r0, r6
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	4b15      	ldr	r3, [pc, #84]	; (80074d4 <_vfiprintf_r+0x258>)
 8007480:	e000      	b.n	8007484 <_vfiprintf_r+0x208>
 8007482:	bf00      	nop
 8007484:	4607      	mov	r7, r0
 8007486:	1c78      	adds	r0, r7, #1
 8007488:	d1d6      	bne.n	8007438 <_vfiprintf_r+0x1bc>
 800748a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800748c:	07d9      	lsls	r1, r3, #31
 800748e:	d405      	bmi.n	800749c <_vfiprintf_r+0x220>
 8007490:	89ab      	ldrh	r3, [r5, #12]
 8007492:	059a      	lsls	r2, r3, #22
 8007494:	d402      	bmi.n	800749c <_vfiprintf_r+0x220>
 8007496:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007498:	f7ff fd7f 	bl	8006f9a <__retarget_lock_release_recursive>
 800749c:	89ab      	ldrh	r3, [r5, #12]
 800749e:	065b      	lsls	r3, r3, #25
 80074a0:	f53f af12 	bmi.w	80072c8 <_vfiprintf_r+0x4c>
 80074a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074a6:	e711      	b.n	80072cc <_vfiprintf_r+0x50>
 80074a8:	ab03      	add	r3, sp, #12
 80074aa:	462a      	mov	r2, r5
 80074ac:	a904      	add	r1, sp, #16
 80074ae:	4630      	mov	r0, r6
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	4b08      	ldr	r3, [pc, #32]	; (80074d4 <_vfiprintf_r+0x258>)
 80074b4:	f000 f882 	bl	80075bc <_printf_i>
 80074b8:	e7e4      	b.n	8007484 <_vfiprintf_r+0x208>
 80074ba:	bf00      	nop
 80074bc:	08007c50 	.word	0x08007c50
 80074c0:	08007c70 	.word	0x08007c70
 80074c4:	08007c30 	.word	0x08007c30
 80074c8:	08007c90 	.word	0x08007c90
 80074cc:	08007c9a 	.word	0x08007c9a
 80074d0:	00000000 	.word	0x00000000
 80074d4:	08007257 	.word	0x08007257
 80074d8:	08007c96 	.word	0x08007c96

080074dc <_printf_common>:
 80074dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e0:	4616      	mov	r6, r2
 80074e2:	4699      	mov	r9, r3
 80074e4:	688a      	ldr	r2, [r1, #8]
 80074e6:	4607      	mov	r7, r0
 80074e8:	690b      	ldr	r3, [r1, #16]
 80074ea:	460c      	mov	r4, r1
 80074ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074f0:	4293      	cmp	r3, r2
 80074f2:	bfb8      	it	lt
 80074f4:	4613      	movlt	r3, r2
 80074f6:	6033      	str	r3, [r6, #0]
 80074f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074fc:	b10a      	cbz	r2, 8007502 <_printf_common+0x26>
 80074fe:	3301      	adds	r3, #1
 8007500:	6033      	str	r3, [r6, #0]
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	0699      	lsls	r1, r3, #26
 8007506:	bf42      	ittt	mi
 8007508:	6833      	ldrmi	r3, [r6, #0]
 800750a:	3302      	addmi	r3, #2
 800750c:	6033      	strmi	r3, [r6, #0]
 800750e:	6825      	ldr	r5, [r4, #0]
 8007510:	f015 0506 	ands.w	r5, r5, #6
 8007514:	d106      	bne.n	8007524 <_printf_common+0x48>
 8007516:	f104 0a19 	add.w	sl, r4, #25
 800751a:	68e3      	ldr	r3, [r4, #12]
 800751c:	6832      	ldr	r2, [r6, #0]
 800751e:	1a9b      	subs	r3, r3, r2
 8007520:	42ab      	cmp	r3, r5
 8007522:	dc29      	bgt.n	8007578 <_printf_common+0x9c>
 8007524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007528:	1e13      	subs	r3, r2, #0
 800752a:	6822      	ldr	r2, [r4, #0]
 800752c:	bf18      	it	ne
 800752e:	2301      	movne	r3, #1
 8007530:	0692      	lsls	r2, r2, #26
 8007532:	d42e      	bmi.n	8007592 <_printf_common+0xb6>
 8007534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007538:	4649      	mov	r1, r9
 800753a:	4638      	mov	r0, r7
 800753c:	47c0      	blx	r8
 800753e:	3001      	adds	r0, #1
 8007540:	d021      	beq.n	8007586 <_printf_common+0xaa>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	341a      	adds	r4, #26
 8007546:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800754a:	f003 0306 	and.w	r3, r3, #6
 800754e:	6832      	ldr	r2, [r6, #0]
 8007550:	2600      	movs	r6, #0
 8007552:	2b04      	cmp	r3, #4
 8007554:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007558:	bf08      	it	eq
 800755a:	1aad      	subeq	r5, r5, r2
 800755c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007560:	bf14      	ite	ne
 8007562:	2500      	movne	r5, #0
 8007564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007568:	4293      	cmp	r3, r2
 800756a:	bfc4      	itt	gt
 800756c:	1a9b      	subgt	r3, r3, r2
 800756e:	18ed      	addgt	r5, r5, r3
 8007570:	42b5      	cmp	r5, r6
 8007572:	d11a      	bne.n	80075aa <_printf_common+0xce>
 8007574:	2000      	movs	r0, #0
 8007576:	e008      	b.n	800758a <_printf_common+0xae>
 8007578:	2301      	movs	r3, #1
 800757a:	4652      	mov	r2, sl
 800757c:	4649      	mov	r1, r9
 800757e:	4638      	mov	r0, r7
 8007580:	47c0      	blx	r8
 8007582:	3001      	adds	r0, #1
 8007584:	d103      	bne.n	800758e <_printf_common+0xb2>
 8007586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800758a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758e:	3501      	adds	r5, #1
 8007590:	e7c3      	b.n	800751a <_printf_common+0x3e>
 8007592:	18e1      	adds	r1, r4, r3
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	2030      	movs	r0, #48	; 0x30
 8007598:	3302      	adds	r3, #2
 800759a:	4422      	add	r2, r4
 800759c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075a8:	e7c4      	b.n	8007534 <_printf_common+0x58>
 80075aa:	2301      	movs	r3, #1
 80075ac:	4622      	mov	r2, r4
 80075ae:	4649      	mov	r1, r9
 80075b0:	4638      	mov	r0, r7
 80075b2:	47c0      	blx	r8
 80075b4:	3001      	adds	r0, #1
 80075b6:	d0e6      	beq.n	8007586 <_printf_common+0xaa>
 80075b8:	3601      	adds	r6, #1
 80075ba:	e7d9      	b.n	8007570 <_printf_common+0x94>

080075bc <_printf_i>:
 80075bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	7e0f      	ldrb	r7, [r1, #24]
 80075c2:	4691      	mov	r9, r2
 80075c4:	4680      	mov	r8, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	2f78      	cmp	r7, #120	; 0x78
 80075ca:	469a      	mov	sl, r3
 80075cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075d2:	d807      	bhi.n	80075e4 <_printf_i+0x28>
 80075d4:	2f62      	cmp	r7, #98	; 0x62
 80075d6:	d80a      	bhi.n	80075ee <_printf_i+0x32>
 80075d8:	2f00      	cmp	r7, #0
 80075da:	f000 80d8 	beq.w	800778e <_printf_i+0x1d2>
 80075de:	2f58      	cmp	r7, #88	; 0x58
 80075e0:	f000 80a3 	beq.w	800772a <_printf_i+0x16e>
 80075e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075ec:	e03a      	b.n	8007664 <_printf_i+0xa8>
 80075ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075f2:	2b15      	cmp	r3, #21
 80075f4:	d8f6      	bhi.n	80075e4 <_printf_i+0x28>
 80075f6:	a101      	add	r1, pc, #4	; (adr r1, 80075fc <_printf_i+0x40>)
 80075f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075fc:	08007655 	.word	0x08007655
 8007600:	08007669 	.word	0x08007669
 8007604:	080075e5 	.word	0x080075e5
 8007608:	080075e5 	.word	0x080075e5
 800760c:	080075e5 	.word	0x080075e5
 8007610:	080075e5 	.word	0x080075e5
 8007614:	08007669 	.word	0x08007669
 8007618:	080075e5 	.word	0x080075e5
 800761c:	080075e5 	.word	0x080075e5
 8007620:	080075e5 	.word	0x080075e5
 8007624:	080075e5 	.word	0x080075e5
 8007628:	08007775 	.word	0x08007775
 800762c:	08007699 	.word	0x08007699
 8007630:	08007757 	.word	0x08007757
 8007634:	080075e5 	.word	0x080075e5
 8007638:	080075e5 	.word	0x080075e5
 800763c:	08007797 	.word	0x08007797
 8007640:	080075e5 	.word	0x080075e5
 8007644:	08007699 	.word	0x08007699
 8007648:	080075e5 	.word	0x080075e5
 800764c:	080075e5 	.word	0x080075e5
 8007650:	0800775f 	.word	0x0800775f
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	1d1a      	adds	r2, r3, #4
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	602a      	str	r2, [r5, #0]
 800765c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007664:	2301      	movs	r3, #1
 8007666:	e0a3      	b.n	80077b0 <_printf_i+0x1f4>
 8007668:	6820      	ldr	r0, [r4, #0]
 800766a:	6829      	ldr	r1, [r5, #0]
 800766c:	0606      	lsls	r6, r0, #24
 800766e:	f101 0304 	add.w	r3, r1, #4
 8007672:	d50a      	bpl.n	800768a <_printf_i+0xce>
 8007674:	680e      	ldr	r6, [r1, #0]
 8007676:	602b      	str	r3, [r5, #0]
 8007678:	2e00      	cmp	r6, #0
 800767a:	da03      	bge.n	8007684 <_printf_i+0xc8>
 800767c:	232d      	movs	r3, #45	; 0x2d
 800767e:	4276      	negs	r6, r6
 8007680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007684:	485e      	ldr	r0, [pc, #376]	; (8007800 <_printf_i+0x244>)
 8007686:	230a      	movs	r3, #10
 8007688:	e019      	b.n	80076be <_printf_i+0x102>
 800768a:	680e      	ldr	r6, [r1, #0]
 800768c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007690:	602b      	str	r3, [r5, #0]
 8007692:	bf18      	it	ne
 8007694:	b236      	sxthne	r6, r6
 8007696:	e7ef      	b.n	8007678 <_printf_i+0xbc>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	6820      	ldr	r0, [r4, #0]
 800769c:	1d19      	adds	r1, r3, #4
 800769e:	6029      	str	r1, [r5, #0]
 80076a0:	0601      	lsls	r1, r0, #24
 80076a2:	d501      	bpl.n	80076a8 <_printf_i+0xec>
 80076a4:	681e      	ldr	r6, [r3, #0]
 80076a6:	e002      	b.n	80076ae <_printf_i+0xf2>
 80076a8:	0646      	lsls	r6, r0, #25
 80076aa:	d5fb      	bpl.n	80076a4 <_printf_i+0xe8>
 80076ac:	881e      	ldrh	r6, [r3, #0]
 80076ae:	2f6f      	cmp	r7, #111	; 0x6f
 80076b0:	4853      	ldr	r0, [pc, #332]	; (8007800 <_printf_i+0x244>)
 80076b2:	bf0c      	ite	eq
 80076b4:	2308      	moveq	r3, #8
 80076b6:	230a      	movne	r3, #10
 80076b8:	2100      	movs	r1, #0
 80076ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076be:	6865      	ldr	r5, [r4, #4]
 80076c0:	2d00      	cmp	r5, #0
 80076c2:	60a5      	str	r5, [r4, #8]
 80076c4:	bfa2      	ittt	ge
 80076c6:	6821      	ldrge	r1, [r4, #0]
 80076c8:	f021 0104 	bicge.w	r1, r1, #4
 80076cc:	6021      	strge	r1, [r4, #0]
 80076ce:	b90e      	cbnz	r6, 80076d4 <_printf_i+0x118>
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	d04d      	beq.n	8007770 <_printf_i+0x1b4>
 80076d4:	4615      	mov	r5, r2
 80076d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80076da:	fb03 6711 	mls	r7, r3, r1, r6
 80076de:	5dc7      	ldrb	r7, [r0, r7]
 80076e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076e4:	4637      	mov	r7, r6
 80076e6:	460e      	mov	r6, r1
 80076e8:	42bb      	cmp	r3, r7
 80076ea:	d9f4      	bls.n	80076d6 <_printf_i+0x11a>
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d10b      	bne.n	8007708 <_printf_i+0x14c>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	07de      	lsls	r6, r3, #31
 80076f4:	d508      	bpl.n	8007708 <_printf_i+0x14c>
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	6861      	ldr	r1, [r4, #4]
 80076fa:	4299      	cmp	r1, r3
 80076fc:	bfde      	ittt	le
 80076fe:	2330      	movle	r3, #48	; 0x30
 8007700:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007704:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007708:	1b52      	subs	r2, r2, r5
 800770a:	6122      	str	r2, [r4, #16]
 800770c:	464b      	mov	r3, r9
 800770e:	aa03      	add	r2, sp, #12
 8007710:	4621      	mov	r1, r4
 8007712:	4640      	mov	r0, r8
 8007714:	f8cd a000 	str.w	sl, [sp]
 8007718:	f7ff fee0 	bl	80074dc <_printf_common>
 800771c:	3001      	adds	r0, #1
 800771e:	d14c      	bne.n	80077ba <_printf_i+0x1fe>
 8007720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007724:	b004      	add	sp, #16
 8007726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772a:	4835      	ldr	r0, [pc, #212]	; (8007800 <_printf_i+0x244>)
 800772c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007730:	6829      	ldr	r1, [r5, #0]
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	f851 6b04 	ldr.w	r6, [r1], #4
 8007738:	6029      	str	r1, [r5, #0]
 800773a:	061d      	lsls	r5, r3, #24
 800773c:	d514      	bpl.n	8007768 <_printf_i+0x1ac>
 800773e:	07df      	lsls	r7, r3, #31
 8007740:	bf44      	itt	mi
 8007742:	f043 0320 	orrmi.w	r3, r3, #32
 8007746:	6023      	strmi	r3, [r4, #0]
 8007748:	b91e      	cbnz	r6, 8007752 <_printf_i+0x196>
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	f023 0320 	bic.w	r3, r3, #32
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	2310      	movs	r3, #16
 8007754:	e7b0      	b.n	80076b8 <_printf_i+0xfc>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	f043 0320 	orr.w	r3, r3, #32
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	2378      	movs	r3, #120	; 0x78
 8007760:	4828      	ldr	r0, [pc, #160]	; (8007804 <_printf_i+0x248>)
 8007762:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007766:	e7e3      	b.n	8007730 <_printf_i+0x174>
 8007768:	0659      	lsls	r1, r3, #25
 800776a:	bf48      	it	mi
 800776c:	b2b6      	uxthmi	r6, r6
 800776e:	e7e6      	b.n	800773e <_printf_i+0x182>
 8007770:	4615      	mov	r5, r2
 8007772:	e7bb      	b.n	80076ec <_printf_i+0x130>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	6826      	ldr	r6, [r4, #0]
 8007778:	1d18      	adds	r0, r3, #4
 800777a:	6961      	ldr	r1, [r4, #20]
 800777c:	6028      	str	r0, [r5, #0]
 800777e:	0635      	lsls	r5, r6, #24
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	d501      	bpl.n	8007788 <_printf_i+0x1cc>
 8007784:	6019      	str	r1, [r3, #0]
 8007786:	e002      	b.n	800778e <_printf_i+0x1d2>
 8007788:	0670      	lsls	r0, r6, #25
 800778a:	d5fb      	bpl.n	8007784 <_printf_i+0x1c8>
 800778c:	8019      	strh	r1, [r3, #0]
 800778e:	2300      	movs	r3, #0
 8007790:	4615      	mov	r5, r2
 8007792:	6123      	str	r3, [r4, #16]
 8007794:	e7ba      	b.n	800770c <_printf_i+0x150>
 8007796:	682b      	ldr	r3, [r5, #0]
 8007798:	2100      	movs	r1, #0
 800779a:	1d1a      	adds	r2, r3, #4
 800779c:	602a      	str	r2, [r5, #0]
 800779e:	681d      	ldr	r5, [r3, #0]
 80077a0:	6862      	ldr	r2, [r4, #4]
 80077a2:	4628      	mov	r0, r5
 80077a4:	f000 f8da 	bl	800795c <memchr>
 80077a8:	b108      	cbz	r0, 80077ae <_printf_i+0x1f2>
 80077aa:	1b40      	subs	r0, r0, r5
 80077ac:	6060      	str	r0, [r4, #4]
 80077ae:	6863      	ldr	r3, [r4, #4]
 80077b0:	6123      	str	r3, [r4, #16]
 80077b2:	2300      	movs	r3, #0
 80077b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b8:	e7a8      	b.n	800770c <_printf_i+0x150>
 80077ba:	6923      	ldr	r3, [r4, #16]
 80077bc:	462a      	mov	r2, r5
 80077be:	4649      	mov	r1, r9
 80077c0:	4640      	mov	r0, r8
 80077c2:	47d0      	blx	sl
 80077c4:	3001      	adds	r0, #1
 80077c6:	d0ab      	beq.n	8007720 <_printf_i+0x164>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	079b      	lsls	r3, r3, #30
 80077cc:	d413      	bmi.n	80077f6 <_printf_i+0x23a>
 80077ce:	68e0      	ldr	r0, [r4, #12]
 80077d0:	9b03      	ldr	r3, [sp, #12]
 80077d2:	4298      	cmp	r0, r3
 80077d4:	bfb8      	it	lt
 80077d6:	4618      	movlt	r0, r3
 80077d8:	e7a4      	b.n	8007724 <_printf_i+0x168>
 80077da:	2301      	movs	r3, #1
 80077dc:	4632      	mov	r2, r6
 80077de:	4649      	mov	r1, r9
 80077e0:	4640      	mov	r0, r8
 80077e2:	47d0      	blx	sl
 80077e4:	3001      	adds	r0, #1
 80077e6:	d09b      	beq.n	8007720 <_printf_i+0x164>
 80077e8:	3501      	adds	r5, #1
 80077ea:	68e3      	ldr	r3, [r4, #12]
 80077ec:	9903      	ldr	r1, [sp, #12]
 80077ee:	1a5b      	subs	r3, r3, r1
 80077f0:	42ab      	cmp	r3, r5
 80077f2:	dcf2      	bgt.n	80077da <_printf_i+0x21e>
 80077f4:	e7eb      	b.n	80077ce <_printf_i+0x212>
 80077f6:	2500      	movs	r5, #0
 80077f8:	f104 0619 	add.w	r6, r4, #25
 80077fc:	e7f5      	b.n	80077ea <_printf_i+0x22e>
 80077fe:	bf00      	nop
 8007800:	08007ca1 	.word	0x08007ca1
 8007804:	08007cb2 	.word	0x08007cb2

08007808 <_sbrk_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	2300      	movs	r3, #0
 800780c:	4d05      	ldr	r5, [pc, #20]	; (8007824 <_sbrk_r+0x1c>)
 800780e:	4604      	mov	r4, r0
 8007810:	4608      	mov	r0, r1
 8007812:	602b      	str	r3, [r5, #0]
 8007814:	f7f9 fd52 	bl	80012bc <_sbrk>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_sbrk_r+0x1a>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	b103      	cbz	r3, 8007822 <_sbrk_r+0x1a>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	200005c0 	.word	0x200005c0

08007828 <__sread>:
 8007828:	b510      	push	{r4, lr}
 800782a:	460c      	mov	r4, r1
 800782c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007830:	f000 f8ae 	bl	8007990 <_read_r>
 8007834:	2800      	cmp	r0, #0
 8007836:	bfab      	itete	ge
 8007838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800783a:	89a3      	ldrhlt	r3, [r4, #12]
 800783c:	181b      	addge	r3, r3, r0
 800783e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007842:	bfac      	ite	ge
 8007844:	6563      	strge	r3, [r4, #84]	; 0x54
 8007846:	81a3      	strhlt	r3, [r4, #12]
 8007848:	bd10      	pop	{r4, pc}

0800784a <__swrite>:
 800784a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784e:	461f      	mov	r7, r3
 8007850:	898b      	ldrh	r3, [r1, #12]
 8007852:	4605      	mov	r5, r0
 8007854:	460c      	mov	r4, r1
 8007856:	05db      	lsls	r3, r3, #23
 8007858:	4616      	mov	r6, r2
 800785a:	d505      	bpl.n	8007868 <__swrite+0x1e>
 800785c:	2302      	movs	r3, #2
 800785e:	2200      	movs	r2, #0
 8007860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007864:	f000 f868 	bl	8007938 <_lseek_r>
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	4632      	mov	r2, r6
 800786c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007870:	4628      	mov	r0, r5
 8007872:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007876:	81a3      	strh	r3, [r4, #12]
 8007878:	463b      	mov	r3, r7
 800787a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800787e:	f000 b817 	b.w	80078b0 <_write_r>

08007882 <__sseek>:
 8007882:	b510      	push	{r4, lr}
 8007884:	460c      	mov	r4, r1
 8007886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788a:	f000 f855 	bl	8007938 <_lseek_r>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	bf15      	itete	ne
 8007894:	6560      	strne	r0, [r4, #84]	; 0x54
 8007896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800789a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800789e:	81a3      	strheq	r3, [r4, #12]
 80078a0:	bf18      	it	ne
 80078a2:	81a3      	strhne	r3, [r4, #12]
 80078a4:	bd10      	pop	{r4, pc}

080078a6 <__sclose>:
 80078a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078aa:	f000 b813 	b.w	80078d4 <_close_r>
	...

080078b0 <_write_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4604      	mov	r4, r0
 80078b4:	4d06      	ldr	r5, [pc, #24]	; (80078d0 <_write_r+0x20>)
 80078b6:	4608      	mov	r0, r1
 80078b8:	4611      	mov	r1, r2
 80078ba:	2200      	movs	r2, #0
 80078bc:	602a      	str	r2, [r5, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	f7f9 fcab 	bl	800121a <_write>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_write_r+0x1e>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_write_r+0x1e>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	200005c0 	.word	0x200005c0

080078d4 <_close_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	2300      	movs	r3, #0
 80078d8:	4d05      	ldr	r5, [pc, #20]	; (80078f0 <_close_r+0x1c>)
 80078da:	4604      	mov	r4, r0
 80078dc:	4608      	mov	r0, r1
 80078de:	602b      	str	r3, [r5, #0]
 80078e0:	f7f9 fcb7 	bl	8001252 <_close>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d102      	bne.n	80078ee <_close_r+0x1a>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	b103      	cbz	r3, 80078ee <_close_r+0x1a>
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	200005c0 	.word	0x200005c0

080078f4 <_fstat_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	2300      	movs	r3, #0
 80078f8:	4d06      	ldr	r5, [pc, #24]	; (8007914 <_fstat_r+0x20>)
 80078fa:	4604      	mov	r4, r0
 80078fc:	4608      	mov	r0, r1
 80078fe:	4611      	mov	r1, r2
 8007900:	602b      	str	r3, [r5, #0]
 8007902:	f7f9 fcb2 	bl	800126a <_fstat>
 8007906:	1c43      	adds	r3, r0, #1
 8007908:	d102      	bne.n	8007910 <_fstat_r+0x1c>
 800790a:	682b      	ldr	r3, [r5, #0]
 800790c:	b103      	cbz	r3, 8007910 <_fstat_r+0x1c>
 800790e:	6023      	str	r3, [r4, #0]
 8007910:	bd38      	pop	{r3, r4, r5, pc}
 8007912:	bf00      	nop
 8007914:	200005c0 	.word	0x200005c0

08007918 <_isatty_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	2300      	movs	r3, #0
 800791c:	4d05      	ldr	r5, [pc, #20]	; (8007934 <_isatty_r+0x1c>)
 800791e:	4604      	mov	r4, r0
 8007920:	4608      	mov	r0, r1
 8007922:	602b      	str	r3, [r5, #0]
 8007924:	f7f9 fcb1 	bl	800128a <_isatty>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d102      	bne.n	8007932 <_isatty_r+0x1a>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	b103      	cbz	r3, 8007932 <_isatty_r+0x1a>
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	200005c0 	.word	0x200005c0

08007938 <_lseek_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4604      	mov	r4, r0
 800793c:	4d06      	ldr	r5, [pc, #24]	; (8007958 <_lseek_r+0x20>)
 800793e:	4608      	mov	r0, r1
 8007940:	4611      	mov	r1, r2
 8007942:	2200      	movs	r2, #0
 8007944:	602a      	str	r2, [r5, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	f7f9 fcaa 	bl	80012a0 <_lseek>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	d102      	bne.n	8007956 <_lseek_r+0x1e>
 8007950:	682b      	ldr	r3, [r5, #0]
 8007952:	b103      	cbz	r3, 8007956 <_lseek_r+0x1e>
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	200005c0 	.word	0x200005c0

0800795c <memchr>:
 800795c:	b2c9      	uxtb	r1, r1
 800795e:	4402      	add	r2, r0
 8007960:	b510      	push	{r4, lr}
 8007962:	4290      	cmp	r0, r2
 8007964:	4603      	mov	r3, r0
 8007966:	d101      	bne.n	800796c <memchr+0x10>
 8007968:	2300      	movs	r3, #0
 800796a:	e003      	b.n	8007974 <memchr+0x18>
 800796c:	781c      	ldrb	r4, [r3, #0]
 800796e:	3001      	adds	r0, #1
 8007970:	428c      	cmp	r4, r1
 8007972:	d1f6      	bne.n	8007962 <memchr+0x6>
 8007974:	4618      	mov	r0, r3
 8007976:	bd10      	pop	{r4, pc}

08007978 <__malloc_lock>:
 8007978:	4801      	ldr	r0, [pc, #4]	; (8007980 <__malloc_lock+0x8>)
 800797a:	f7ff bb0d 	b.w	8006f98 <__retarget_lock_acquire_recursive>
 800797e:	bf00      	nop
 8007980:	200005b4 	.word	0x200005b4

08007984 <__malloc_unlock>:
 8007984:	4801      	ldr	r0, [pc, #4]	; (800798c <__malloc_unlock+0x8>)
 8007986:	f7ff bb08 	b.w	8006f9a <__retarget_lock_release_recursive>
 800798a:	bf00      	nop
 800798c:	200005b4 	.word	0x200005b4

08007990 <_read_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4604      	mov	r4, r0
 8007994:	4d06      	ldr	r5, [pc, #24]	; (80079b0 <_read_r+0x20>)
 8007996:	4608      	mov	r0, r1
 8007998:	4611      	mov	r1, r2
 800799a:	2200      	movs	r2, #0
 800799c:	602a      	str	r2, [r5, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	f7f9 fc1e 	bl	80011e0 <_read>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_read_r+0x1e>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_read_r+0x1e>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	200005c0 	.word	0x200005c0

080079b4 <_init>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	bf00      	nop
 80079b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ba:	bc08      	pop	{r3}
 80079bc:	469e      	mov	lr, r3
 80079be:	4770      	bx	lr

080079c0 <_fini>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	bf00      	nop
 80079c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c6:	bc08      	pop	{r3}
 80079c8:	469e      	mov	lr, r3
 80079ca:	4770      	bx	lr
